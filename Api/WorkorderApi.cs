/* 
 * FIELDNATION RESTful API V2
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using FieldNation.SDK.Client;
using FieldNation.SDK.Model;

namespace FieldNation.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkorderApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept Swap Request
        /// </summary>
        /// <remarks>
        /// Accept work order swap request.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>SwapResponse</returns>
        SwapResponse AcceptSwapRequest (int? workOrderId, int? swapRequestId);

        /// <summary>
        /// Accept Swap Request
        /// </summary>
        /// <remarks>
        /// Accept work order swap request.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>ApiResponse of SwapResponse</returns>
        ApiResponse<SwapResponse> AcceptSwapRequestWithHttpInfo (int? workOrderId, int? swapRequestId);
        /// <summary>
        /// Acknowledge delay by work order
        /// </summary>
        /// <remarks>
        /// Acknowledges a provider&#39;s delay on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns></returns>
        void AcknowledgeDelayByWorkOrder (int? workOrderId);

        /// <summary>
        /// Acknowledge delay by work order
        /// </summary>
        /// <remarks>
        /// Acknowledges a provider&#39;s delay on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AcknowledgeDelayByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Add Alert to Work Order and Task
        /// </summary>
        /// <remarks>
        /// Sets up an alert to be fired upon the completion of a task associated with a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="json">JSON Model</param>
        /// <returns>WorkOrder</returns>
        WorkOrder AddAlertToWorkOrderAndTask (int? workOrderId, int? taskId, TaskAlert json);

        /// <summary>
        /// Add Alert to Work Order and Task
        /// </summary>
        /// <remarks>
        /// Sets up an alert to be fired upon the completion of a task associated with a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="json">JSON Model</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> AddAlertToWorkOrderAndTaskWithHttpInfo (int? workOrderId, int? taskId, TaskAlert json);
        /// <summary>
        /// Add Attachment by Work Order and Folder
        /// </summary>
        /// <remarks>
        /// Uploads a file by an attachment folder
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachment">Folder</param>
        /// <param name="file">File</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder AddAttachmentByWorkOrderAndFolder (int? workOrderId, int? folderId, string attachment, System.IO.Stream file, bool? async = null);

        /// <summary>
        /// Add Attachment by Work Order and Folder
        /// </summary>
        /// <remarks>
        /// Uploads a file by an attachment folder
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachment">Folder</param>
        /// <param name="file">File</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> AddAttachmentByWorkOrderAndFolderWithHttpInfo (int? workOrderId, int? folderId, string attachment, System.IO.Stream file, bool? async = null);
        /// <summary>
        /// Add Attribute by Location and Attribute
        /// </summary>
        /// <remarks>
        /// Adds an attribute to a stored location
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <param name="attribute">JSON Model</param>
        /// <returns>StoredLocation</returns>
        StoredLocation AddAttributeByLocationAndAttribute (int? locationId, int? attributeName, LocationAttribute attribute);

        /// <summary>
        /// Add Attribute by Location and Attribute
        /// </summary>
        /// <remarks>
        /// Adds an attribute to a stored location
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <param name="attribute">JSON Model</param>
        /// <returns>ApiResponse of StoredLocation</returns>
        ApiResponse<StoredLocation> AddAttributeByLocationAndAttributeWithHttpInfo (int? locationId, int? attributeName, LocationAttribute attribute);
        /// <summary>
        /// Add Bonus by Work Order and Bonus
        /// </summary>
        /// <remarks>
        /// Adds a bonus on a work order which can conditionally increase the amount paid to the provider upon conditions being met
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder AddBonusByWorkOrderAndBonus (int? workOrderId, int? bonusId, PayModifier bonus = null);

        /// <summary>
        /// Add Bonus by Work Order and Bonus
        /// </summary>
        /// <remarks>
        /// Adds a bonus on a work order which can conditionally increase the amount paid to the provider upon conditions being met
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> AddBonusByWorkOrderAndBonusWithHttpInfo (int? workOrderId, int? bonusId, PayModifier bonus = null);
        /// <summary>
        /// Add Contact by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a contact to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contact">JSON Model</param>
        /// <returns>WorkOrder</returns>
        WorkOrder AddContactByWorkOrder (int? workOrderId, Contact contact);

        /// <summary>
        /// Add Contact by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a contact to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contact">JSON Model</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> AddContactByWorkOrderWithHttpInfo (int? workOrderId, Contact contact);
        /// <summary>
        /// Add Work Order Discount
        /// </summary>
        /// <remarks>
        /// Assigned provider route to adds and apply a discount to a work order which reduces the amount they will be paid. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="json">Payload of the discount</param>
        /// <returns>WorkOrder</returns>
        WorkOrder AddDiscountByWorkOrder (int? workOrderId, PayModifier json);

        /// <summary>
        /// Add Work Order Discount
        /// </summary>
        /// <remarks>
        /// Assigned provider route to adds and apply a discount to a work order which reduces the amount they will be paid. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="json">Payload of the discount</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> AddDiscountByWorkOrderWithHttpInfo (int? workOrderId, PayModifier json);
        /// <summary>
        /// Add Expense By Work order
        /// </summary>
        /// <remarks>
        /// Adds an expense on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expense">Expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder AddExpenseByWorkOrder (int? workOrderId, Expense expense, bool? async = null);

        /// <summary>
        /// Add Expense By Work order
        /// </summary>
        /// <remarks>
        /// Adds an expense on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expense">Expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> AddExpenseByWorkOrderWithHttpInfo (int? workOrderId, Expense expense, bool? async = null);
        /// <summary>
        /// Add Folder by Work Order
        /// </summary>
        /// <remarks>
        /// Adds an attachment folder
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folder">Folder</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder AddFolderByWorkOrder (int? workOrderId, AttachmentFolder folder, bool? async = null);

        /// <summary>
        /// Add Folder by Work Order
        /// </summary>
        /// <remarks>
        /// Adds an attachment folder
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folder">Folder</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> AddFolderByWorkOrderWithHttpInfo (int? workOrderId, AttachmentFolder folder, bool? async = null);
        /// <summary>
        /// Add Hold by Work Order and Hold
        /// </summary>
        /// <remarks>
        /// Adds a hold on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="hold">Hold object with updates</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder AddHoldByWorkOrder (int? workOrderId, Hold hold, bool? async = null);

        /// <summary>
        /// Add Hold by Work Order and Hold
        /// </summary>
        /// <remarks>
        /// Adds a hold on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="hold">Hold object with updates</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> AddHoldByWorkOrderWithHttpInfo (int? workOrderId, Hold hold, bool? async = null);
        /// <summary>
        /// Create Increase by Work Order
        /// </summary>
        /// <remarks>
        /// Create pay increase for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increase">Increase structure for update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder AddIncreaseByWorkOrder (int? workOrderId, PayIncrease increase, bool? async = null);

        /// <summary>
        /// Create Increase by Work Order
        /// </summary>
        /// <remarks>
        /// Create pay increase for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increase">Increase structure for update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> AddIncreaseByWorkOrderWithHttpInfo (int? workOrderId, PayIncrease increase, bool? async = null);
        /// <summary>
        /// Add Message by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a message to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="json">JSON payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Messages</returns>
        Messages AddMessageByWorkOrder (int? workOrderId, Message json, bool? async = null);

        /// <summary>
        /// Add Message by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a message to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="json">JSON payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of Messages</returns>
        ApiResponse<Messages> AddMessageByWorkOrderWithHttpInfo (int? workOrderId, Message json, bool? async = null);
        /// <summary>
        /// Add Penalty by Work Order and Penalty
        /// </summary>
        /// <remarks>
        /// Adds a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <param name="penalty">Penalty (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder AddPenaltyByWorkOrderAndPenalty (int? workOrderId, int? penaltyId, PayModifier penalty = null);

        /// <summary>
        /// Add Penalty by Work Order and Penalty
        /// </summary>
        /// <remarks>
        /// Adds a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <param name="penalty">Penalty (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> AddPenaltyByWorkOrderAndPenaltyWithHttpInfo (int? workOrderId, int? penaltyId, PayModifier penalty = null);
        /// <summary>
        /// Add Problem by Work Order
        /// </summary>
        /// <remarks>
        /// Reports a problem on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problem">Problem</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder AddProblemByWorkOrder (int? workOrderId, Problem problem, bool? async = null);

        /// <summary>
        /// Add Problem by Work Order
        /// </summary>
        /// <remarks>
        /// Reports a problem on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problem">Problem</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> AddProblemByWorkOrderWithHttpInfo (int? workOrderId, Problem problem, bool? async = null);
        /// <summary>
        /// Add Qualification by Work Order
        /// </summary>
        /// <remarks>
        /// Add qualification for work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualifications">Qualification information</param>
        /// <returns>WorkOrder</returns>
        WorkOrder AddQualificationByWorkOrder (int? workOrderId, Qualifications qualifications);

        /// <summary>
        /// Add Qualification by Work Order
        /// </summary>
        /// <remarks>
        /// Add qualification for work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualifications">Qualification information</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> AddQualificationByWorkOrderWithHttpInfo (int? workOrderId, Qualifications qualifications);
        /// <summary>
        /// Add Shipment by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a shipment to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder AddShipmentByWorkOrder (int? workOrderId, Shipment shipment, bool? async = null);

        /// <summary>
        /// Add Shipment by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a shipment to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> AddShipmentByWorkOrderWithHttpInfo (int? workOrderId, Shipment shipment, bool? async = null);
        /// <summary>
        /// Add Signature by Work Order
        /// </summary>
        /// <remarks>
        /// Add signature by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signature">Signature JSON</param>
        /// <param name="async">async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder AddSignatureByWorkOrder (int? workOrderId, Signature signature, bool? async = null);

        /// <summary>
        /// Add Signature by Work Order
        /// </summary>
        /// <remarks>
        /// Add signature by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signature">Signature JSON</param>
        /// <param name="async">async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> AddSignatureByWorkOrderWithHttpInfo (int? workOrderId, Signature signature, bool? async = null);
        /// <summary>
        /// Add Swap by Work Order
        /// </summary>
        /// <remarks>
        /// Requests a provider swap for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swap">Swap</param>
        /// <returns>WorkOrder</returns>
        WorkOrder AddSwapByWorkOrder (int? workOrderId, Swap swap);

        /// <summary>
        /// Add Swap by Work Order
        /// </summary>
        /// <remarks>
        /// Requests a provider swap for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swap">Swap</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> AddSwapByWorkOrderWithHttpInfo (int? workOrderId, Swap swap);
        /// <summary>
        /// Add Tag
        /// </summary>
        /// <remarks>
        /// Adds a tag to a company for selection on a work order basis
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Tag</returns>
        Tag AddTag (Tag tag, bool? async = null);

        /// <summary>
        /// Add Tag
        /// </summary>
        /// <remarks>
        /// Adds a tag to a company for selection on a work order basis
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> AddTagWithHttpInfo (Tag tag, bool? async = null);
        /// <summary>
        /// Add Tag by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a tag to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <param name="noModelUpdate">Supress the model update return (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder AddTagByWorkOrder (int? workOrderId, Tag tag, bool? async = null, bool? noModelUpdate = null);

        /// <summary>
        /// Add Tag by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a tag to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <param name="noModelUpdate">Supress the model update return (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> AddTagByWorkOrderWithHttpInfo (int? workOrderId, Tag tag, bool? async = null, bool? noModelUpdate = null);
        /// <summary>
        /// Add Task by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a task to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="task">JSON Model</param>
        /// <returns>WorkOrder</returns>
        WorkOrder AddTaskByWorkOrder (int? workOrderId, Task task);

        /// <summary>
        /// Add Task by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a task to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="task">JSON Model</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> AddTaskByWorkOrderWithHttpInfo (int? workOrderId, Task task);
        /// <summary>
        /// Add Time Log by Work Order
        /// </summary>
        /// <remarks>
        /// Add time log for work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="timeLog">Check in information</param>
        /// <returns>WorkOrder</returns>
        WorkOrder AddTimeLogByWorkOrder (int? workOrderId, TimeLog timeLog);

        /// <summary>
        /// Add Time Log by Work Order
        /// </summary>
        /// <remarks>
        /// Add time log for work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="timeLog">Check in information</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> AddTimeLogByWorkOrderWithHttpInfo (int? workOrderId, TimeLog timeLog);
        /// <summary>
        /// Add Work Order
        /// </summary>
        /// <remarks>
        /// Create a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrder">Work order</param>
        /// <returns>WorkOrder</returns>
        WorkOrder AddWorkOrder (WorkOrder workOrder);

        /// <summary>
        /// Add Work Order
        /// </summary>
        /// <remarks>
        /// Create a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrder">Work order</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> AddWorkOrderWithHttpInfo (WorkOrder workOrder);
        /// <summary>
        /// Approve Work Order By Work Order
        /// </summary>
        /// <remarks>
        /// Approves a completed work order and moves it to paid status
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder ApproveWorkOrderByWorkOrder (int? workOrderId, bool? async = null);

        /// <summary>
        /// Approve Work Order By Work Order
        /// </summary>
        /// <remarks>
        /// Approves a completed work order and moves it to paid status
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> ApproveWorkOrderByWorkOrderWithHttpInfo (int? workOrderId, bool? async = null);
        /// <summary>
        /// Assign User by Work Order
        /// </summary>
        /// <remarks>
        /// Assign a user to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="assignee">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns></returns>
        void AssignUserByWorkOrder (int? workOrderId, Assignee assignee, bool? async = null);

        /// <summary>
        /// Assign User by Work Order
        /// </summary>
        /// <remarks>
        /// Assign a user to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="assignee">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssignUserByWorkOrderWithHttpInfo (int? workOrderId, Assignee assignee, bool? async = null);
        /// <summary>
        /// Auto Dispatch Work Orders
        /// </summary>
        /// <remarks>
        /// Auto-dispatches one or more draft work orders
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoDispatch"></param>
        /// <returns></returns>
        void AutoDispatchWorkOrders (AutoDispatch autoDispatch);

        /// <summary>
        /// Auto Dispatch Work Orders
        /// </summary>
        /// <remarks>
        /// Auto-dispatches one or more draft work orders
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoDispatch"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AutoDispatchWorkOrdersWithHttpInfo (AutoDispatch autoDispatch);
        /// <summary>
        /// Cancel Swap Request
        /// </summary>
        /// <remarks>
        /// Cancel work order swap request.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>SwapResponse</returns>
        SwapResponse CancelSwapRequest (int? workOrderId, int? swapRequestId);

        /// <summary>
        /// Cancel Swap Request
        /// </summary>
        /// <remarks>
        /// Cancel work order swap request.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>ApiResponse of SwapResponse</returns>
        ApiResponse<SwapResponse> CancelSwapRequestWithHttpInfo (int? workOrderId, int? swapRequestId);
        /// <summary>
        /// Complete Work Order By Work Order
        /// </summary>
        /// <remarks>
        /// Marks a work order complete and moves it to work done status
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder CompleteWorkOrderByWorkOrder (int? workOrderId, bool? async = null);

        /// <summary>
        /// Complete Work Order By Work Order
        /// </summary>
        /// <remarks>
        /// Marks a work order complete and moves it to work done status
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> CompleteWorkOrderByWorkOrderWithHttpInfo (int? workOrderId, bool? async = null);
        /// <summary>
        /// Decline by Work Order
        /// </summary>
        /// <remarks>
        /// Decline a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder DeclineByWorkOrder (int? workOrderId, bool? async = null);

        /// <summary>
        /// Decline by Work Order
        /// </summary>
        /// <remarks>
        /// Decline a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> DeclineByWorkOrderWithHttpInfo (int? workOrderId, bool? async = null);
        /// <summary>
        /// Decline Request by Work Order and userId
        /// </summary>
        /// <remarks>
        /// Removes or hides a request by a user from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="userId">User id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder DeclineRequestByWorkOrder (int? workOrderId, int? userId, bool? async = null);

        /// <summary>
        /// Decline Request by Work Order and userId
        /// </summary>
        /// <remarks>
        /// Removes or hides a request by a user from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="userId">User id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> DeclineRequestByWorkOrderWithHttpInfo (int? workOrderId, int? userId, bool? async = null);
        /// <summary>
        /// Decline Swap Request
        /// </summary>
        /// <remarks>
        /// Decline work order swap request.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>SwapResponse</returns>
        SwapResponse DeclineSwapRequest (int? workOrderId, int? swapRequestId);

        /// <summary>
        /// Decline Swap Request
        /// </summary>
        /// <remarks>
        /// Decline work order swap request.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>ApiResponse of SwapResponse</returns>
        ApiResponse<SwapResponse> DeclineSwapRequestWithHttpInfo (int? workOrderId, int? swapRequestId);
        /// <summary>
        /// Delete Attachment by Work Order and Folder and Attachment
        /// </summary>
        /// <remarks>
        /// Deletes an attachment folder and its contents
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder DeleteAttachmentByWorkOrderAndFolderAndAttachment (int? workOrderId, int? folderId, int? attachmentId, bool? async = null);

        /// <summary>
        /// Delete Attachment by Work Order and Folder and Attachment
        /// </summary>
        /// <remarks>
        /// Deletes an attachment folder and its contents
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> DeleteAttachmentByWorkOrderAndFolderAndAttachmentWithHttpInfo (int? workOrderId, int? folderId, int? attachmentId, bool? async = null);
        /// <summary>
        /// Delete Attribute by Location and Attribute
        /// </summary>
        /// <remarks>
        /// Delete an attribute from a stored location
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <returns>StoredLocation</returns>
        StoredLocation DeleteAttributeByLocationAndAttribute (int? locationId, int? attributeName);

        /// <summary>
        /// Delete Attribute by Location and Attribute
        /// </summary>
        /// <remarks>
        /// Delete an attribute from a stored location
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <returns>ApiResponse of StoredLocation</returns>
        ApiResponse<StoredLocation> DeleteAttributeByLocationAndAttributeWithHttpInfo (int? locationId, int? attributeName);
        /// <summary>
        /// Delete Bonus by Work Order and Bonus
        /// </summary>
        /// <remarks>
        /// Deletes a bonus from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <returns>WorkOrder</returns>
        WorkOrder DeleteBonusByWorkOrderAndBonus (int? workOrderId, int? bonusId);

        /// <summary>
        /// Delete Bonus by Work Order and Bonus
        /// </summary>
        /// <remarks>
        /// Deletes a bonus from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> DeleteBonusByWorkOrderAndBonusWithHttpInfo (int? workOrderId, int? bonusId);
        /// <summary>
        /// Delete Contact by Work Order and Contact
        /// </summary>
        /// <remarks>
        /// Delete a work order contact
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contactId">Contact id</param>
        /// <returns>WorkOrder</returns>
        WorkOrder DeleteContactByWorkOrderAndContact (int? workOrderId, int? contactId);

        /// <summary>
        /// Delete Contact by Work Order and Contact
        /// </summary>
        /// <remarks>
        /// Delete a work order contact
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contactId">Contact id</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> DeleteContactByWorkOrderAndContactWithHttpInfo (int? workOrderId, int? contactId);
        /// <summary>
        /// Delete Discount by WorK Order
        /// </summary>
        /// <remarks>
        /// Allows an assigned provider to removes a discount they previously applied from a work order, increasing the amount they will be paid. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="discountId">ID of the discount</param>
        /// <returns>WorkOrder</returns>
        WorkOrder DeleteDiscountByWorkOrder (int? workOrderId, int? discountId);

        /// <summary>
        /// Delete Discount by WorK Order
        /// </summary>
        /// <remarks>
        /// Allows an assigned provider to removes a discount they previously applied from a work order, increasing the amount they will be paid. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="discountId">ID of the discount</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> DeleteDiscountByWorkOrderWithHttpInfo (int? workOrderId, int? discountId);
        /// <summary>
        /// Delete Expense by Work Order and Expense
        /// </summary>
        /// <remarks>
        /// Delete an expense from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expenseId">ID of expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder DeleteExpenseByWorkOrderAndExpense (int? workOrderId, int? expenseId, bool? async = null);

        /// <summary>
        /// Delete Expense by Work Order and Expense
        /// </summary>
        /// <remarks>
        /// Delete an expense from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expenseId">ID of expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> DeleteExpenseByWorkOrderAndExpenseWithHttpInfo (int? workOrderId, int? expenseId, bool? async = null);
        /// <summary>
        /// Delete Folder by Work Order and Folder
        /// </summary>
        /// <remarks>
        /// Deletes an attachment folder
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder DeleteFolderByWorkOrderAndFolder (int? workOrderId, int? folderId, bool? async = null);

        /// <summary>
        /// Delete Folder by Work Order and Folder
        /// </summary>
        /// <remarks>
        /// Deletes an attachment folder
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> DeleteFolderByWorkOrderAndFolderWithHttpInfo (int? workOrderId, int? folderId, bool? async = null);
        /// <summary>
        /// Delete Hold by Work Order and Hold
        /// </summary>
        /// <remarks>
        /// Deletes a hold on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="hold">Hold object</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder DeleteHoldByWorkOrderAndHold (int? workOrderId, int? holdId, Hold hold, bool? async = null);

        /// <summary>
        /// Delete Hold by Work Order and Hold
        /// </summary>
        /// <remarks>
        /// Deletes a hold on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="hold">Hold object</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> DeleteHoldByWorkOrderAndHoldWithHttpInfo (int? workOrderId, int? holdId, Hold hold, bool? async = null);
        /// <summary>
        /// Delete Increase by Work Order
        /// </summary>
        /// <remarks>
        /// Delete pay increase for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder DeleteIncreaseByWorkOrderAndIncrease (int? workOrderId, int? increaseId, bool? async = null);

        /// <summary>
        /// Delete Increase by Work Order
        /// </summary>
        /// <remarks>
        /// Delete pay increase for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> DeleteIncreaseByWorkOrderAndIncreaseWithHttpInfo (int? workOrderId, int? increaseId, bool? async = null);
        /// <summary>
        /// Delete Message by Work Order
        /// </summary>
        /// <remarks>
        /// Deletes a message on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <returns>WorkOrder</returns>
        WorkOrder DeleteMessageByWorkOrder (int? workOrderId, int? messageId);

        /// <summary>
        /// Delete Message by Work Order
        /// </summary>
        /// <remarks>
        /// Deletes a message on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> DeleteMessageByWorkOrderWithHttpInfo (int? workOrderId, int? messageId);
        /// <summary>
        /// Delete Penalty by Work Order and Penalty
        /// </summary>
        /// <remarks>
        /// Removes a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of Work Order</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <returns>WorkOrder</returns>
        WorkOrder DeletePenaltyByWorkOrderAndPenalty (int? workOrderId, int? penaltyId);

        /// <summary>
        /// Delete Penalty by Work Order and Penalty
        /// </summary>
        /// <remarks>
        /// Removes a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of Work Order</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> DeletePenaltyByWorkOrderAndPenaltyWithHttpInfo (int? workOrderId, int? penaltyId);
        /// <summary>
        /// Delete problem by work order
        /// </summary>
        /// <remarks>
        /// Deletes a problem on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder DeleteProblemByWorkOrder (int? workOrderId, int? problemId, bool? async = null);

        /// <summary>
        /// Delete problem by work order
        /// </summary>
        /// <remarks>
        /// Deletes a problem on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> DeleteProblemByWorkOrderWithHttpInfo (int? workOrderId, int? problemId, bool? async = null);
        /// <summary>
        /// Delete Request by Work Order
        /// </summary>
        /// <remarks>
        /// Removes or hides a request by a user from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="requestId">ID of work order request/counter offer</param>
        /// <param name="async">Async (optional)</param>
        /// <returns></returns>
        void DeleteRequestByWorkOrder (int? workOrderId, int? requestId, bool? async = null);

        /// <summary>
        /// Delete Request by Work Order
        /// </summary>
        /// <remarks>
        /// Removes or hides a request by a user from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="requestId">ID of work order request/counter offer</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRequestByWorkOrderWithHttpInfo (int? workOrderId, int? requestId, bool? async = null);
        /// <summary>
        /// Delete Shipment by Work Order and Shipment
        /// </summary>
        /// <remarks>
        /// Deletes a shipment from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipmentId">Shipment id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder DeleteShipmentByWorkOrderAndShipment (int? workOrderId, int? shipmentId, bool? async = null);

        /// <summary>
        /// Delete Shipment by Work Order and Shipment
        /// </summary>
        /// <remarks>
        /// Deletes a shipment from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipmentId">Shipment id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> DeleteShipmentByWorkOrderAndShipmentWithHttpInfo (int? workOrderId, int? shipmentId, bool? async = null);
        /// <summary>
        /// Delete Signature by Work Order and Signature
        /// </summary>
        /// <remarks>
        /// Delete signature by work order and signature
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signatureId">ID of signature</param>
        /// <param name="async">async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder DeleteSignatureByWorkOrderAndSignature (int? workOrderId, int? signatureId, bool? async = null);

        /// <summary>
        /// Delete Signature by Work Order and Signature
        /// </summary>
        /// <remarks>
        /// Delete signature by work order and signature
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signatureId">ID of signature</param>
        /// <param name="async">async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> DeleteSignatureByWorkOrderAndSignatureWithHttpInfo (int? workOrderId, int? signatureId, bool? async = null);
        /// <summary>
        /// Delete tag by work order
        /// </summary>
        /// <remarks>
        /// Deletes a tag on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder DeleteTagByWorkOrderAndTag (int? workOrderId, int? tagId, bool? async = null);

        /// <summary>
        /// Delete tag by work order
        /// </summary>
        /// <remarks>
        /// Deletes a tag on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> DeleteTagByWorkOrderAndTagWithHttpInfo (int? workOrderId, int? tagId, bool? async = null);
        /// <summary>
        /// Delete Task by Work Order
        /// </summary>
        /// <remarks>
        /// Delete a work order&#39;s task
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <returns>WorkOrder</returns>
        WorkOrder DeleteTaskByWorkOrder (int? workOrderId, int? taskId);

        /// <summary>
        /// Delete Task by Work Order
        /// </summary>
        /// <remarks>
        /// Delete a work order&#39;s task
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> DeleteTaskByWorkOrderWithHttpInfo (int? workOrderId, int? taskId);
        /// <summary>
        /// Delete Time Log by Work Order
        /// </summary>
        /// <remarks>
        /// Remove time log for assigned work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder DeleteTimeLogByWorkOrder (int? workOrderId, int? workorderHoursId, bool? async = null);

        /// <summary>
        /// Delete Time Log by Work Order
        /// </summary>
        /// <remarks>
        /// Remove time log for assigned work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> DeleteTimeLogByWorkOrderWithHttpInfo (int? workOrderId, int? workorderHoursId, bool? async = null);
        /// <summary>
        /// Delete Work Order by Work Order
        /// </summary>
        /// <remarks>
        /// Deletes a work order by its id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="cancellation">Cancellation reasons</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder DeleteWorkOrderByWorkOrder (int? workOrderId, Cancellation cancellation, bool? async = null);

        /// <summary>
        /// Delete Work Order by Work Order
        /// </summary>
        /// <remarks>
        /// Deletes a work order by its id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="cancellation">Cancellation reasons</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> DeleteWorkOrderByWorkOrderWithHttpInfo (int? workOrderId, Cancellation cancellation, bool? async = null);
        /// <summary>
        /// Get Assignee by Work Order
        /// </summary>
        /// <remarks>
        /// Get assignee of a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Assignee</returns>
        Assignee GetAssigneeByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Assignee by Work Order
        /// </summary>
        /// <remarks>
        /// Get assignee of a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>ApiResponse of Assignee</returns>
        ApiResponse<Assignee> GetAssigneeByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Attachment Conflicts
        /// </summary>
        /// <remarks>
        /// Runs a report for a set of attachment ids, identifying any files corresponding to those ids that were used more than once. The response will include a report for each item with  a status reporting as unique or duplicate and the work order. Duplicate also reports a list of conflicting work order ids. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>AttachmentConflict</returns>
        AttachmentConflict GetAttachmentConflicts (List<int?> id = null);

        /// <summary>
        /// Get Attachment Conflicts
        /// </summary>
        /// <remarks>
        /// Runs a report for a set of attachment ids, identifying any files corresponding to those ids that were used more than once. The response will include a report for each item with  a status reporting as unique or duplicate and the work order. Duplicate also reports a list of conflicting work order ids. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of AttachmentConflict</returns>
        ApiResponse<AttachmentConflict> GetAttachmentConflictsWithHttpInfo (List<int?> id = null);
        /// <summary>
        /// Get Attachments
        /// </summary>
        /// <remarks>
        /// Gets a zip file of deliverables from multiple work orders
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="isFromProject"> (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetAttachments (List<string> workOrderId, int? type = null, bool? isFromProject = null);

        /// <summary>
        /// Get Attachments
        /// </summary>
        /// <remarks>
        /// Gets a zip file of deliverables from multiple work orders
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="isFromProject"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetAttachmentsWithHttpInfo (List<string> workOrderId, int? type = null, bool? isFromProject = null);
        /// <summary>
        /// Get Attachments by Work Order
        /// </summary>
        /// <remarks>
        /// Gets a list of attachment folders which contain files and deliverables for the work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>AttachmentFolders</returns>
        AttachmentFolders GetAttachmentsByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Attachments by Work Order
        /// </summary>
        /// <remarks>
        /// Gets a list of attachment folders which contain files and deliverables for the work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>ApiResponse of AttachmentFolders</returns>
        ApiResponse<AttachmentFolders> GetAttachmentsByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Bonus by Work Order and Bonus
        /// </summary>
        /// <remarks>
        /// Gets a bonus for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus (optional)</param>
        /// <returns>PayModifier</returns>
        PayModifier GetBonusByWorkOrderAndBonus (int? workOrderId, int? bonusId, PayModifier bonus = null);

        /// <summary>
        /// Get Bonus by Work Order and Bonus
        /// </summary>
        /// <remarks>
        /// Gets a bonus for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus (optional)</param>
        /// <returns>ApiResponse of PayModifier</returns>
        ApiResponse<PayModifier> GetBonusByWorkOrderAndBonusWithHttpInfo (int? workOrderId, int? bonusId, PayModifier bonus = null);
        /// <summary>
        /// Get Bonuses by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of available bonuses on a work order that can be applied to increase the amount paid to the provider upon conditions being met
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <returns>PayModifiers</returns>
        PayModifiers GetBonusesByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Bonuses by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of available bonuses on a work order that can be applied to increase the amount paid to the provider upon conditions being met
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <returns>ApiResponse of PayModifiers</returns>
        ApiResponse<PayModifiers> GetBonusesByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Contacts by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of contacts on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Contacts</returns>
        Contacts GetContactsByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Contacts by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of contacts on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>ApiResponse of Contacts</returns>
        ApiResponse<Contacts> GetContactsByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Custom Field By Work Order And Custom Field
        /// </summary>
        /// <remarks>
        /// Get a custom field by work order and custom field
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="customFieldId">Custom field id</param>
        /// <returns>CustomField</returns>
        CustomField GetCustomFieldByWorkOrderAndCustomField (int? workOrderId, int? customFieldId);

        /// <summary>
        /// Get Custom Field By Work Order And Custom Field
        /// </summary>
        /// <remarks>
        /// Get a custom field by work order and custom field
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="customFieldId">Custom field id</param>
        /// <returns>ApiResponse of CustomField</returns>
        ApiResponse<CustomField> GetCustomFieldByWorkOrderAndCustomFieldWithHttpInfo (int? workOrderId, int? customFieldId);
        /// <summary>
        /// Get Custom Fields by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of custom fields and their values for a work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>CustomFields</returns>
        CustomFields GetCustomFieldsByWorKOrder (int? workOrderId);

        /// <summary>
        /// Get Custom Fields by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of custom fields and their values for a work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of CustomFields</returns>
        ApiResponse<CustomFields> GetCustomFieldsByWorKOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Work Order Discounts
        /// </summary>
        /// <remarks>
        /// Returns a list of discounts applied by the assigned provider to reduce the payout of the work order. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>PayModifiers</returns>
        PayModifiers GetDiscountsByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Work Order Discounts
        /// </summary>
        /// <remarks>
        /// Returns a list of discounts applied by the assigned provider to reduce the payout of the work order. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of PayModifiers</returns>
        ApiResponse<PayModifiers> GetDiscountsByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get ETA by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the eta for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ETA</returns>
        ETA GetETAByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get ETA by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the eta for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of ETA</returns>
        ApiResponse<ETA> GetETAByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Expenses By Work Order
        /// </summary>
        /// <remarks>
        /// Get all expenses of a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Expenses</returns>
        Expenses GetExpensesByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Expenses By Work Order
        /// </summary>
        /// <remarks>
        /// Get all expenses of a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Expenses</returns>
        ApiResponse<Expenses> GetExpensesByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get File by Work Order and Folder and File
        /// </summary>
        /// <remarks>
        /// Gets an attachment folder and its contents
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <returns>Attachment</returns>
        Attachment GetFileByWorkOrderAndFolderAndFile (int? workOrderId, int? folderId, int? attachmentId);

        /// <summary>
        /// Get File by Work Order and Folder and File
        /// </summary>
        /// <remarks>
        /// Gets an attachment folder and its contents
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <returns>ApiResponse of Attachment</returns>
        ApiResponse<Attachment> GetFileByWorkOrderAndFolderAndFileWithHttpInfo (int? workOrderId, int? folderId, int? attachmentId);
        /// <summary>
        /// Get Folder by Work Order and Folder
        /// </summary>
        /// <remarks>
        /// Gets an attachment folder and its contents
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <returns>AttachmentFolder</returns>
        AttachmentFolder GetFolderByWorkOrderAndFolder (int? workOrderId, int? folderId);

        /// <summary>
        /// Get Folder by Work Order and Folder
        /// </summary>
        /// <remarks>
        /// Gets an attachment folder and its contents
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <returns>ApiResponse of AttachmentFolder</returns>
        ApiResponse<AttachmentFolder> GetFolderByWorkOrderAndFolderWithHttpInfo (int? workOrderId, int? folderId);
        /// <summary>
        /// Get Hold by Work Order and Hold
        /// </summary>
        /// <remarks>
        /// Gets a hold on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Hold</returns>
        Hold GetHoldByWorkOrderAndHold (int? workOrderId, int? holdId, bool? async = null);

        /// <summary>
        /// Get Hold by Work Order and Hold
        /// </summary>
        /// <remarks>
        /// Gets a hold on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of Hold</returns>
        ApiResponse<Hold> GetHoldByWorkOrderAndHoldWithHttpInfo (int? workOrderId, int? holdId, bool? async = null);
        /// <summary>
        /// Get holds on work order
        /// </summary>
        /// <remarks>
        /// Get holds on work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Holds</returns>
        Holds GetHoldsByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get holds on work order
        /// </summary>
        /// <remarks>
        /// Get holds on work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Holds</returns>
        ApiResponse<Holds> GetHoldsByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Increase by Work Order
        /// </summary>
        /// <remarks>
        /// Get pay increase for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>PayIncrease</returns>
        PayIncrease GetIncreaseByWorkOrderAndIncrease (int? workOrderId, int? increaseId, bool? async = null);

        /// <summary>
        /// Get Increase by Work Order
        /// </summary>
        /// <remarks>
        /// Get pay increase for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of PayIncrease</returns>
        ApiResponse<PayIncrease> GetIncreaseByWorkOrderAndIncreaseWithHttpInfo (int? workOrderId, int? increaseId, bool? async = null);
        /// <summary>
        /// Get Increases by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of pay increases requested by the assigned provider.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>PayIncreases</returns>
        PayIncreases GetIncreasesByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Increases by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of pay increases requested by the assigned provider.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of PayIncreases</returns>
        ApiResponse<PayIncreases> GetIncreasesByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Location by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the address and geo information for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Location</returns>
        Location GetLocationByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Location by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the address and geo information for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Location</returns>
        ApiResponse<Location> GetLocationByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Messages by Work Order
        /// </summary>
        /// <remarks>
        /// Gets a list of work order messages
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Messages</returns>
        Messages GetMessagesByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Messages by Work Order
        /// </summary>
        /// <remarks>
        /// Gets a list of work order messages
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Messages</returns>
        ApiResponse<Messages> GetMessagesByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get milestones by work order
        /// </summary>
        /// <remarks>
        /// Get the milestones of a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of Work Order</param>
        /// <returns>Milestones</returns>
        Milestones GetMilestonesByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get milestones by work order
        /// </summary>
        /// <remarks>
        /// Get the milestones of a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of Work Order</param>
        /// <returns>ApiResponse of Milestones</returns>
        ApiResponse<Milestones> GetMilestonesByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Overview by Work Order
        /// </summary>
        /// <remarks>
        /// Gets overview by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>WorkOrderOverview</returns>
        WorkOrderOverview GetOverviewByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Overview by Work Order
        /// </summary>
        /// <remarks>
        /// Gets overview by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of WorkOrderOverview</returns>
        ApiResponse<WorkOrderOverview> GetOverviewByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Overview Values by Work Order
        /// </summary>
        /// <remarks>
        /// Gets overview values by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="clientId">client (optional)</param>
        /// <param name="projectId">project (optional)</param>
        /// <param name="serviceContractId">service contract from client invoicing (optional)</param>
        /// <param name="teamId">team id (optional)</param>
        /// <returns>WorkOrderOverviewValues</returns>
        WorkOrderOverviewValues GetOverviewValuesByWorkOrder (int? workOrderId, int? clientId = null, int? projectId = null, int? serviceContractId = null, int? teamId = null);

        /// <summary>
        /// Get Overview Values by Work Order
        /// </summary>
        /// <remarks>
        /// Gets overview values by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="clientId">client (optional)</param>
        /// <param name="projectId">project (optional)</param>
        /// <param name="serviceContractId">service contract from client invoicing (optional)</param>
        /// <param name="teamId">team id (optional)</param>
        /// <returns>ApiResponse of WorkOrderOverviewValues</returns>
        ApiResponse<WorkOrderOverviewValues> GetOverviewValuesByWorkOrderWithHttpInfo (int? workOrderId, int? clientId = null, int? projectId = null, int? serviceContractId = null, int? teamId = null);
        /// <summary>
        /// Get Pay by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the pay for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Pay</returns>
        Pay GetPayByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Pay by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the pay for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Pay</returns>
        ApiResponse<Pay> GetPayByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Penalties by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of penalties and their applied status for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <returns>PayModifiers</returns>
        PayModifiers GetPenaltiesByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Penalties by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of penalties and their applied status for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <returns>ApiResponse of PayModifiers</returns>
        ApiResponse<PayModifiers> GetPenaltiesByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Penalty by Work Order and Penalty
        /// </summary>
        /// <remarks>
        /// Gets a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <returns>PayModifier</returns>
        PayModifier GetPenaltyByWorkOrderAndPenalty (int? workOrderId, int? penaltyId);

        /// <summary>
        /// Get Penalty by Work Order and Penalty
        /// </summary>
        /// <remarks>
        /// Gets a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <returns>ApiResponse of PayModifier</returns>
        ApiResponse<PayModifier> GetPenaltyByWorkOrderAndPenaltyWithHttpInfo (int? workOrderId, int? penaltyId);
        /// <summary>
        /// Get Problem by Work order and Problem
        /// </summary>
        /// <remarks>
        /// Gets information about a problem on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of problem</param>
        /// <returns>Problems</returns>
        Problems GetProblemByWorkOrderAndProblem (int? workOrderId, int? problemId);

        /// <summary>
        /// Get Problem by Work order and Problem
        /// </summary>
        /// <remarks>
        /// Gets information about a problem on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of problem</param>
        /// <returns>ApiResponse of Problems</returns>
        ApiResponse<Problems> GetProblemByWorkOrderAndProblemWithHttpInfo (int? workOrderId, int? problemId);
        /// <summary>
        /// Get Problems by Work Order
        /// </summary>
        /// <remarks>
        /// Gets problems reported on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Problems</returns>
        Problems GetProblemsByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Problems by Work Order
        /// </summary>
        /// <remarks>
        /// Gets problems reported on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Problems</returns>
        ApiResponse<Problems> GetProblemsByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Provider by Work Order
        /// </summary>
        /// <remarks>
        /// Gets a single provider entry for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="userId">ID of provider</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> GetProviderByWorkOrder (int? workOrderId, int? userId);

        /// <summary>
        /// Get Provider by Work Order
        /// </summary>
        /// <remarks>
        /// Gets a single provider entry for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="userId">ID of provider</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> GetProviderByWorkOrderWithHttpInfo (int? workOrderId, int? userId);
        /// <summary>
        /// Get Providers by Work Order
        /// </summary>
        /// <remarks>
        /// Gets list of providers available for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="sticky">Sticky (optional)</param>
        /// <param name="defaultView">Default view (optional)</param>
        /// <param name="view">View (optional)</param>
        /// <returns>List&lt;Users&gt;</returns>
        List<Users> GetProvidersByWorkOrder (int? workOrderId, bool? sticky = null, string defaultView = null, string view = null);

        /// <summary>
        /// Get Providers by Work Order
        /// </summary>
        /// <remarks>
        /// Gets list of providers available for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="sticky">Sticky (optional)</param>
        /// <param name="defaultView">Default view (optional)</param>
        /// <param name="view">View (optional)</param>
        /// <returns>ApiResponse of List&lt;Users&gt;</returns>
        ApiResponse<List<Users>> GetProvidersByWorkOrderWithHttpInfo (int? workOrderId, bool? sticky = null, string defaultView = null, string view = null);
        /// <summary>
        /// Get Qualifications by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of qualifications applied to work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Qualifications</returns>
        Qualifications GetQualificationsByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Qualifications by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of qualifications applied to work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Qualifications</returns>
        ApiResponse<Qualifications> GetQualificationsByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Ratings by work order
        /// </summary>
        /// <remarks>
        /// Get ratings by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>WorkOrderRatings</returns>
        WorkOrderRatings GetRatingsByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Ratings by work order
        /// </summary>
        /// <remarks>
        /// Get ratings by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of WorkOrderRatings</returns>
        ApiResponse<WorkOrderRatings> GetRatingsByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Request/Counter offer by Work Order
        /// </summary>
        /// <remarks>
        /// Get request/ counter offer for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="requestId">ID of work order request/counter offer</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Request</returns>
        Request GetRequestByWorkOrderAndRequest (int? workOrderId, int? requestId, bool? async = null);

        /// <summary>
        /// Get Request/Counter offer by Work Order
        /// </summary>
        /// <remarks>
        /// Get request/ counter offer for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="requestId">ID of work order request/counter offer</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of Request</returns>
        ApiResponse<Request> GetRequestByWorkOrderAndRequestWithHttpInfo (int? workOrderId, int? requestId, bool? async = null);
        /// <summary>
        /// Get Requests/Counter offers by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of work order requests or counter offers requested by the assigned provider.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Requests</returns>
        Requests GetRequestsByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Requests/Counter offers by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of work order requests or counter offers requested by the assigned provider.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Requests</returns>
        ApiResponse<Requests> GetRequestsByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Schedule and Location
        /// </summary>
        /// <remarks>
        /// Get schedule and location for a list of work orders by work orders
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">array of work order ids</param>
        /// <returns>EtaMassAcceptWithLocation</returns>
        EtaMassAcceptWithLocation GetScheduleAndLocation (List<int?> workOrderId);

        /// <summary>
        /// Get Schedule and Location
        /// </summary>
        /// <remarks>
        /// Get schedule and location for a list of work orders by work orders
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">array of work order ids</param>
        /// <returns>ApiResponse of EtaMassAcceptWithLocation</returns>
        ApiResponse<EtaMassAcceptWithLocation> GetScheduleAndLocationWithHttpInfo (List<int?> workOrderId);
        /// <summary>
        /// Get Schedule by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the service schedule for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Schedule</returns>
        Schedule GetScheduleByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Schedule by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the service schedule for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Schedule</returns>
        ApiResponse<Schedule> GetScheduleByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Shipments by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of shipments on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Shipments</returns>
        Shipments GetShipmentsByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Shipments by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of shipments on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>ApiResponse of Shipments</returns>
        ApiResponse<Shipments> GetShipmentsByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Signature by Work Order and Signature
        /// </summary>
        /// <remarks>
        /// Gets a single signature uploaded by the assigned provider
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signatureId">ID of signature</param>
        /// <returns>Signature</returns>
        Signature GetSignatureByWorkOrderAndSignature (int? workOrderId, int? signatureId);

        /// <summary>
        /// Get Signature by Work Order and Signature
        /// </summary>
        /// <remarks>
        /// Gets a single signature uploaded by the assigned provider
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signatureId">ID of signature</param>
        /// <returns>ApiResponse of Signature</returns>
        ApiResponse<Signature> GetSignatureByWorkOrderAndSignatureWithHttpInfo (int? workOrderId, int? signatureId);
        /// <summary>
        /// Get Signatures by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of signatures uploaded by the assigned provider
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Signatures</returns>
        Signatures GetSignaturesByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Signatures by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of signatures uploaded by the assigned provider
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Signatures</returns>
        ApiResponse<Signatures> GetSignaturesByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Status by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the current real-time status for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Status</returns>
        Status GetStatusByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Status by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the current real-time status for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Status</returns>
        ApiResponse<Status> GetStatusByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Swap by Work order and Problem
        /// </summary>
        /// <remarks>
        /// Gets a swap request by id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapId">ID of swap</param>
        /// <returns>Swap</returns>
        Swap GetSwapByWorkOrderAndSwap (int? workOrderId, int? swapId);

        /// <summary>
        /// Get Swap by Work order and Problem
        /// </summary>
        /// <remarks>
        /// Gets a swap request by id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapId">ID of swap</param>
        /// <returns>ApiResponse of Swap</returns>
        ApiResponse<Swap> GetSwapByWorkOrderAndSwapWithHttpInfo (int? workOrderId, int? swapId);
        /// <summary>
        /// Get Swaps by Work Order
        /// </summary>
        /// <remarks>
        /// Gets swap requests for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Swaps</returns>
        Swaps GetSwapsByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Swaps by Work Order
        /// </summary>
        /// <remarks>
        /// Gets swap requests for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Swaps</returns>
        ApiResponse<Swaps> GetSwapsByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Tag by Work order and Problem
        /// </summary>
        /// <remarks>
        /// Gets a tag on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of tag</param>
        /// <returns>Tag</returns>
        Tag GetTagByWorkOrderAndTag (int? workOrderId, int? tagId);

        /// <summary>
        /// Get Tag by Work order and Problem
        /// </summary>
        /// <remarks>
        /// Gets a tag on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of tag</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> GetTagByWorkOrderAndTagWithHttpInfo (int? workOrderId, int? tagId);
        /// <summary>
        /// Get Tags by Work Order
        /// </summary>
        /// <remarks>
        /// Gets tags/labels reported on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Tags</returns>
        Tags GetTagsByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Tags by Work Order
        /// </summary>
        /// <remarks>
        /// Gets tags/labels reported on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Tags</returns>
        ApiResponse<Tags> GetTagsByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Task by Work Order
        /// </summary>
        /// <remarks>
        /// Get a task by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <returns>Task</returns>
        Task GetTaskByWorkOrder (int? workOrderId, int? taskId);

        /// <summary>
        /// Get Task by Work Order
        /// </summary>
        /// <remarks>
        /// Get a task by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> GetTaskByWorkOrderWithHttpInfo (int? workOrderId, int? taskId);
        /// <summary>
        /// Get Tasks by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of a work order&#39;s tasks
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Tasks</returns>
        Tasks GetTasksByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Tasks by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of a work order&#39;s tasks
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>ApiResponse of Tasks</returns>
        ApiResponse<Tasks> GetTasksByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Time Logs by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of time logs applied by the assigned provider
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>TimeLogs</returns>
        TimeLogs GetTimeLogsByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Time Logs by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of time logs applied by the assigned provider
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of TimeLogs</returns>
        ApiResponse<TimeLogs> GetTimeLogsByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Work Order by Work Order
        /// </summary>
        /// <remarks>
        /// Gets a work order by its id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>WorkOrder</returns>
        WorkOrder GetWorkOrderByWorkOrder (int? workOrderId);

        /// <summary>
        /// Get Work Order by Work Order
        /// </summary>
        /// <remarks>
        /// Gets a work order by its id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> GetWorkOrderByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Work Order Lists
        /// </summary>
        /// <remarks>
        /// Pre-filters results by a certain category or type, settings by list are persisted with &#39;sticky&#39; by user.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SavedList&gt;</returns>
        List<SavedList> GetWorkOrderLists ();

        /// <summary>
        /// Get Work Order Lists
        /// </summary>
        /// <remarks>
        /// Pre-filters results by a certain category or type, settings by list are persisted with &#39;sticky&#39; by user.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SavedList&gt;</returns>
        ApiResponse<List<SavedList>> GetWorkOrderListsWithHttpInfo ();
        /// <summary>
        /// Get Work Orders
        /// </summary>
        /// <remarks>
        /// Returns a list of work orders.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Saved group which sandboxes filters, sorts and column preferences in addition to pre-applied settings (e.g.: tabs or saved searches) (optional)</param>
        /// <param name="columns">Specify the columns and their order to return data for (optional)</param>
        /// <param name="page">Specify the page number (optional)</param>
        /// <param name="perPage">Specify the results per page (optional)</param>
        /// <param name="view">Caters the response data to how you&#39;re going to display it. For most uses, you&#39;ll want &#39;list&#39;; other options might include map, schedule, tiles, etc. (optional)</param>
        /// <param name="sticky">Persists filters, columns, and sorts (all but pagination) to re-apply on future requests where omitted. Persists to the &#39;list&#39; specified for the authenticated user (optional, default to false)</param>
        /// <param name="sort">Sorts results by a specified column id (optional)</param>
        /// <param name="order">Whether the sort should be ascending or descending (optional)</param>
        /// <param name="f_">Clears all filters (optional)</param>
        /// <param name="fMaxApprovalTime">(Provider) Filters work to where company has specified their maximum approval day target is less than or equal to provided number of days (optional)</param>
        /// <param name="fRating">(Provider) Filters work by buyer&#39;s star rating (Buyer) Filters work by assigned provider&#39;s star rating - - value can be a single number (e.g.: 3.5) where that value must be met or exceededor a specific inclusive range (e.g.: 3.5,5.0) (optional)</param>
        /// <param name="fFlightboardTomorrow">(Provider) Used by the confirm tomorrow work screen (optional)</param>
        /// <param name="fRequests">(Buyer) Filters work with requests (e.g.: true) or with no requests (e.g.: false) (optional)</param>
        /// <param name="fCounterOffers">(Buyer) Filters work with counter-offer requests of any type (schedule, expense or pay change) when true (e.g.: true) or with no counter offers (e.g.: false) (optional)</param>
        /// <param name="fWorkOrderId">(Buyer/Provider) Filters work by specific work order ids (optional)</param>
        /// <param name="fHourly">(Buyer/Provider) Filters work by that of a minimum hourly rate (includes only hourly or blended pay struture) - - may be given a single value which must be met or exceeded (e.g.: 50) or an inclusive range (e.g.: 35,75) (optional)</param>
        /// <param name="fFixed">(Buyer/Provider) Filters work by that of a minimum fixed rate (includes only fixed or blended pay structure) - - may by given a single value which must be met or exceeded (e.g.: 250) or an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fDevice">(Buyer/Provider) Filters work by that of a minimum per-device rate (includes only device pay structure) - - may by given a single value which must be met or exceeded (e.g.: 250) or an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fPay">(Buyer/Provider) Filters work by that whose minimum or maximum payout meets or exceeds a single value (e.g.: 250) or whose minimum or maximum payout falls between an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fTemplates">(Buyer) Filters work orders created using a given template, provided either by name or it&#39;s unique id. May be given as a single value or as a list of comma-separated values. If the template name itself has a comma, you should use its unique identifier instead (optional)</param>
        /// <param name="fTypeOfWork">(Buyer/Provider) Filters work by that of a given type (e.g.: Networking). May be given a single or comma separated list of values of the full descriptions (Networking) or their unique identifiers (40) - - if the descriptions include commas you should use their unique identifiers (optional)</param>
        /// <param name="fTimeZone">(Buyer/Provider) Filters work by that of a given time zone (e.g.: America/New_York), list of time zones (e.g.: America/New_York,America/Chicago), its offset (e.g.: -5) or a range of offsets (e.g.: -4,-6) (optional)</param>
        /// <param name="fMode">(Buyer/Provider) Filters work by that of a given mode which must be one of the following values: &#39;managed&#39;, &#39;marketplace&#39;, or &#39;any&#39; (optional)</param>
        /// <param name="fCompany">(Buyer/Provider) Filters work by buyer, can be given text which would free-form search all buyers by name (e.g.: &#39;acme&#39;), or a company&#39;s unique identifier (e.g.: &#39;50&#39;). You can also include a list of unique identifiers (e.g.: 50,51,52) to search for multiple buyers (optional)</param>
        /// <param name="fWorkedWith">(Provider) Filters work orders to include only those by company&#39;s I or my vendor/service company has previously worked with (optional)</param>
        /// <param name="fManager">(Buyer) Filters work to that assigned to a given company user, either by name (case insensitive), email or their unique id or a list of comma separated values of any of these (optional)</param>
        /// <param name="fClient">(Buyer) Filters work to that assigned to a given client company, either by name (case insensitive), or their unique id or a list of comma separated values of either of these (optional)</param>
        /// <param name="fProject">(Buyer) Filters work to that assigned to a given project, either by name (case insensitive), or their unique id or a list of comma separated values of either of these (optional)</param>
        /// <param name="fApprovalWindow">(Provider) Filters work to include only companies who set their target approval days equal or less than provided value (e.g.: 2) or within a given range (e.g.: 1,3) (optional)</param>
        /// <param name="fReviewWindow">(Buyer) Filters work to include only work orders that exceed the days given, or the company&#39;s target approval days when given no value (optional)</param>
        /// <param name="fNetwork">(Buyer) Filters work by one or more of your company&#39;s networks. You must have the Field Nation Complete feature to enable new networks. Networks may be provided as a comma separated list of their names (e.g.: Field Nation) or unique ids (optional)</param>
        /// <param name="fAutoAssign">(Buyer) Filters work to that which was auto-assigned/dispatched (when true) or to that which was not (when false) (optional)</param>
        /// <param name="fSchedule">(Buyer/Provider) Filters work by a given service date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fCreated">(Buyer) Filters work created on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fPublished">(Buyer/Provider) Filters work published on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fRouted">(Buyer/Provider) Filters work routed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fPublishedRouted">(Buyer/Provider) Filters work published or routed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fCompleted">(Buyer/Provider) Filters work marked complete on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fApprovedCancelled">(Buyer/Provider) Filters work approved or cancelled on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fConfirmed">(Buyer/Provider) Filters work confirmed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fAssigned">(Buyer/Provider) Filters work assigned on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fSavedLocation">(Buyer) Filters work to that assigned to a saved location by name (e.g.: Acme store #1) or its unique identifier. Can also be given a list of comma separated values of either type. If the name includes a comma, you should use a list of the unique identifiers (optional)</param>
        /// <param name="fSavedLocationGroup">(Buyer) Filters work to that assigned to a saved location group by name (e.g.: Acme stores) or its unique identifier. Can also be given a list of comma separated values of either type. If the name includes a comma, you should use a list of the unique identifiers (optional)</param>
        /// <param name="fCity">(Buyer/Provider) Filters work to include only that of a given city name (case insensitive) or a list of cities when given a comma separated list of values (optional)</param>
        /// <param name="fState">(Buyer/Provider) Filters work to include only that of a given state (case insensitive) or a list of states when given a comma separated list of values (optional)</param>
        /// <param name="fPostalCode">(Buyer/Provider) Filters work to include only that of a given postal code (case insensitive) or a list of postal codes when given a comma separated list of values (optional)</param>
        /// <param name="fCountry">(Buyer/Provider) Filters work to include only that of a given country (case insensitive) or a list of countries when given a comma separated list of values (optional)</param>
        /// <param name="fFlags">(Buyer) Filters work to include that with a given label by name (e.g.: Late) or unique id or a list of either. If empty, includes only work with no flags. (optional)</param>
        /// <param name="fAssignment">(Buyer/Provider) Filters work to assigned providers of the given assignment type, must be one of: &#39;vendor&#39;, &#39;service_company&#39;, &#39;provider&#39;, &#39;any&#39; or a single unique id of a provider or list of ids (CSV) (optional)</param>
        /// <param name="fConfirmation">(Buyer/Provider) Filters to include work which may be given one or some (comma separated) of the following values: &#39;unconfirmed&#39;, &#39;confirmed&#39;, &#39;readytogo&#39;, &#39;onmyway&#39;, &#39;checked-in&#39;, &#39;checked-out&#39;, &#39;in-progress&#39; (optional)</param>
        /// <param name="fFinancing">(Buyer) Filters work to that of a specific financing account or list of financing accounts, either specified by their name or their unique identifier (optional)</param>
        /// <param name="fLocationRadius">(Provider) Filters work orders to a geofence, it may be given two array values the first being a search &#39;string&#39; and the second as integer radius in miles.  You can also optionally leave the first search string value blank to default to the Provider&#39;s home address or set a lattitude and longitude with the pattern &#39;&lt;lat&gt;,&lt;lng&gt;&#39;.  If a radius (in miles) is not include the default value of 60 will be set. (optional)</param>
        /// <param name="fRemoteWork">(Provider) Filters out all work orders with an onsite location when set to &#39;true&#39;. (optional)</param>
        /// <param name="fSearch">Keyword search, case insensitive, searches title, description, location, type of work, buyer, assigned provider and other criteria free-form (optional)</param>
        /// <returns>WorkOrders</returns>
        WorkOrders GetWorkOrders (string list = null, string columns = null, int? page = null, int? perPage = null, string view = null, bool? sticky = null, string sort = null, string order = null, string f_ = null, int? fMaxApprovalTime = null, string fRating = null, bool? fFlightboardTomorrow = null, bool? fRequests = null, bool? fCounterOffers = null, string fWorkOrderId = null, string fHourly = null, string fFixed = null, string fDevice = null, string fPay = null, string fTemplates = null, string fTypeOfWork = null, string fTimeZone = null, string fMode = null, string fCompany = null, string fWorkedWith = null, string fManager = null, string fClient = null, string fProject = null, string fApprovalWindow = null, string fReviewWindow = null, string fNetwork = null, string fAutoAssign = null, string fSchedule = null, string fCreated = null, string fPublished = null, string fRouted = null, string fPublishedRouted = null, string fCompleted = null, string fApprovedCancelled = null, string fConfirmed = null, string fAssigned = null, string fSavedLocation = null, string fSavedLocationGroup = null, string fCity = null, string fState = null, string fPostalCode = null, string fCountry = null, string fFlags = null, string fAssignment = null, string fConfirmation = null, string fFinancing = null, List<string> fLocationRadius = null, bool? fRemoteWork = null, string fSearch = null);

        /// <summary>
        /// Get Work Orders
        /// </summary>
        /// <remarks>
        /// Returns a list of work orders.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Saved group which sandboxes filters, sorts and column preferences in addition to pre-applied settings (e.g.: tabs or saved searches) (optional)</param>
        /// <param name="columns">Specify the columns and their order to return data for (optional)</param>
        /// <param name="page">Specify the page number (optional)</param>
        /// <param name="perPage">Specify the results per page (optional)</param>
        /// <param name="view">Caters the response data to how you&#39;re going to display it. For most uses, you&#39;ll want &#39;list&#39;; other options might include map, schedule, tiles, etc. (optional)</param>
        /// <param name="sticky">Persists filters, columns, and sorts (all but pagination) to re-apply on future requests where omitted. Persists to the &#39;list&#39; specified for the authenticated user (optional, default to false)</param>
        /// <param name="sort">Sorts results by a specified column id (optional)</param>
        /// <param name="order">Whether the sort should be ascending or descending (optional)</param>
        /// <param name="f_">Clears all filters (optional)</param>
        /// <param name="fMaxApprovalTime">(Provider) Filters work to where company has specified their maximum approval day target is less than or equal to provided number of days (optional)</param>
        /// <param name="fRating">(Provider) Filters work by buyer&#39;s star rating (Buyer) Filters work by assigned provider&#39;s star rating - - value can be a single number (e.g.: 3.5) where that value must be met or exceededor a specific inclusive range (e.g.: 3.5,5.0) (optional)</param>
        /// <param name="fFlightboardTomorrow">(Provider) Used by the confirm tomorrow work screen (optional)</param>
        /// <param name="fRequests">(Buyer) Filters work with requests (e.g.: true) or with no requests (e.g.: false) (optional)</param>
        /// <param name="fCounterOffers">(Buyer) Filters work with counter-offer requests of any type (schedule, expense or pay change) when true (e.g.: true) or with no counter offers (e.g.: false) (optional)</param>
        /// <param name="fWorkOrderId">(Buyer/Provider) Filters work by specific work order ids (optional)</param>
        /// <param name="fHourly">(Buyer/Provider) Filters work by that of a minimum hourly rate (includes only hourly or blended pay struture) - - may be given a single value which must be met or exceeded (e.g.: 50) or an inclusive range (e.g.: 35,75) (optional)</param>
        /// <param name="fFixed">(Buyer/Provider) Filters work by that of a minimum fixed rate (includes only fixed or blended pay structure) - - may by given a single value which must be met or exceeded (e.g.: 250) or an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fDevice">(Buyer/Provider) Filters work by that of a minimum per-device rate (includes only device pay structure) - - may by given a single value which must be met or exceeded (e.g.: 250) or an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fPay">(Buyer/Provider) Filters work by that whose minimum or maximum payout meets or exceeds a single value (e.g.: 250) or whose minimum or maximum payout falls between an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fTemplates">(Buyer) Filters work orders created using a given template, provided either by name or it&#39;s unique id. May be given as a single value or as a list of comma-separated values. If the template name itself has a comma, you should use its unique identifier instead (optional)</param>
        /// <param name="fTypeOfWork">(Buyer/Provider) Filters work by that of a given type (e.g.: Networking). May be given a single or comma separated list of values of the full descriptions (Networking) or their unique identifiers (40) - - if the descriptions include commas you should use their unique identifiers (optional)</param>
        /// <param name="fTimeZone">(Buyer/Provider) Filters work by that of a given time zone (e.g.: America/New_York), list of time zones (e.g.: America/New_York,America/Chicago), its offset (e.g.: -5) or a range of offsets (e.g.: -4,-6) (optional)</param>
        /// <param name="fMode">(Buyer/Provider) Filters work by that of a given mode which must be one of the following values: &#39;managed&#39;, &#39;marketplace&#39;, or &#39;any&#39; (optional)</param>
        /// <param name="fCompany">(Buyer/Provider) Filters work by buyer, can be given text which would free-form search all buyers by name (e.g.: &#39;acme&#39;), or a company&#39;s unique identifier (e.g.: &#39;50&#39;). You can also include a list of unique identifiers (e.g.: 50,51,52) to search for multiple buyers (optional)</param>
        /// <param name="fWorkedWith">(Provider) Filters work orders to include only those by company&#39;s I or my vendor/service company has previously worked with (optional)</param>
        /// <param name="fManager">(Buyer) Filters work to that assigned to a given company user, either by name (case insensitive), email or their unique id or a list of comma separated values of any of these (optional)</param>
        /// <param name="fClient">(Buyer) Filters work to that assigned to a given client company, either by name (case insensitive), or their unique id or a list of comma separated values of either of these (optional)</param>
        /// <param name="fProject">(Buyer) Filters work to that assigned to a given project, either by name (case insensitive), or their unique id or a list of comma separated values of either of these (optional)</param>
        /// <param name="fApprovalWindow">(Provider) Filters work to include only companies who set their target approval days equal or less than provided value (e.g.: 2) or within a given range (e.g.: 1,3) (optional)</param>
        /// <param name="fReviewWindow">(Buyer) Filters work to include only work orders that exceed the days given, or the company&#39;s target approval days when given no value (optional)</param>
        /// <param name="fNetwork">(Buyer) Filters work by one or more of your company&#39;s networks. You must have the Field Nation Complete feature to enable new networks. Networks may be provided as a comma separated list of their names (e.g.: Field Nation) or unique ids (optional)</param>
        /// <param name="fAutoAssign">(Buyer) Filters work to that which was auto-assigned/dispatched (when true) or to that which was not (when false) (optional)</param>
        /// <param name="fSchedule">(Buyer/Provider) Filters work by a given service date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fCreated">(Buyer) Filters work created on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fPublished">(Buyer/Provider) Filters work published on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fRouted">(Buyer/Provider) Filters work routed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fPublishedRouted">(Buyer/Provider) Filters work published or routed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fCompleted">(Buyer/Provider) Filters work marked complete on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fApprovedCancelled">(Buyer/Provider) Filters work approved or cancelled on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fConfirmed">(Buyer/Provider) Filters work confirmed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fAssigned">(Buyer/Provider) Filters work assigned on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fSavedLocation">(Buyer) Filters work to that assigned to a saved location by name (e.g.: Acme store #1) or its unique identifier. Can also be given a list of comma separated values of either type. If the name includes a comma, you should use a list of the unique identifiers (optional)</param>
        /// <param name="fSavedLocationGroup">(Buyer) Filters work to that assigned to a saved location group by name (e.g.: Acme stores) or its unique identifier. Can also be given a list of comma separated values of either type. If the name includes a comma, you should use a list of the unique identifiers (optional)</param>
        /// <param name="fCity">(Buyer/Provider) Filters work to include only that of a given city name (case insensitive) or a list of cities when given a comma separated list of values (optional)</param>
        /// <param name="fState">(Buyer/Provider) Filters work to include only that of a given state (case insensitive) or a list of states when given a comma separated list of values (optional)</param>
        /// <param name="fPostalCode">(Buyer/Provider) Filters work to include only that of a given postal code (case insensitive) or a list of postal codes when given a comma separated list of values (optional)</param>
        /// <param name="fCountry">(Buyer/Provider) Filters work to include only that of a given country (case insensitive) or a list of countries when given a comma separated list of values (optional)</param>
        /// <param name="fFlags">(Buyer) Filters work to include that with a given label by name (e.g.: Late) or unique id or a list of either. If empty, includes only work with no flags. (optional)</param>
        /// <param name="fAssignment">(Buyer/Provider) Filters work to assigned providers of the given assignment type, must be one of: &#39;vendor&#39;, &#39;service_company&#39;, &#39;provider&#39;, &#39;any&#39; or a single unique id of a provider or list of ids (CSV) (optional)</param>
        /// <param name="fConfirmation">(Buyer/Provider) Filters to include work which may be given one or some (comma separated) of the following values: &#39;unconfirmed&#39;, &#39;confirmed&#39;, &#39;readytogo&#39;, &#39;onmyway&#39;, &#39;checked-in&#39;, &#39;checked-out&#39;, &#39;in-progress&#39; (optional)</param>
        /// <param name="fFinancing">(Buyer) Filters work to that of a specific financing account or list of financing accounts, either specified by their name or their unique identifier (optional)</param>
        /// <param name="fLocationRadius">(Provider) Filters work orders to a geofence, it may be given two array values the first being a search &#39;string&#39; and the second as integer radius in miles.  You can also optionally leave the first search string value blank to default to the Provider&#39;s home address or set a lattitude and longitude with the pattern &#39;&lt;lat&gt;,&lt;lng&gt;&#39;.  If a radius (in miles) is not include the default value of 60 will be set. (optional)</param>
        /// <param name="fRemoteWork">(Provider) Filters out all work orders with an onsite location when set to &#39;true&#39;. (optional)</param>
        /// <param name="fSearch">Keyword search, case insensitive, searches title, description, location, type of work, buyer, assigned provider and other criteria free-form (optional)</param>
        /// <returns>ApiResponse of WorkOrders</returns>
        ApiResponse<WorkOrders> GetWorkOrdersWithHttpInfo (string list = null, string columns = null, int? page = null, int? perPage = null, string view = null, bool? sticky = null, string sort = null, string order = null, string f_ = null, int? fMaxApprovalTime = null, string fRating = null, bool? fFlightboardTomorrow = null, bool? fRequests = null, bool? fCounterOffers = null, string fWorkOrderId = null, string fHourly = null, string fFixed = null, string fDevice = null, string fPay = null, string fTemplates = null, string fTypeOfWork = null, string fTimeZone = null, string fMode = null, string fCompany = null, string fWorkedWith = null, string fManager = null, string fClient = null, string fProject = null, string fApprovalWindow = null, string fReviewWindow = null, string fNetwork = null, string fAutoAssign = null, string fSchedule = null, string fCreated = null, string fPublished = null, string fRouted = null, string fPublishedRouted = null, string fCompleted = null, string fApprovedCancelled = null, string fConfirmed = null, string fAssigned = null, string fSavedLocation = null, string fSavedLocationGroup = null, string fCity = null, string fState = null, string fPostalCode = null, string fCountry = null, string fFlags = null, string fAssignment = null, string fConfirmation = null, string fFinancing = null, List<string> fLocationRadius = null, bool? fRemoteWork = null, string fSearch = null);
        /// <summary>
        /// Group Task by Work Order and Task
        /// </summary>
        /// <remarks>
        /// Regroups a task associated with a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="group">New group</param>
        /// <param name="destination">beginning or end (position in new group)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder GroupTaskByWorkOrderAndTask (int? workOrderId, int? taskId, string group, string destination);

        /// <summary>
        /// Group Task by Work Order and Task
        /// </summary>
        /// <remarks>
        /// Regroups a task associated with a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="group">New group</param>
        /// <param name="destination">beginning or end (position in new group)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> GroupTaskByWorkOrderAndTaskWithHttpInfo (int? workOrderId, int? taskId, string group, string destination);
        /// <summary>
        /// Incomplete Work Order By Work Order
        /// </summary>
        /// <remarks>
        /// Marks a work order incomplete and moves it to work done status
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="reason">Reason (optional)</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder IncompleteWorkOrderByWorkOrder (int? workOrderId, string reason = null, bool? async = null);

        /// <summary>
        /// Incomplete Work Order By Work Order
        /// </summary>
        /// <remarks>
        /// Marks a work order incomplete and moves it to work done status
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="reason">Reason (optional)</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> IncompleteWorkOrderByWorkOrderWithHttpInfo (int? workOrderId, string reason = null, bool? async = null);
        /// <summary>
        /// Mass Accept Work Order by Work Order
        /// </summary>
        /// <remarks>
        /// Mass Accept with ETA
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eta">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns></returns>
        void MassAcceptWorkOrderByWorkOrder (EtaMassAccept eta, bool? async = null);

        /// <summary>
        /// Mass Accept Work Order by Work Order
        /// </summary>
        /// <remarks>
        /// Mass Accept with ETA
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eta">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MassAcceptWorkOrderByWorkOrderWithHttpInfo (EtaMassAccept eta, bool? async = null);
        /// <summary>
        /// Mass Requests
        /// </summary>
        /// <remarks>
        /// Work order mass requests
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requests">JSON Payload</param>
        /// <returns></returns>
        void MassRequests (Requests requests);

        /// <summary>
        /// Mass Requests
        /// </summary>
        /// <remarks>
        /// Work order mass requests
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requests">JSON Payload</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MassRequestsWithHttpInfo (Requests requests);
        /// <summary>
        /// Publish by Work Order
        /// </summary>
        /// <remarks>
        /// Publishes a work order to the marketplace where it can garner requests. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder PublishByWorkOrder (int? workOrderId, bool? async = null, Publish body = null);

        /// <summary>
        /// Publish by Work Order
        /// </summary>
        /// <remarks>
        /// Publishes a work order to the marketplace where it can garner requests. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> PublishByWorkOrderWithHttpInfo (int? workOrderId, bool? async = null, Publish body = null);
        /// <summary>
        /// Remove provider by work order
        /// </summary>
        /// <remarks>
        /// Unassigns and removes a provider for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns></returns>
        void RemoveProviderByWorkOrder (int? workOrderId);

        /// <summary>
        /// Remove provider by work order
        /// </summary>
        /// <remarks>
        /// Unassigns and removes a provider for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveProviderByWorkOrderWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Remove Qualification by Work Order
        /// </summary>
        /// <remarks>
        /// Remove qualification work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualificationId">ID of qualification</param>
        /// <returns>WorkOrder</returns>
        WorkOrder RemoveQualificationByWorkOrder (int? workOrderId, int? qualificationId);

        /// <summary>
        /// Remove Qualification by Work Order
        /// </summary>
        /// <remarks>
        /// Remove qualification work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualificationId">ID of qualification</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> RemoveQualificationByWorkOrderWithHttpInfo (int? workOrderId, int? qualificationId);
        /// <summary>
        /// Reply Message by Work Order
        /// </summary>
        /// <remarks>
        /// Reply a message on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <param name="json">JSON payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Messages</returns>
        Messages ReplyMessageByWorkOrder (int? workOrderId, int? messageId, Message json, bool? async = null);

        /// <summary>
        /// Reply Message by Work Order
        /// </summary>
        /// <remarks>
        /// Reply a message on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <param name="json">JSON payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of Messages</returns>
        ApiResponse<Messages> ReplyMessageByWorkOrderWithHttpInfo (int? workOrderId, int? messageId, Message json, bool? async = null);
        /// <summary>
        /// Request by Work Order
        /// </summary>
        /// <remarks>
        /// Request or un-hide a request for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="request">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder RequestByWorkOrder (int? workOrderId, Request request, bool? async = null);

        /// <summary>
        /// Request by Work Order
        /// </summary>
        /// <remarks>
        /// Request or un-hide a request for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="request">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> RequestByWorkOrderWithHttpInfo (int? workOrderId, Request request, bool? async = null);
        /// <summary>
        /// Revert Work Order To Draft by Work Order
        /// </summary>
        /// <remarks>
        /// Reverts a work order to draft status 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder RevertWorkOrderToDraftByWorkOrder (int? workOrderId, bool? async = null);

        /// <summary>
        /// Revert Work Order To Draft by Work Order
        /// </summary>
        /// <remarks>
        /// Reverts a work order to draft status 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> RevertWorkOrderToDraftByWorkOrderWithHttpInfo (int? workOrderId, bool? async = null);
        /// <summary>
        /// Route User by Work Order
        /// </summary>
        /// <remarks>
        /// Route a user to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="route">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>User</returns>
        User RouteUserByWorkOrder (int? workOrderId, Route route, bool? async = null);

        /// <summary>
        /// Route User by Work Order
        /// </summary>
        /// <remarks>
        /// Route a user to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="route">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> RouteUserByWorkOrderWithHttpInfo (int? workOrderId, Route route, bool? async = null);
        /// <summary>
        /// Unroute User by Work Order
        /// </summary>
        /// <remarks>
        /// Unroute a user from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="route">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>User</returns>
        User UnRouteUserByWorkOrder (int? workOrderId, Route route, bool? async = null);

        /// <summary>
        /// Unroute User by Work Order
        /// </summary>
        /// <remarks>
        /// Unroute a user from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="route">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UnRouteUserByWorkOrderWithHttpInfo (int? workOrderId, Route route, bool? async = null);
        /// <summary>
        /// Unapprove Work Order By Work Order
        /// </summary>
        /// <remarks>
        /// Unapproves a completed work order and moves it to work done status
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UnapproveWorkOrderByWorkOrder (int? workOrderId, bool? async = null);

        /// <summary>
        /// Unapprove Work Order By Work Order
        /// </summary>
        /// <remarks>
        /// Unapproves a completed work order and moves it to work done status
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UnapproveWorkOrderByWorkOrderWithHttpInfo (int? workOrderId, bool? async = null);
        /// <summary>
        /// Unassign User by Work Order and User
        /// </summary>
        /// <remarks>
        /// Unassign user from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="assignee">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>User</returns>
        User UnassignUserByWorkOrderAndUser (int? workOrderId, Assignee assignee, bool? async = null);

        /// <summary>
        /// Unassign User by Work Order and User
        /// </summary>
        /// <remarks>
        /// Unassign user from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="assignee">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UnassignUserByWorkOrderAndUserWithHttpInfo (int? workOrderId, Assignee assignee, bool? async = null);
        /// <summary>
        /// Unpublish by Work Order
        /// </summary>
        /// <remarks>
        /// Unpublishes a work order from the marketplace so that no requests or counter-offers can be made. Moves to draft unless it was also routed. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UnpublishByWorkOrder (int? workOrderId, bool? async = null);

        /// <summary>
        /// Unpublish by Work Order
        /// </summary>
        /// <remarks>
        /// Unpublishes a work order from the marketplace so that no requests or counter-offers can be made. Moves to draft unless it was also routed. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UnpublishByWorkOrderWithHttpInfo (int? workOrderId, bool? async = null);
        /// <summary>
        /// Update All Time Logs by Work Order
        /// </summary>
        /// <remarks>
        /// Update all time logs for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="timeLog">Check in information</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateAllTimeLogsByWorkOrder (int? workOrderId, TimeLog timeLog, bool? async = null);

        /// <summary>
        /// Update All Time Logs by Work Order
        /// </summary>
        /// <remarks>
        /// Update all time logs for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="timeLog">Check in information</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateAllTimeLogsByWorkOrderWithHttpInfo (int? workOrderId, TimeLog timeLog, bool? async = null);
        /// <summary>
        /// Update Attachment by Work Order and Folder and Attachment
        /// </summary>
        /// <remarks>
        /// Updates an attachment folder and its contents
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <param name="attachment">Attachment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateAttachmentByWorkOrderAndFolderAndAttachment (int? workOrderId, int? folderId, int? attachmentId, Attachment attachment, bool? async = null);

        /// <summary>
        /// Update Attachment by Work Order and Folder and Attachment
        /// </summary>
        /// <remarks>
        /// Updates an attachment folder and its contents
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <param name="attachment">Attachment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateAttachmentByWorkOrderAndFolderAndAttachmentWithHttpInfo (int? workOrderId, int? folderId, int? attachmentId, Attachment attachment, bool? async = null);
        /// <summary>
        /// Update Attribute by Location and Attribute
        /// </summary>
        /// <remarks>
        /// Updates an attribute to a stored location
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <param name="attribute">JSON Model</param>
        /// <returns>StoredLocation</returns>
        StoredLocation UpdateAttributeByLocationAndAttribute (int? locationId, int? attributeName, LocationAttribute attribute);

        /// <summary>
        /// Update Attribute by Location and Attribute
        /// </summary>
        /// <remarks>
        /// Updates an attribute to a stored location
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <param name="attribute">JSON Model</param>
        /// <returns>ApiResponse of StoredLocation</returns>
        ApiResponse<StoredLocation> UpdateAttributeByLocationAndAttributeWithHttpInfo (int? locationId, int? attributeName, LocationAttribute attribute);
        /// <summary>
        /// Update Bonus by Work Order and Bonus
        /// </summary>
        /// <remarks>
        /// Updates a bonus on a work order which can conditionally increase the amount paid to the provider upon conditions being met
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateBonusByWorkOrderAndBonus (int? workOrderId, int? bonusId, PayModifier bonus);

        /// <summary>
        /// Update Bonus by Work Order and Bonus
        /// </summary>
        /// <remarks>
        /// Updates a bonus on a work order which can conditionally increase the amount paid to the provider upon conditions being met
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateBonusByWorkOrderAndBonusWithHttpInfo (int? workOrderId, int? bonusId, PayModifier bonus);
        /// <summary>
        /// Update Contact by Work Order and Contact
        /// </summary>
        /// <remarks>
        /// Update contact of a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contactId">Contact id</param>
        /// <param name="contact">JSON Model</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateContactByWorkOrderAndContact (int? workOrderId, int? contactId, Contact contact);

        /// <summary>
        /// Update Contact by Work Order and Contact
        /// </summary>
        /// <remarks>
        /// Update contact of a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contactId">Contact id</param>
        /// <param name="contact">JSON Model</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateContactByWorkOrderAndContactWithHttpInfo (int? workOrderId, int? contactId, Contact contact);
        /// <summary>
        /// Update Custom Field by Work Order and Custom Field
        /// </summary>
        /// <remarks>
        /// Update a custom field value on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="customFieldId">Custom field ID</param>
        /// <param name="customField">Custom field</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateCustomFieldByWorkOrderAndCustomField (int? workOrderId, int? customFieldId, CustomField customField, bool? async = null);

        /// <summary>
        /// Update Custom Field by Work Order and Custom Field
        /// </summary>
        /// <remarks>
        /// Update a custom field value on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="customFieldId">Custom field ID</param>
        /// <param name="customField">Custom field</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateCustomFieldByWorkOrderAndCustomFieldWithHttpInfo (int? workOrderId, int? customFieldId, CustomField customField, bool? async = null);
        /// <summary>
        /// Update Discount by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the amount or description of a discount applied to the work order. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="discountId">ID of the discount</param>
        /// <param name="json">Payload of the discount</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateDiscountByWorkOrder (int? workOrderId, int? discountId, PayModifier json);

        /// <summary>
        /// Update Discount by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the amount or description of a discount applied to the work order. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="discountId">ID of the discount</param>
        /// <param name="json">Payload of the discount</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateDiscountByWorkOrderWithHttpInfo (int? workOrderId, int? discountId, PayModifier json);
        /// <summary>
        /// Update ETA by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the eta of a work order (depending on your role)
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="eta">JSON Payload</param>
        /// <param name="confirm">Confirm (optional)</param>
        /// <param name="updateFromIvr">update from IVR (optional)</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateETAByWorkOrder (int? workOrderId, ETA eta, bool? confirm = null, bool? updateFromIvr = null, bool? async = null);

        /// <summary>
        /// Update ETA by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the eta of a work order (depending on your role)
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="eta">JSON Payload</param>
        /// <param name="confirm">Confirm (optional)</param>
        /// <param name="updateFromIvr">update from IVR (optional)</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateETAByWorkOrderWithHttpInfo (int? workOrderId, ETA eta, bool? confirm = null, bool? updateFromIvr = null, bool? async = null);
        /// <summary>
        /// Update Expense by Work order and Expense
        /// </summary>
        /// <remarks>
        /// Update an Expense of a Work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expenseId">ID of expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <param name="expense">Expense (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateExpenseByWorkOrderAndExpense (int? workOrderId, int? expenseId, bool? async = null, Expense expense = null);

        /// <summary>
        /// Update Expense by Work order and Expense
        /// </summary>
        /// <remarks>
        /// Update an Expense of a Work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expenseId">ID of expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <param name="expense">Expense (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateExpenseByWorkOrderAndExpenseWithHttpInfo (int? workOrderId, int? expenseId, bool? async = null, Expense expense = null);
        /// <summary>
        /// Update Expenses by Work Order
        /// </summary>
        /// <remarks>
        /// Updates all the expneses in a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="expenses">JSON Model</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateExpensesByWorkOrder (int? workOrderId, Expenses expenses);

        /// <summary>
        /// Update Expenses by Work Order
        /// </summary>
        /// <remarks>
        /// Updates all the expneses in a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="expenses">JSON Model</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateExpensesByWorkOrderWithHttpInfo (int? workOrderId, Expenses expenses);
        /// <summary>
        /// Update Folder by Work Order and Folder
        /// </summary>
        /// <remarks>
        /// Updates an attachment folder
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="folder">Folder</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateFolderByWorkOrderAndFolder (int? workOrderId, int? folderId, AttachmentFolder folder, bool? async = null);

        /// <summary>
        /// Update Folder by Work Order and Folder
        /// </summary>
        /// <remarks>
        /// Updates an attachment folder
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="folder">Folder</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateFolderByWorkOrderAndFolderWithHttpInfo (int? workOrderId, int? folderId, AttachmentFolder folder, bool? async = null);
        /// <summary>
        /// Update Hold by Work Order and Hold
        /// </summary>
        /// <remarks>
        /// Updates a hold on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="hold">Hold object with updates</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateHoldByWorkOrderAndHold (int? workOrderId, int? holdId, Hold hold, bool? async = null);

        /// <summary>
        /// Update Hold by Work Order and Hold
        /// </summary>
        /// <remarks>
        /// Updates a hold on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="hold">Hold object with updates</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateHoldByWorkOrderAndHoldWithHttpInfo (int? workOrderId, int? holdId, Hold hold, bool? async = null);
        /// <summary>
        /// Update Increase by Work Order
        /// </summary>
        /// <remarks>
        /// Update pay increase for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="increase">Increase structure for update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateIncreaseByWorkOrderAndIncrease (int? workOrderId, int? increaseId, PayIncrease increase, bool? async = null);

        /// <summary>
        /// Update Increase by Work Order
        /// </summary>
        /// <remarks>
        /// Update pay increase for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="increase">Increase structure for update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateIncreaseByWorkOrderAndIncreaseWithHttpInfo (int? workOrderId, int? increaseId, PayIncrease increase, bool? async = null);
        /// <summary>
        /// Update Location by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the location of a work order (depending on your role)
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="location">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateLocationByWorkOrder (int? workOrderId, Location location, bool? async = null);

        /// <summary>
        /// Update Location by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the location of a work order (depending on your role)
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="location">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateLocationByWorkOrderWithHttpInfo (int? workOrderId, Location location, bool? async = null);
        /// <summary>
        /// Update Message by Work Order
        /// </summary>
        /// <remarks>
        /// Updates a message on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <param name="json">JSON payload</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateMessageByWorkOrder (int? workOrderId, int? messageId, Message json);

        /// <summary>
        /// Update Message by Work Order
        /// </summary>
        /// <remarks>
        /// Updates a message on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <param name="json">JSON payload</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateMessageByWorkOrderWithHttpInfo (int? workOrderId, int? messageId, Message json);
        /// <summary>
        /// Update Pay by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the pay of a work order, or requests an adjustment
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="pay">Pay</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdatePayByWorkOrder (int? workOrderId, Pay pay, bool? async = null);

        /// <summary>
        /// Update Pay by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the pay of a work order, or requests an adjustment
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="pay">Pay</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdatePayByWorkOrderWithHttpInfo (int? workOrderId, Pay pay, bool? async = null);
        /// <summary>
        /// Update Penalty by Work Order and Penalty
        /// </summary>
        /// <remarks>
        /// Updates a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <param name="penalty">Penalty (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdatePenaltyByWorkOrderAndPenalty (int? workOrderId, int? penaltyId, PayModifier penalty = null);

        /// <summary>
        /// Update Penalty by Work Order and Penalty
        /// </summary>
        /// <remarks>
        /// Updates a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <param name="penalty">Penalty (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdatePenaltyByWorkOrderAndPenaltyWithHttpInfo (int? workOrderId, int? penaltyId, PayModifier penalty = null);
        /// <summary>
        /// Update problem by work order
        /// </summary>
        /// <remarks>
        /// Updates a problem on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of work order</param>
        /// <param name="problem">Problem</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateProblemByWorkOrderAndProblem (int? workOrderId, int? problemId, Problem problem, bool? async = null);

        /// <summary>
        /// Update problem by work order
        /// </summary>
        /// <remarks>
        /// Updates a problem on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of work order</param>
        /// <param name="problem">Problem</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateProblemByWorkOrderAndProblemWithHttpInfo (int? workOrderId, int? problemId, Problem problem, bool? async = null);
        /// <summary>
        /// Update Qualification by Work Order
        /// </summary>
        /// <remarks>
        /// Update qualification for work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualifications">Qualification information</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateQualificationByWorkOrder (int? workOrderId, Qualifications qualifications);

        /// <summary>
        /// Update Qualification by Work Order
        /// </summary>
        /// <remarks>
        /// Update qualification for work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualifications">Qualification information</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateQualificationByWorkOrderWithHttpInfo (int? workOrderId, Qualifications qualifications);
        /// <summary>
        /// Update rating by Work Order
        /// </summary>
        /// <remarks>
        /// Updates ratings or blocks by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="ratings">rating_json</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateRatingsByWorkOrder (int? workOrderId, WorkOrderRatings ratings, bool? async = null);

        /// <summary>
        /// Update rating by Work Order
        /// </summary>
        /// <remarks>
        /// Updates ratings or blocks by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="ratings">rating_json</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateRatingsByWorkOrderWithHttpInfo (int? workOrderId, WorkOrderRatings ratings, bool? async = null);
        /// <summary>
        /// Update Schedule by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the service schedule or eta of a work order (depending on your role)
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="schedule">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateScheduleByWorkOrder (int? workOrderId, Schedule schedule, bool? async = null);

        /// <summary>
        /// Update Schedule by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the service schedule or eta of a work order (depending on your role)
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="schedule">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateScheduleByWorkOrderWithHttpInfo (int? workOrderId, Schedule schedule, bool? async = null);
        /// <summary>
        /// Update Shipment by Work Order and Shipment
        /// </summary>
        /// <remarks>
        /// Updates a shipment attached to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipmentId">Shipment id</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateShipmentByWorkOrderAndShipment (int? workOrderId, int? shipmentId, Shipment shipment, bool? async = null);

        /// <summary>
        /// Update Shipment by Work Order and Shipment
        /// </summary>
        /// <remarks>
        /// Updates a shipment attached to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipmentId">Shipment id</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateShipmentByWorkOrderAndShipmentWithHttpInfo (int? workOrderId, int? shipmentId, Shipment shipment, bool? async = null);
        /// <summary>
        /// Update Swap by Work order and Problem
        /// </summary>
        /// <remarks>
        /// Updates a swap request by id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapId">ID of swap</param>
        /// <param name="swap">Swap</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateSwapByWorkOrderAndSwap (int? workOrderId, int? swapId, Swap swap);

        /// <summary>
        /// Update Swap by Work order and Problem
        /// </summary>
        /// <remarks>
        /// Updates a swap request by id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapId">ID of swap</param>
        /// <param name="swap">Swap</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateSwapByWorkOrderAndSwapWithHttpInfo (int? workOrderId, int? swapId, Swap swap);
        /// <summary>
        /// Update tag by work order
        /// </summary>
        /// <remarks>
        /// Updates a tag on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of work order</param>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateTagByWorkOrderAndProblem (int? workOrderId, int? tagId, Tag tag, bool? async = null);

        /// <summary>
        /// Update tag by work order
        /// </summary>
        /// <remarks>
        /// Updates a tag on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of work order</param>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateTagByWorkOrderAndProblemWithHttpInfo (int? workOrderId, int? tagId, Tag tag, bool? async = null);
        /// <summary>
        /// Update Task by Work Order
        /// </summary>
        /// <remarks>
        /// Updates a work order&#39;s task
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="task">JSON Model</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateTaskByWorkOrder (int? workOrderId, int? taskId, Task task);

        /// <summary>
        /// Update Task by Work Order
        /// </summary>
        /// <remarks>
        /// Updates a work order&#39;s task
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="task">JSON Model</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateTaskByWorkOrderWithHttpInfo (int? workOrderId, int? taskId, Task task);
        /// <summary>
        /// Update Tasks by Work Order
        /// </summary>
        /// <remarks>
        /// Updates all the tasks in a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="tasks">JSON Model</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateTasksByWorkOrder (int? workOrderId, Tasks tasks);

        /// <summary>
        /// Update Tasks by Work Order
        /// </summary>
        /// <remarks>
        /// Updates all the tasks in a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="tasks">JSON Model</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateTasksByWorkOrderWithHttpInfo (int? workOrderId, Tasks tasks);
        /// <summary>
        /// Update Time Log by Work Order
        /// </summary>
        /// <remarks>
        /// Update time log for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="timeLog">Check in information</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateTimeLogByWorkOrder (int? workOrderId, int? workorderHoursId, TimeLog timeLog, bool? async = null);

        /// <summary>
        /// Update Time Log by Work Order
        /// </summary>
        /// <remarks>
        /// Update time log for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="timeLog">Check in information</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateTimeLogByWorkOrderWithHttpInfo (int? workOrderId, int? workorderHoursId, TimeLog timeLog, bool? async = null);
        /// <summary>
        /// Update Work Order by Work Order
        /// </summary>
        /// <remarks>
        /// Updates a work order by its id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workOrder">Work order model</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder UpdateWorkOrderByWorkOrder (int? workOrderId, WorkOrder workOrder, bool? async = null);

        /// <summary>
        /// Update Work Order by Work Order
        /// </summary>
        /// <remarks>
        /// Updates a work order by its id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workOrder">Work order model</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> UpdateWorkOrderByWorkOrderWithHttpInfo (int? workOrderId, WorkOrder workOrder, bool? async = null);
        /// <summary>
        /// Verify Time Log by Work Order
        /// </summary>
        /// <remarks>
        /// Verify time log for assigned work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>WorkOrder</returns>
        WorkOrder VerifyTimeLogByWorkOrder (int? workOrderId, int? workorderHoursId, bool? async = null);

        /// <summary>
        /// Verify Time Log by Work Order
        /// </summary>
        /// <remarks>
        /// Verify time log for assigned work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        ApiResponse<WorkOrder> VerifyTimeLogByWorkOrderWithHttpInfo (int? workOrderId, int? workorderHoursId, bool? async = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Accept Swap Request
        /// </summary>
        /// <remarks>
        /// Accept work order swap request.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>Task of SwapResponse</returns>
        System.Threading.Tasks.Task<SwapResponse> AcceptSwapRequestAsync (int? workOrderId, int? swapRequestId);

        /// <summary>
        /// Accept Swap Request
        /// </summary>
        /// <remarks>
        /// Accept work order swap request.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>Task of ApiResponse (SwapResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SwapResponse>> AcceptSwapRequestAsyncWithHttpInfo (int? workOrderId, int? swapRequestId);
        /// <summary>
        /// Acknowledge delay by work order
        /// </summary>
        /// <remarks>
        /// Acknowledges a provider&#39;s delay on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AcknowledgeDelayByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Acknowledge delay by work order
        /// </summary>
        /// <remarks>
        /// Acknowledges a provider&#39;s delay on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AcknowledgeDelayByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Add Alert to Work Order and Task
        /// </summary>
        /// <remarks>
        /// Sets up an alert to be fired upon the completion of a task associated with a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="json">JSON Model</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> AddAlertToWorkOrderAndTaskAsync (int? workOrderId, int? taskId, TaskAlert json);

        /// <summary>
        /// Add Alert to Work Order and Task
        /// </summary>
        /// <remarks>
        /// Sets up an alert to be fired upon the completion of a task associated with a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="json">JSON Model</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddAlertToWorkOrderAndTaskAsyncWithHttpInfo (int? workOrderId, int? taskId, TaskAlert json);
        /// <summary>
        /// Add Attachment by Work Order and Folder
        /// </summary>
        /// <remarks>
        /// Uploads a file by an attachment folder
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachment">Folder</param>
        /// <param name="file">File</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> AddAttachmentByWorkOrderAndFolderAsync (int? workOrderId, int? folderId, string attachment, System.IO.Stream file, bool? async = null);

        /// <summary>
        /// Add Attachment by Work Order and Folder
        /// </summary>
        /// <remarks>
        /// Uploads a file by an attachment folder
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachment">Folder</param>
        /// <param name="file">File</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddAttachmentByWorkOrderAndFolderAsyncWithHttpInfo (int? workOrderId, int? folderId, string attachment, System.IO.Stream file, bool? async = null);
        /// <summary>
        /// Add Attribute by Location and Attribute
        /// </summary>
        /// <remarks>
        /// Adds an attribute to a stored location
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <param name="attribute">JSON Model</param>
        /// <returns>Task of StoredLocation</returns>
        System.Threading.Tasks.Task<StoredLocation> AddAttributeByLocationAndAttributeAsync (int? locationId, int? attributeName, LocationAttribute attribute);

        /// <summary>
        /// Add Attribute by Location and Attribute
        /// </summary>
        /// <remarks>
        /// Adds an attribute to a stored location
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <param name="attribute">JSON Model</param>
        /// <returns>Task of ApiResponse (StoredLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<StoredLocation>> AddAttributeByLocationAndAttributeAsyncWithHttpInfo (int? locationId, int? attributeName, LocationAttribute attribute);
        /// <summary>
        /// Add Bonus by Work Order and Bonus
        /// </summary>
        /// <remarks>
        /// Adds a bonus on a work order which can conditionally increase the amount paid to the provider upon conditions being met
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> AddBonusByWorkOrderAndBonusAsync (int? workOrderId, int? bonusId, PayModifier bonus = null);

        /// <summary>
        /// Add Bonus by Work Order and Bonus
        /// </summary>
        /// <remarks>
        /// Adds a bonus on a work order which can conditionally increase the amount paid to the provider upon conditions being met
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddBonusByWorkOrderAndBonusAsyncWithHttpInfo (int? workOrderId, int? bonusId, PayModifier bonus = null);
        /// <summary>
        /// Add Contact by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a contact to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contact">JSON Model</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> AddContactByWorkOrderAsync (int? workOrderId, Contact contact);

        /// <summary>
        /// Add Contact by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a contact to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contact">JSON Model</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddContactByWorkOrderAsyncWithHttpInfo (int? workOrderId, Contact contact);
        /// <summary>
        /// Add Work Order Discount
        /// </summary>
        /// <remarks>
        /// Assigned provider route to adds and apply a discount to a work order which reduces the amount they will be paid. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="json">Payload of the discount</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> AddDiscountByWorkOrderAsync (int? workOrderId, PayModifier json);

        /// <summary>
        /// Add Work Order Discount
        /// </summary>
        /// <remarks>
        /// Assigned provider route to adds and apply a discount to a work order which reduces the amount they will be paid. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="json">Payload of the discount</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddDiscountByWorkOrderAsyncWithHttpInfo (int? workOrderId, PayModifier json);
        /// <summary>
        /// Add Expense By Work order
        /// </summary>
        /// <remarks>
        /// Adds an expense on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expense">Expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> AddExpenseByWorkOrderAsync (int? workOrderId, Expense expense, bool? async = null);

        /// <summary>
        /// Add Expense By Work order
        /// </summary>
        /// <remarks>
        /// Adds an expense on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expense">Expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddExpenseByWorkOrderAsyncWithHttpInfo (int? workOrderId, Expense expense, bool? async = null);
        /// <summary>
        /// Add Folder by Work Order
        /// </summary>
        /// <remarks>
        /// Adds an attachment folder
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folder">Folder</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> AddFolderByWorkOrderAsync (int? workOrderId, AttachmentFolder folder, bool? async = null);

        /// <summary>
        /// Add Folder by Work Order
        /// </summary>
        /// <remarks>
        /// Adds an attachment folder
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folder">Folder</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddFolderByWorkOrderAsyncWithHttpInfo (int? workOrderId, AttachmentFolder folder, bool? async = null);
        /// <summary>
        /// Add Hold by Work Order and Hold
        /// </summary>
        /// <remarks>
        /// Adds a hold on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="hold">Hold object with updates</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> AddHoldByWorkOrderAsync (int? workOrderId, Hold hold, bool? async = null);

        /// <summary>
        /// Add Hold by Work Order and Hold
        /// </summary>
        /// <remarks>
        /// Adds a hold on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="hold">Hold object with updates</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddHoldByWorkOrderAsyncWithHttpInfo (int? workOrderId, Hold hold, bool? async = null);
        /// <summary>
        /// Create Increase by Work Order
        /// </summary>
        /// <remarks>
        /// Create pay increase for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increase">Increase structure for update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> AddIncreaseByWorkOrderAsync (int? workOrderId, PayIncrease increase, bool? async = null);

        /// <summary>
        /// Create Increase by Work Order
        /// </summary>
        /// <remarks>
        /// Create pay increase for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increase">Increase structure for update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddIncreaseByWorkOrderAsyncWithHttpInfo (int? workOrderId, PayIncrease increase, bool? async = null);
        /// <summary>
        /// Add Message by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a message to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="json">JSON payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of Messages</returns>
        System.Threading.Tasks.Task<Messages> AddMessageByWorkOrderAsync (int? workOrderId, Message json, bool? async = null);

        /// <summary>
        /// Add Message by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a message to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="json">JSON payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (Messages)</returns>
        System.Threading.Tasks.Task<ApiResponse<Messages>> AddMessageByWorkOrderAsyncWithHttpInfo (int? workOrderId, Message json, bool? async = null);
        /// <summary>
        /// Add Penalty by Work Order and Penalty
        /// </summary>
        /// <remarks>
        /// Adds a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <param name="penalty">Penalty (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> AddPenaltyByWorkOrderAndPenaltyAsync (int? workOrderId, int? penaltyId, PayModifier penalty = null);

        /// <summary>
        /// Add Penalty by Work Order and Penalty
        /// </summary>
        /// <remarks>
        /// Adds a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <param name="penalty">Penalty (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddPenaltyByWorkOrderAndPenaltyAsyncWithHttpInfo (int? workOrderId, int? penaltyId, PayModifier penalty = null);
        /// <summary>
        /// Add Problem by Work Order
        /// </summary>
        /// <remarks>
        /// Reports a problem on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problem">Problem</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> AddProblemByWorkOrderAsync (int? workOrderId, Problem problem, bool? async = null);

        /// <summary>
        /// Add Problem by Work Order
        /// </summary>
        /// <remarks>
        /// Reports a problem on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problem">Problem</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddProblemByWorkOrderAsyncWithHttpInfo (int? workOrderId, Problem problem, bool? async = null);
        /// <summary>
        /// Add Qualification by Work Order
        /// </summary>
        /// <remarks>
        /// Add qualification for work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualifications">Qualification information</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> AddQualificationByWorkOrderAsync (int? workOrderId, Qualifications qualifications);

        /// <summary>
        /// Add Qualification by Work Order
        /// </summary>
        /// <remarks>
        /// Add qualification for work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualifications">Qualification information</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddQualificationByWorkOrderAsyncWithHttpInfo (int? workOrderId, Qualifications qualifications);
        /// <summary>
        /// Add Shipment by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a shipment to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> AddShipmentByWorkOrderAsync (int? workOrderId, Shipment shipment, bool? async = null);

        /// <summary>
        /// Add Shipment by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a shipment to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddShipmentByWorkOrderAsyncWithHttpInfo (int? workOrderId, Shipment shipment, bool? async = null);
        /// <summary>
        /// Add Signature by Work Order
        /// </summary>
        /// <remarks>
        /// Add signature by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signature">Signature JSON</param>
        /// <param name="async">async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> AddSignatureByWorkOrderAsync (int? workOrderId, Signature signature, bool? async = null);

        /// <summary>
        /// Add Signature by Work Order
        /// </summary>
        /// <remarks>
        /// Add signature by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signature">Signature JSON</param>
        /// <param name="async">async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddSignatureByWorkOrderAsyncWithHttpInfo (int? workOrderId, Signature signature, bool? async = null);
        /// <summary>
        /// Add Swap by Work Order
        /// </summary>
        /// <remarks>
        /// Requests a provider swap for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swap">Swap</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> AddSwapByWorkOrderAsync (int? workOrderId, Swap swap);

        /// <summary>
        /// Add Swap by Work Order
        /// </summary>
        /// <remarks>
        /// Requests a provider swap for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swap">Swap</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddSwapByWorkOrderAsyncWithHttpInfo (int? workOrderId, Swap swap);
        /// <summary>
        /// Add Tag
        /// </summary>
        /// <remarks>
        /// Adds a tag to a company for selection on a work order basis
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> AddTagAsync (Tag tag, bool? async = null);

        /// <summary>
        /// Add Tag
        /// </summary>
        /// <remarks>
        /// Adds a tag to a company for selection on a work order basis
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> AddTagAsyncWithHttpInfo (Tag tag, bool? async = null);
        /// <summary>
        /// Add Tag by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a tag to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <param name="noModelUpdate">Supress the model update return (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> AddTagByWorkOrderAsync (int? workOrderId, Tag tag, bool? async = null, bool? noModelUpdate = null);

        /// <summary>
        /// Add Tag by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a tag to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <param name="noModelUpdate">Supress the model update return (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddTagByWorkOrderAsyncWithHttpInfo (int? workOrderId, Tag tag, bool? async = null, bool? noModelUpdate = null);
        /// <summary>
        /// Add Task by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a task to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="task">JSON Model</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> AddTaskByWorkOrderAsync (int? workOrderId, Task task);

        /// <summary>
        /// Add Task by Work Order
        /// </summary>
        /// <remarks>
        /// Adds a task to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="task">JSON Model</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddTaskByWorkOrderAsyncWithHttpInfo (int? workOrderId, Task task);
        /// <summary>
        /// Add Time Log by Work Order
        /// </summary>
        /// <remarks>
        /// Add time log for work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="timeLog">Check in information</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> AddTimeLogByWorkOrderAsync (int? workOrderId, TimeLog timeLog);

        /// <summary>
        /// Add Time Log by Work Order
        /// </summary>
        /// <remarks>
        /// Add time log for work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="timeLog">Check in information</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddTimeLogByWorkOrderAsyncWithHttpInfo (int? workOrderId, TimeLog timeLog);
        /// <summary>
        /// Add Work Order
        /// </summary>
        /// <remarks>
        /// Create a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrder">Work order</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> AddWorkOrderAsync (WorkOrder workOrder);

        /// <summary>
        /// Add Work Order
        /// </summary>
        /// <remarks>
        /// Create a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrder">Work order</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddWorkOrderAsyncWithHttpInfo (WorkOrder workOrder);
        /// <summary>
        /// Approve Work Order By Work Order
        /// </summary>
        /// <remarks>
        /// Approves a completed work order and moves it to paid status
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> ApproveWorkOrderByWorkOrderAsync (int? workOrderId, bool? async = null);

        /// <summary>
        /// Approve Work Order By Work Order
        /// </summary>
        /// <remarks>
        /// Approves a completed work order and moves it to paid status
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> ApproveWorkOrderByWorkOrderAsyncWithHttpInfo (int? workOrderId, bool? async = null);
        /// <summary>
        /// Assign User by Work Order
        /// </summary>
        /// <remarks>
        /// Assign a user to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="assignee">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssignUserByWorkOrderAsync (int? workOrderId, Assignee assignee, bool? async = null);

        /// <summary>
        /// Assign User by Work Order
        /// </summary>
        /// <remarks>
        /// Assign a user to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="assignee">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssignUserByWorkOrderAsyncWithHttpInfo (int? workOrderId, Assignee assignee, bool? async = null);
        /// <summary>
        /// Auto Dispatch Work Orders
        /// </summary>
        /// <remarks>
        /// Auto-dispatches one or more draft work orders
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoDispatch"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AutoDispatchWorkOrdersAsync (AutoDispatch autoDispatch);

        /// <summary>
        /// Auto Dispatch Work Orders
        /// </summary>
        /// <remarks>
        /// Auto-dispatches one or more draft work orders
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoDispatch"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AutoDispatchWorkOrdersAsyncWithHttpInfo (AutoDispatch autoDispatch);
        /// <summary>
        /// Cancel Swap Request
        /// </summary>
        /// <remarks>
        /// Cancel work order swap request.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>Task of SwapResponse</returns>
        System.Threading.Tasks.Task<SwapResponse> CancelSwapRequestAsync (int? workOrderId, int? swapRequestId);

        /// <summary>
        /// Cancel Swap Request
        /// </summary>
        /// <remarks>
        /// Cancel work order swap request.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>Task of ApiResponse (SwapResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SwapResponse>> CancelSwapRequestAsyncWithHttpInfo (int? workOrderId, int? swapRequestId);
        /// <summary>
        /// Complete Work Order By Work Order
        /// </summary>
        /// <remarks>
        /// Marks a work order complete and moves it to work done status
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> CompleteWorkOrderByWorkOrderAsync (int? workOrderId, bool? async = null);

        /// <summary>
        /// Complete Work Order By Work Order
        /// </summary>
        /// <remarks>
        /// Marks a work order complete and moves it to work done status
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> CompleteWorkOrderByWorkOrderAsyncWithHttpInfo (int? workOrderId, bool? async = null);
        /// <summary>
        /// Decline by Work Order
        /// </summary>
        /// <remarks>
        /// Decline a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> DeclineByWorkOrderAsync (int? workOrderId, bool? async = null);

        /// <summary>
        /// Decline by Work Order
        /// </summary>
        /// <remarks>
        /// Decline a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeclineByWorkOrderAsyncWithHttpInfo (int? workOrderId, bool? async = null);
        /// <summary>
        /// Decline Request by Work Order and userId
        /// </summary>
        /// <remarks>
        /// Removes or hides a request by a user from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="userId">User id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> DeclineRequestByWorkOrderAsync (int? workOrderId, int? userId, bool? async = null);

        /// <summary>
        /// Decline Request by Work Order and userId
        /// </summary>
        /// <remarks>
        /// Removes or hides a request by a user from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="userId">User id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeclineRequestByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? userId, bool? async = null);
        /// <summary>
        /// Decline Swap Request
        /// </summary>
        /// <remarks>
        /// Decline work order swap request.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>Task of SwapResponse</returns>
        System.Threading.Tasks.Task<SwapResponse> DeclineSwapRequestAsync (int? workOrderId, int? swapRequestId);

        /// <summary>
        /// Decline Swap Request
        /// </summary>
        /// <remarks>
        /// Decline work order swap request.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>Task of ApiResponse (SwapResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SwapResponse>> DeclineSwapRequestAsyncWithHttpInfo (int? workOrderId, int? swapRequestId);
        /// <summary>
        /// Delete Attachment by Work Order and Folder and Attachment
        /// </summary>
        /// <remarks>
        /// Deletes an attachment folder and its contents
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> DeleteAttachmentByWorkOrderAndFolderAndAttachmentAsync (int? workOrderId, int? folderId, int? attachmentId, bool? async = null);

        /// <summary>
        /// Delete Attachment by Work Order and Folder and Attachment
        /// </summary>
        /// <remarks>
        /// Deletes an attachment folder and its contents
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteAttachmentByWorkOrderAndFolderAndAttachmentAsyncWithHttpInfo (int? workOrderId, int? folderId, int? attachmentId, bool? async = null);
        /// <summary>
        /// Delete Attribute by Location and Attribute
        /// </summary>
        /// <remarks>
        /// Delete an attribute from a stored location
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <returns>Task of StoredLocation</returns>
        System.Threading.Tasks.Task<StoredLocation> DeleteAttributeByLocationAndAttributeAsync (int? locationId, int? attributeName);

        /// <summary>
        /// Delete Attribute by Location and Attribute
        /// </summary>
        /// <remarks>
        /// Delete an attribute from a stored location
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <returns>Task of ApiResponse (StoredLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<StoredLocation>> DeleteAttributeByLocationAndAttributeAsyncWithHttpInfo (int? locationId, int? attributeName);
        /// <summary>
        /// Delete Bonus by Work Order and Bonus
        /// </summary>
        /// <remarks>
        /// Deletes a bonus from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> DeleteBonusByWorkOrderAndBonusAsync (int? workOrderId, int? bonusId);

        /// <summary>
        /// Delete Bonus by Work Order and Bonus
        /// </summary>
        /// <remarks>
        /// Deletes a bonus from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteBonusByWorkOrderAndBonusAsyncWithHttpInfo (int? workOrderId, int? bonusId);
        /// <summary>
        /// Delete Contact by Work Order and Contact
        /// </summary>
        /// <remarks>
        /// Delete a work order contact
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contactId">Contact id</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> DeleteContactByWorkOrderAndContactAsync (int? workOrderId, int? contactId);

        /// <summary>
        /// Delete Contact by Work Order and Contact
        /// </summary>
        /// <remarks>
        /// Delete a work order contact
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contactId">Contact id</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteContactByWorkOrderAndContactAsyncWithHttpInfo (int? workOrderId, int? contactId);
        /// <summary>
        /// Delete Discount by WorK Order
        /// </summary>
        /// <remarks>
        /// Allows an assigned provider to removes a discount they previously applied from a work order, increasing the amount they will be paid. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="discountId">ID of the discount</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> DeleteDiscountByWorkOrderAsync (int? workOrderId, int? discountId);

        /// <summary>
        /// Delete Discount by WorK Order
        /// </summary>
        /// <remarks>
        /// Allows an assigned provider to removes a discount they previously applied from a work order, increasing the amount they will be paid. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="discountId">ID of the discount</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteDiscountByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? discountId);
        /// <summary>
        /// Delete Expense by Work Order and Expense
        /// </summary>
        /// <remarks>
        /// Delete an expense from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expenseId">ID of expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> DeleteExpenseByWorkOrderAndExpenseAsync (int? workOrderId, int? expenseId, bool? async = null);

        /// <summary>
        /// Delete Expense by Work Order and Expense
        /// </summary>
        /// <remarks>
        /// Delete an expense from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expenseId">ID of expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteExpenseByWorkOrderAndExpenseAsyncWithHttpInfo (int? workOrderId, int? expenseId, bool? async = null);
        /// <summary>
        /// Delete Folder by Work Order and Folder
        /// </summary>
        /// <remarks>
        /// Deletes an attachment folder
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> DeleteFolderByWorkOrderAndFolderAsync (int? workOrderId, int? folderId, bool? async = null);

        /// <summary>
        /// Delete Folder by Work Order and Folder
        /// </summary>
        /// <remarks>
        /// Deletes an attachment folder
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteFolderByWorkOrderAndFolderAsyncWithHttpInfo (int? workOrderId, int? folderId, bool? async = null);
        /// <summary>
        /// Delete Hold by Work Order and Hold
        /// </summary>
        /// <remarks>
        /// Deletes a hold on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="hold">Hold object</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> DeleteHoldByWorkOrderAndHoldAsync (int? workOrderId, int? holdId, Hold hold, bool? async = null);

        /// <summary>
        /// Delete Hold by Work Order and Hold
        /// </summary>
        /// <remarks>
        /// Deletes a hold on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="hold">Hold object</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteHoldByWorkOrderAndHoldAsyncWithHttpInfo (int? workOrderId, int? holdId, Hold hold, bool? async = null);
        /// <summary>
        /// Delete Increase by Work Order
        /// </summary>
        /// <remarks>
        /// Delete pay increase for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> DeleteIncreaseByWorkOrderAndIncreaseAsync (int? workOrderId, int? increaseId, bool? async = null);

        /// <summary>
        /// Delete Increase by Work Order
        /// </summary>
        /// <remarks>
        /// Delete pay increase for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteIncreaseByWorkOrderAndIncreaseAsyncWithHttpInfo (int? workOrderId, int? increaseId, bool? async = null);
        /// <summary>
        /// Delete Message by Work Order
        /// </summary>
        /// <remarks>
        /// Deletes a message on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> DeleteMessageByWorkOrderAsync (int? workOrderId, int? messageId);

        /// <summary>
        /// Delete Message by Work Order
        /// </summary>
        /// <remarks>
        /// Deletes a message on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteMessageByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? messageId);
        /// <summary>
        /// Delete Penalty by Work Order and Penalty
        /// </summary>
        /// <remarks>
        /// Removes a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of Work Order</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> DeletePenaltyByWorkOrderAndPenaltyAsync (int? workOrderId, int? penaltyId);

        /// <summary>
        /// Delete Penalty by Work Order and Penalty
        /// </summary>
        /// <remarks>
        /// Removes a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of Work Order</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeletePenaltyByWorkOrderAndPenaltyAsyncWithHttpInfo (int? workOrderId, int? penaltyId);
        /// <summary>
        /// Delete problem by work order
        /// </summary>
        /// <remarks>
        /// Deletes a problem on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> DeleteProblemByWorkOrderAsync (int? workOrderId, int? problemId, bool? async = null);

        /// <summary>
        /// Delete problem by work order
        /// </summary>
        /// <remarks>
        /// Deletes a problem on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteProblemByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? problemId, bool? async = null);
        /// <summary>
        /// Delete Request by Work Order
        /// </summary>
        /// <remarks>
        /// Removes or hides a request by a user from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="requestId">ID of work order request/counter offer</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRequestByWorkOrderAsync (int? workOrderId, int? requestId, bool? async = null);

        /// <summary>
        /// Delete Request by Work Order
        /// </summary>
        /// <remarks>
        /// Removes or hides a request by a user from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="requestId">ID of work order request/counter offer</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRequestByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? requestId, bool? async = null);
        /// <summary>
        /// Delete Shipment by Work Order and Shipment
        /// </summary>
        /// <remarks>
        /// Deletes a shipment from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipmentId">Shipment id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> DeleteShipmentByWorkOrderAndShipmentAsync (int? workOrderId, int? shipmentId, bool? async = null);

        /// <summary>
        /// Delete Shipment by Work Order and Shipment
        /// </summary>
        /// <remarks>
        /// Deletes a shipment from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipmentId">Shipment id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteShipmentByWorkOrderAndShipmentAsyncWithHttpInfo (int? workOrderId, int? shipmentId, bool? async = null);
        /// <summary>
        /// Delete Signature by Work Order and Signature
        /// </summary>
        /// <remarks>
        /// Delete signature by work order and signature
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signatureId">ID of signature</param>
        /// <param name="async">async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> DeleteSignatureByWorkOrderAndSignatureAsync (int? workOrderId, int? signatureId, bool? async = null);

        /// <summary>
        /// Delete Signature by Work Order and Signature
        /// </summary>
        /// <remarks>
        /// Delete signature by work order and signature
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signatureId">ID of signature</param>
        /// <param name="async">async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteSignatureByWorkOrderAndSignatureAsyncWithHttpInfo (int? workOrderId, int? signatureId, bool? async = null);
        /// <summary>
        /// Delete tag by work order
        /// </summary>
        /// <remarks>
        /// Deletes a tag on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> DeleteTagByWorkOrderAndTagAsync (int? workOrderId, int? tagId, bool? async = null);

        /// <summary>
        /// Delete tag by work order
        /// </summary>
        /// <remarks>
        /// Deletes a tag on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteTagByWorkOrderAndTagAsyncWithHttpInfo (int? workOrderId, int? tagId, bool? async = null);
        /// <summary>
        /// Delete Task by Work Order
        /// </summary>
        /// <remarks>
        /// Delete a work order&#39;s task
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> DeleteTaskByWorkOrderAsync (int? workOrderId, int? taskId);

        /// <summary>
        /// Delete Task by Work Order
        /// </summary>
        /// <remarks>
        /// Delete a work order&#39;s task
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteTaskByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? taskId);
        /// <summary>
        /// Delete Time Log by Work Order
        /// </summary>
        /// <remarks>
        /// Remove time log for assigned work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> DeleteTimeLogByWorkOrderAsync (int? workOrderId, int? workorderHoursId, bool? async = null);

        /// <summary>
        /// Delete Time Log by Work Order
        /// </summary>
        /// <remarks>
        /// Remove time log for assigned work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteTimeLogByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? workorderHoursId, bool? async = null);
        /// <summary>
        /// Delete Work Order by Work Order
        /// </summary>
        /// <remarks>
        /// Deletes a work order by its id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="cancellation">Cancellation reasons</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> DeleteWorkOrderByWorkOrderAsync (int? workOrderId, Cancellation cancellation, bool? async = null);

        /// <summary>
        /// Delete Work Order by Work Order
        /// </summary>
        /// <remarks>
        /// Deletes a work order by its id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="cancellation">Cancellation reasons</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteWorkOrderByWorkOrderAsyncWithHttpInfo (int? workOrderId, Cancellation cancellation, bool? async = null);
        /// <summary>
        /// Get Assignee by Work Order
        /// </summary>
        /// <remarks>
        /// Get assignee of a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of Assignee</returns>
        System.Threading.Tasks.Task<Assignee> GetAssigneeByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Assignee by Work Order
        /// </summary>
        /// <remarks>
        /// Get assignee of a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of ApiResponse (Assignee)</returns>
        System.Threading.Tasks.Task<ApiResponse<Assignee>> GetAssigneeByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Attachment Conflicts
        /// </summary>
        /// <remarks>
        /// Runs a report for a set of attachment ids, identifying any files corresponding to those ids that were used more than once. The response will include a report for each item with  a status reporting as unique or duplicate and the work order. Duplicate also reports a list of conflicting work order ids. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of AttachmentConflict</returns>
        System.Threading.Tasks.Task<AttachmentConflict> GetAttachmentConflictsAsync (List<int?> id = null);

        /// <summary>
        /// Get Attachment Conflicts
        /// </summary>
        /// <remarks>
        /// Runs a report for a set of attachment ids, identifying any files corresponding to those ids that were used more than once. The response will include a report for each item with  a status reporting as unique or duplicate and the work order. Duplicate also reports a list of conflicting work order ids. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentConflict)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentConflict>> GetAttachmentConflictsAsyncWithHttpInfo (List<int?> id = null);
        /// <summary>
        /// Get Attachments
        /// </summary>
        /// <remarks>
        /// Gets a zip file of deliverables from multiple work orders
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="isFromProject"> (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetAttachmentsAsync (List<string> workOrderId, int? type = null, bool? isFromProject = null);

        /// <summary>
        /// Get Attachments
        /// </summary>
        /// <remarks>
        /// Gets a zip file of deliverables from multiple work orders
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="isFromProject"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetAttachmentsAsyncWithHttpInfo (List<string> workOrderId, int? type = null, bool? isFromProject = null);
        /// <summary>
        /// Get Attachments by Work Order
        /// </summary>
        /// <remarks>
        /// Gets a list of attachment folders which contain files and deliverables for the work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of AttachmentFolders</returns>
        System.Threading.Tasks.Task<AttachmentFolders> GetAttachmentsByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Attachments by Work Order
        /// </summary>
        /// <remarks>
        /// Gets a list of attachment folders which contain files and deliverables for the work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of ApiResponse (AttachmentFolders)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentFolders>> GetAttachmentsByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Bonus by Work Order and Bonus
        /// </summary>
        /// <remarks>
        /// Gets a bonus for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus (optional)</param>
        /// <returns>Task of PayModifier</returns>
        System.Threading.Tasks.Task<PayModifier> GetBonusByWorkOrderAndBonusAsync (int? workOrderId, int? bonusId, PayModifier bonus = null);

        /// <summary>
        /// Get Bonus by Work Order and Bonus
        /// </summary>
        /// <remarks>
        /// Gets a bonus for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus (optional)</param>
        /// <returns>Task of ApiResponse (PayModifier)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayModifier>> GetBonusByWorkOrderAndBonusAsyncWithHttpInfo (int? workOrderId, int? bonusId, PayModifier bonus = null);
        /// <summary>
        /// Get Bonuses by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of available bonuses on a work order that can be applied to increase the amount paid to the provider upon conditions being met
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <returns>Task of PayModifiers</returns>
        System.Threading.Tasks.Task<PayModifiers> GetBonusesByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Bonuses by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of available bonuses on a work order that can be applied to increase the amount paid to the provider upon conditions being met
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <returns>Task of ApiResponse (PayModifiers)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayModifiers>> GetBonusesByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Contacts by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of contacts on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of Contacts</returns>
        System.Threading.Tasks.Task<Contacts> GetContactsByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Contacts by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of contacts on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contacts>> GetContactsByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Custom Field By Work Order And Custom Field
        /// </summary>
        /// <remarks>
        /// Get a custom field by work order and custom field
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="customFieldId">Custom field id</param>
        /// <returns>Task of CustomField</returns>
        System.Threading.Tasks.Task<CustomField> GetCustomFieldByWorkOrderAndCustomFieldAsync (int? workOrderId, int? customFieldId);

        /// <summary>
        /// Get Custom Field By Work Order And Custom Field
        /// </summary>
        /// <remarks>
        /// Get a custom field by work order and custom field
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="customFieldId">Custom field id</param>
        /// <returns>Task of ApiResponse (CustomField)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomField>> GetCustomFieldByWorkOrderAndCustomFieldAsyncWithHttpInfo (int? workOrderId, int? customFieldId);
        /// <summary>
        /// Get Custom Fields by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of custom fields and their values for a work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of CustomFields</returns>
        System.Threading.Tasks.Task<CustomFields> GetCustomFieldsByWorKOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Custom Fields by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of custom fields and their values for a work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (CustomFields)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFields>> GetCustomFieldsByWorKOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Work Order Discounts
        /// </summary>
        /// <remarks>
        /// Returns a list of discounts applied by the assigned provider to reduce the payout of the work order. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of PayModifiers</returns>
        System.Threading.Tasks.Task<PayModifiers> GetDiscountsByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Work Order Discounts
        /// </summary>
        /// <remarks>
        /// Returns a list of discounts applied by the assigned provider to reduce the payout of the work order. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (PayModifiers)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayModifiers>> GetDiscountsByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get ETA by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the eta for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ETA</returns>
        System.Threading.Tasks.Task<ETA> GetETAByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get ETA by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the eta for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (ETA)</returns>
        System.Threading.Tasks.Task<ApiResponse<ETA>> GetETAByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Expenses By Work Order
        /// </summary>
        /// <remarks>
        /// Get all expenses of a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Expenses</returns>
        System.Threading.Tasks.Task<Expenses> GetExpensesByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Expenses By Work Order
        /// </summary>
        /// <remarks>
        /// Get all expenses of a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Expenses)</returns>
        System.Threading.Tasks.Task<ApiResponse<Expenses>> GetExpensesByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get File by Work Order and Folder and File
        /// </summary>
        /// <remarks>
        /// Gets an attachment folder and its contents
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <returns>Task of Attachment</returns>
        System.Threading.Tasks.Task<Attachment> GetFileByWorkOrderAndFolderAndFileAsync (int? workOrderId, int? folderId, int? attachmentId);

        /// <summary>
        /// Get File by Work Order and Folder and File
        /// </summary>
        /// <remarks>
        /// Gets an attachment folder and its contents
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <returns>Task of ApiResponse (Attachment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachment>> GetFileByWorkOrderAndFolderAndFileAsyncWithHttpInfo (int? workOrderId, int? folderId, int? attachmentId);
        /// <summary>
        /// Get Folder by Work Order and Folder
        /// </summary>
        /// <remarks>
        /// Gets an attachment folder and its contents
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <returns>Task of AttachmentFolder</returns>
        System.Threading.Tasks.Task<AttachmentFolder> GetFolderByWorkOrderAndFolderAsync (int? workOrderId, int? folderId);

        /// <summary>
        /// Get Folder by Work Order and Folder
        /// </summary>
        /// <remarks>
        /// Gets an attachment folder and its contents
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <returns>Task of ApiResponse (AttachmentFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentFolder>> GetFolderByWorkOrderAndFolderAsyncWithHttpInfo (int? workOrderId, int? folderId);
        /// <summary>
        /// Get Hold by Work Order and Hold
        /// </summary>
        /// <remarks>
        /// Gets a hold on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of Hold</returns>
        System.Threading.Tasks.Task<Hold> GetHoldByWorkOrderAndHoldAsync (int? workOrderId, int? holdId, bool? async = null);

        /// <summary>
        /// Get Hold by Work Order and Hold
        /// </summary>
        /// <remarks>
        /// Gets a hold on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (Hold)</returns>
        System.Threading.Tasks.Task<ApiResponse<Hold>> GetHoldByWorkOrderAndHoldAsyncWithHttpInfo (int? workOrderId, int? holdId, bool? async = null);
        /// <summary>
        /// Get holds on work order
        /// </summary>
        /// <remarks>
        /// Get holds on work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Holds</returns>
        System.Threading.Tasks.Task<Holds> GetHoldsByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get holds on work order
        /// </summary>
        /// <remarks>
        /// Get holds on work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Holds)</returns>
        System.Threading.Tasks.Task<ApiResponse<Holds>> GetHoldsByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Increase by Work Order
        /// </summary>
        /// <remarks>
        /// Get pay increase for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of PayIncrease</returns>
        System.Threading.Tasks.Task<PayIncrease> GetIncreaseByWorkOrderAndIncreaseAsync (int? workOrderId, int? increaseId, bool? async = null);

        /// <summary>
        /// Get Increase by Work Order
        /// </summary>
        /// <remarks>
        /// Get pay increase for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (PayIncrease)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayIncrease>> GetIncreaseByWorkOrderAndIncreaseAsyncWithHttpInfo (int? workOrderId, int? increaseId, bool? async = null);
        /// <summary>
        /// Get Increases by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of pay increases requested by the assigned provider.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of PayIncreases</returns>
        System.Threading.Tasks.Task<PayIncreases> GetIncreasesByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Increases by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of pay increases requested by the assigned provider.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (PayIncreases)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayIncreases>> GetIncreasesByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Location by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the address and geo information for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Location</returns>
        System.Threading.Tasks.Task<Location> GetLocationByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Location by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the address and geo information for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        System.Threading.Tasks.Task<ApiResponse<Location>> GetLocationByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Messages by Work Order
        /// </summary>
        /// <remarks>
        /// Gets a list of work order messages
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Messages</returns>
        System.Threading.Tasks.Task<Messages> GetMessagesByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Messages by Work Order
        /// </summary>
        /// <remarks>
        /// Gets a list of work order messages
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Messages)</returns>
        System.Threading.Tasks.Task<ApiResponse<Messages>> GetMessagesByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get milestones by work order
        /// </summary>
        /// <remarks>
        /// Get the milestones of a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of Work Order</param>
        /// <returns>Task of Milestones</returns>
        System.Threading.Tasks.Task<Milestones> GetMilestonesByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get milestones by work order
        /// </summary>
        /// <remarks>
        /// Get the milestones of a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of Work Order</param>
        /// <returns>Task of ApiResponse (Milestones)</returns>
        System.Threading.Tasks.Task<ApiResponse<Milestones>> GetMilestonesByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Overview by Work Order
        /// </summary>
        /// <remarks>
        /// Gets overview by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of WorkOrderOverview</returns>
        System.Threading.Tasks.Task<WorkOrderOverview> GetOverviewByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Overview by Work Order
        /// </summary>
        /// <remarks>
        /// Gets overview by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (WorkOrderOverview)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrderOverview>> GetOverviewByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Overview Values by Work Order
        /// </summary>
        /// <remarks>
        /// Gets overview values by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="clientId">client (optional)</param>
        /// <param name="projectId">project (optional)</param>
        /// <param name="serviceContractId">service contract from client invoicing (optional)</param>
        /// <param name="teamId">team id (optional)</param>
        /// <returns>Task of WorkOrderOverviewValues</returns>
        System.Threading.Tasks.Task<WorkOrderOverviewValues> GetOverviewValuesByWorkOrderAsync (int? workOrderId, int? clientId = null, int? projectId = null, int? serviceContractId = null, int? teamId = null);

        /// <summary>
        /// Get Overview Values by Work Order
        /// </summary>
        /// <remarks>
        /// Gets overview values by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="clientId">client (optional)</param>
        /// <param name="projectId">project (optional)</param>
        /// <param name="serviceContractId">service contract from client invoicing (optional)</param>
        /// <param name="teamId">team id (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrderOverviewValues)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrderOverviewValues>> GetOverviewValuesByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? clientId = null, int? projectId = null, int? serviceContractId = null, int? teamId = null);
        /// <summary>
        /// Get Pay by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the pay for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Pay</returns>
        System.Threading.Tasks.Task<Pay> GetPayByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Pay by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the pay for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Pay)</returns>
        System.Threading.Tasks.Task<ApiResponse<Pay>> GetPayByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Penalties by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of penalties and their applied status for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <returns>Task of PayModifiers</returns>
        System.Threading.Tasks.Task<PayModifiers> GetPenaltiesByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Penalties by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of penalties and their applied status for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <returns>Task of ApiResponse (PayModifiers)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayModifiers>> GetPenaltiesByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Penalty by Work Order and Penalty
        /// </summary>
        /// <remarks>
        /// Gets a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <returns>Task of PayModifier</returns>
        System.Threading.Tasks.Task<PayModifier> GetPenaltyByWorkOrderAndPenaltyAsync (int? workOrderId, int? penaltyId);

        /// <summary>
        /// Get Penalty by Work Order and Penalty
        /// </summary>
        /// <remarks>
        /// Gets a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <returns>Task of ApiResponse (PayModifier)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayModifier>> GetPenaltyByWorkOrderAndPenaltyAsyncWithHttpInfo (int? workOrderId, int? penaltyId);
        /// <summary>
        /// Get Problem by Work order and Problem
        /// </summary>
        /// <remarks>
        /// Gets information about a problem on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of problem</param>
        /// <returns>Task of Problems</returns>
        System.Threading.Tasks.Task<Problems> GetProblemByWorkOrderAndProblemAsync (int? workOrderId, int? problemId);

        /// <summary>
        /// Get Problem by Work order and Problem
        /// </summary>
        /// <remarks>
        /// Gets information about a problem on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of problem</param>
        /// <returns>Task of ApiResponse (Problems)</returns>
        System.Threading.Tasks.Task<ApiResponse<Problems>> GetProblemByWorkOrderAndProblemAsyncWithHttpInfo (int? workOrderId, int? problemId);
        /// <summary>
        /// Get Problems by Work Order
        /// </summary>
        /// <remarks>
        /// Gets problems reported on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Problems</returns>
        System.Threading.Tasks.Task<Problems> GetProblemsByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Problems by Work Order
        /// </summary>
        /// <remarks>
        /// Gets problems reported on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Problems)</returns>
        System.Threading.Tasks.Task<ApiResponse<Problems>> GetProblemsByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Provider by Work Order
        /// </summary>
        /// <remarks>
        /// Gets a single provider entry for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="userId">ID of provider</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> GetProviderByWorkOrderAsync (int? workOrderId, int? userId);

        /// <summary>
        /// Get Provider by Work Order
        /// </summary>
        /// <remarks>
        /// Gets a single provider entry for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="userId">ID of provider</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> GetProviderByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? userId);
        /// <summary>
        /// Get Providers by Work Order
        /// </summary>
        /// <remarks>
        /// Gets list of providers available for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="sticky">Sticky (optional)</param>
        /// <param name="defaultView">Default view (optional)</param>
        /// <param name="view">View (optional)</param>
        /// <returns>Task of List&lt;Users&gt;</returns>
        System.Threading.Tasks.Task<List<Users>> GetProvidersByWorkOrderAsync (int? workOrderId, bool? sticky = null, string defaultView = null, string view = null);

        /// <summary>
        /// Get Providers by Work Order
        /// </summary>
        /// <remarks>
        /// Gets list of providers available for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="sticky">Sticky (optional)</param>
        /// <param name="defaultView">Default view (optional)</param>
        /// <param name="view">View (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Users&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Users>>> GetProvidersByWorkOrderAsyncWithHttpInfo (int? workOrderId, bool? sticky = null, string defaultView = null, string view = null);
        /// <summary>
        /// Get Qualifications by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of qualifications applied to work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Qualifications</returns>
        System.Threading.Tasks.Task<Qualifications> GetQualificationsByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Qualifications by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of qualifications applied to work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Qualifications)</returns>
        System.Threading.Tasks.Task<ApiResponse<Qualifications>> GetQualificationsByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Ratings by work order
        /// </summary>
        /// <remarks>
        /// Get ratings by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of WorkOrderRatings</returns>
        System.Threading.Tasks.Task<WorkOrderRatings> GetRatingsByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Ratings by work order
        /// </summary>
        /// <remarks>
        /// Get ratings by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (WorkOrderRatings)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrderRatings>> GetRatingsByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Request/Counter offer by Work Order
        /// </summary>
        /// <remarks>
        /// Get request/ counter offer for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="requestId">ID of work order request/counter offer</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of Request</returns>
        System.Threading.Tasks.Task<Request> GetRequestByWorkOrderAndRequestAsync (int? workOrderId, int? requestId, bool? async = null);

        /// <summary>
        /// Get Request/Counter offer by Work Order
        /// </summary>
        /// <remarks>
        /// Get request/ counter offer for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="requestId">ID of work order request/counter offer</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (Request)</returns>
        System.Threading.Tasks.Task<ApiResponse<Request>> GetRequestByWorkOrderAndRequestAsyncWithHttpInfo (int? workOrderId, int? requestId, bool? async = null);
        /// <summary>
        /// Get Requests/Counter offers by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of work order requests or counter offers requested by the assigned provider.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Requests</returns>
        System.Threading.Tasks.Task<Requests> GetRequestsByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Requests/Counter offers by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of work order requests or counter offers requested by the assigned provider.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Requests)</returns>
        System.Threading.Tasks.Task<ApiResponse<Requests>> GetRequestsByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Schedule and Location
        /// </summary>
        /// <remarks>
        /// Get schedule and location for a list of work orders by work orders
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">array of work order ids</param>
        /// <returns>Task of EtaMassAcceptWithLocation</returns>
        System.Threading.Tasks.Task<EtaMassAcceptWithLocation> GetScheduleAndLocationAsync (List<int?> workOrderId);

        /// <summary>
        /// Get Schedule and Location
        /// </summary>
        /// <remarks>
        /// Get schedule and location for a list of work orders by work orders
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">array of work order ids</param>
        /// <returns>Task of ApiResponse (EtaMassAcceptWithLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<EtaMassAcceptWithLocation>> GetScheduleAndLocationAsyncWithHttpInfo (List<int?> workOrderId);
        /// <summary>
        /// Get Schedule by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the service schedule for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Schedule</returns>
        System.Threading.Tasks.Task<Schedule> GetScheduleByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Schedule by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the service schedule for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Schedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<Schedule>> GetScheduleByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Shipments by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of shipments on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of Shipments</returns>
        System.Threading.Tasks.Task<Shipments> GetShipmentsByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Shipments by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of shipments on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of ApiResponse (Shipments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Shipments>> GetShipmentsByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Signature by Work Order and Signature
        /// </summary>
        /// <remarks>
        /// Gets a single signature uploaded by the assigned provider
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signatureId">ID of signature</param>
        /// <returns>Task of Signature</returns>
        System.Threading.Tasks.Task<Signature> GetSignatureByWorkOrderAndSignatureAsync (int? workOrderId, int? signatureId);

        /// <summary>
        /// Get Signature by Work Order and Signature
        /// </summary>
        /// <remarks>
        /// Gets a single signature uploaded by the assigned provider
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signatureId">ID of signature</param>
        /// <returns>Task of ApiResponse (Signature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Signature>> GetSignatureByWorkOrderAndSignatureAsyncWithHttpInfo (int? workOrderId, int? signatureId);
        /// <summary>
        /// Get Signatures by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of signatures uploaded by the assigned provider
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Signatures</returns>
        System.Threading.Tasks.Task<Signatures> GetSignaturesByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Signatures by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of signatures uploaded by the assigned provider
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Signatures)</returns>
        System.Threading.Tasks.Task<ApiResponse<Signatures>> GetSignaturesByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Status by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the current real-time status for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Status</returns>
        System.Threading.Tasks.Task<Status> GetStatusByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Status by Work Order
        /// </summary>
        /// <remarks>
        /// Gets the current real-time status for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<Status>> GetStatusByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Swap by Work order and Problem
        /// </summary>
        /// <remarks>
        /// Gets a swap request by id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapId">ID of swap</param>
        /// <returns>Task of Swap</returns>
        System.Threading.Tasks.Task<Swap> GetSwapByWorkOrderAndSwapAsync (int? workOrderId, int? swapId);

        /// <summary>
        /// Get Swap by Work order and Problem
        /// </summary>
        /// <remarks>
        /// Gets a swap request by id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapId">ID of swap</param>
        /// <returns>Task of ApiResponse (Swap)</returns>
        System.Threading.Tasks.Task<ApiResponse<Swap>> GetSwapByWorkOrderAndSwapAsyncWithHttpInfo (int? workOrderId, int? swapId);
        /// <summary>
        /// Get Swaps by Work Order
        /// </summary>
        /// <remarks>
        /// Gets swap requests for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Swaps</returns>
        System.Threading.Tasks.Task<Swaps> GetSwapsByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Swaps by Work Order
        /// </summary>
        /// <remarks>
        /// Gets swap requests for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Swaps)</returns>
        System.Threading.Tasks.Task<ApiResponse<Swaps>> GetSwapsByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Tag by Work order and Problem
        /// </summary>
        /// <remarks>
        /// Gets a tag on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of tag</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> GetTagByWorkOrderAndTagAsync (int? workOrderId, int? tagId);

        /// <summary>
        /// Get Tag by Work order and Problem
        /// </summary>
        /// <remarks>
        /// Gets a tag on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of tag</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> GetTagByWorkOrderAndTagAsyncWithHttpInfo (int? workOrderId, int? tagId);
        /// <summary>
        /// Get Tags by Work Order
        /// </summary>
        /// <remarks>
        /// Gets tags/labels reported on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Tags</returns>
        System.Threading.Tasks.Task<Tags> GetTagsByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Tags by Work Order
        /// </summary>
        /// <remarks>
        /// Gets tags/labels reported on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Tags)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tags>> GetTagsByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Task by Work Order
        /// </summary>
        /// <remarks>
        /// Get a task by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> GetTaskByWorkOrderAsync (int? workOrderId, int? taskId);

        /// <summary>
        /// Get Task by Work Order
        /// </summary>
        /// <remarks>
        /// Get a task by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> GetTaskByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? taskId);
        /// <summary>
        /// Get Tasks by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of a work order&#39;s tasks
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of Tasks</returns>
        System.Threading.Tasks.Task<Tasks> GetTasksByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Tasks by Work Order
        /// </summary>
        /// <remarks>
        /// Get a list of a work order&#39;s tasks
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of ApiResponse (Tasks)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tasks>> GetTasksByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Time Logs by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of time logs applied by the assigned provider
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of TimeLogs</returns>
        System.Threading.Tasks.Task<TimeLogs> GetTimeLogsByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Time Logs by Work Order
        /// </summary>
        /// <remarks>
        /// Returns a list of time logs applied by the assigned provider
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (TimeLogs)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeLogs>> GetTimeLogsByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Work Order by Work Order
        /// </summary>
        /// <remarks>
        /// Gets a work order by its id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> GetWorkOrderByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Get Work Order by Work Order
        /// </summary>
        /// <remarks>
        /// Gets a work order by its id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> GetWorkOrderByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Get Work Order Lists
        /// </summary>
        /// <remarks>
        /// Pre-filters results by a certain category or type, settings by list are persisted with &#39;sticky&#39; by user.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SavedList&gt;</returns>
        System.Threading.Tasks.Task<List<SavedList>> GetWorkOrderListsAsync ();

        /// <summary>
        /// Get Work Order Lists
        /// </summary>
        /// <remarks>
        /// Pre-filters results by a certain category or type, settings by list are persisted with &#39;sticky&#39; by user.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SavedList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SavedList>>> GetWorkOrderListsAsyncWithHttpInfo ();
        /// <summary>
        /// Get Work Orders
        /// </summary>
        /// <remarks>
        /// Returns a list of work orders.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Saved group which sandboxes filters, sorts and column preferences in addition to pre-applied settings (e.g.: tabs or saved searches) (optional)</param>
        /// <param name="columns">Specify the columns and their order to return data for (optional)</param>
        /// <param name="page">Specify the page number (optional)</param>
        /// <param name="perPage">Specify the results per page (optional)</param>
        /// <param name="view">Caters the response data to how you&#39;re going to display it. For most uses, you&#39;ll want &#39;list&#39;; other options might include map, schedule, tiles, etc. (optional)</param>
        /// <param name="sticky">Persists filters, columns, and sorts (all but pagination) to re-apply on future requests where omitted. Persists to the &#39;list&#39; specified for the authenticated user (optional, default to false)</param>
        /// <param name="sort">Sorts results by a specified column id (optional)</param>
        /// <param name="order">Whether the sort should be ascending or descending (optional)</param>
        /// <param name="f_">Clears all filters (optional)</param>
        /// <param name="fMaxApprovalTime">(Provider) Filters work to where company has specified their maximum approval day target is less than or equal to provided number of days (optional)</param>
        /// <param name="fRating">(Provider) Filters work by buyer&#39;s star rating (Buyer) Filters work by assigned provider&#39;s star rating - - value can be a single number (e.g.: 3.5) where that value must be met or exceededor a specific inclusive range (e.g.: 3.5,5.0) (optional)</param>
        /// <param name="fFlightboardTomorrow">(Provider) Used by the confirm tomorrow work screen (optional)</param>
        /// <param name="fRequests">(Buyer) Filters work with requests (e.g.: true) or with no requests (e.g.: false) (optional)</param>
        /// <param name="fCounterOffers">(Buyer) Filters work with counter-offer requests of any type (schedule, expense or pay change) when true (e.g.: true) or with no counter offers (e.g.: false) (optional)</param>
        /// <param name="fWorkOrderId">(Buyer/Provider) Filters work by specific work order ids (optional)</param>
        /// <param name="fHourly">(Buyer/Provider) Filters work by that of a minimum hourly rate (includes only hourly or blended pay struture) - - may be given a single value which must be met or exceeded (e.g.: 50) or an inclusive range (e.g.: 35,75) (optional)</param>
        /// <param name="fFixed">(Buyer/Provider) Filters work by that of a minimum fixed rate (includes only fixed or blended pay structure) - - may by given a single value which must be met or exceeded (e.g.: 250) or an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fDevice">(Buyer/Provider) Filters work by that of a minimum per-device rate (includes only device pay structure) - - may by given a single value which must be met or exceeded (e.g.: 250) or an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fPay">(Buyer/Provider) Filters work by that whose minimum or maximum payout meets or exceeds a single value (e.g.: 250) or whose minimum or maximum payout falls between an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fTemplates">(Buyer) Filters work orders created using a given template, provided either by name or it&#39;s unique id. May be given as a single value or as a list of comma-separated values. If the template name itself has a comma, you should use its unique identifier instead (optional)</param>
        /// <param name="fTypeOfWork">(Buyer/Provider) Filters work by that of a given type (e.g.: Networking). May be given a single or comma separated list of values of the full descriptions (Networking) or their unique identifiers (40) - - if the descriptions include commas you should use their unique identifiers (optional)</param>
        /// <param name="fTimeZone">(Buyer/Provider) Filters work by that of a given time zone (e.g.: America/New_York), list of time zones (e.g.: America/New_York,America/Chicago), its offset (e.g.: -5) or a range of offsets (e.g.: -4,-6) (optional)</param>
        /// <param name="fMode">(Buyer/Provider) Filters work by that of a given mode which must be one of the following values: &#39;managed&#39;, &#39;marketplace&#39;, or &#39;any&#39; (optional)</param>
        /// <param name="fCompany">(Buyer/Provider) Filters work by buyer, can be given text which would free-form search all buyers by name (e.g.: &#39;acme&#39;), or a company&#39;s unique identifier (e.g.: &#39;50&#39;). You can also include a list of unique identifiers (e.g.: 50,51,52) to search for multiple buyers (optional)</param>
        /// <param name="fWorkedWith">(Provider) Filters work orders to include only those by company&#39;s I or my vendor/service company has previously worked with (optional)</param>
        /// <param name="fManager">(Buyer) Filters work to that assigned to a given company user, either by name (case insensitive), email or their unique id or a list of comma separated values of any of these (optional)</param>
        /// <param name="fClient">(Buyer) Filters work to that assigned to a given client company, either by name (case insensitive), or their unique id or a list of comma separated values of either of these (optional)</param>
        /// <param name="fProject">(Buyer) Filters work to that assigned to a given project, either by name (case insensitive), or their unique id or a list of comma separated values of either of these (optional)</param>
        /// <param name="fApprovalWindow">(Provider) Filters work to include only companies who set their target approval days equal or less than provided value (e.g.: 2) or within a given range (e.g.: 1,3) (optional)</param>
        /// <param name="fReviewWindow">(Buyer) Filters work to include only work orders that exceed the days given, or the company&#39;s target approval days when given no value (optional)</param>
        /// <param name="fNetwork">(Buyer) Filters work by one or more of your company&#39;s networks. You must have the Field Nation Complete feature to enable new networks. Networks may be provided as a comma separated list of their names (e.g.: Field Nation) or unique ids (optional)</param>
        /// <param name="fAutoAssign">(Buyer) Filters work to that which was auto-assigned/dispatched (when true) or to that which was not (when false) (optional)</param>
        /// <param name="fSchedule">(Buyer/Provider) Filters work by a given service date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fCreated">(Buyer) Filters work created on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fPublished">(Buyer/Provider) Filters work published on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fRouted">(Buyer/Provider) Filters work routed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fPublishedRouted">(Buyer/Provider) Filters work published or routed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fCompleted">(Buyer/Provider) Filters work marked complete on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fApprovedCancelled">(Buyer/Provider) Filters work approved or cancelled on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fConfirmed">(Buyer/Provider) Filters work confirmed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fAssigned">(Buyer/Provider) Filters work assigned on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fSavedLocation">(Buyer) Filters work to that assigned to a saved location by name (e.g.: Acme store #1) or its unique identifier. Can also be given a list of comma separated values of either type. If the name includes a comma, you should use a list of the unique identifiers (optional)</param>
        /// <param name="fSavedLocationGroup">(Buyer) Filters work to that assigned to a saved location group by name (e.g.: Acme stores) or its unique identifier. Can also be given a list of comma separated values of either type. If the name includes a comma, you should use a list of the unique identifiers (optional)</param>
        /// <param name="fCity">(Buyer/Provider) Filters work to include only that of a given city name (case insensitive) or a list of cities when given a comma separated list of values (optional)</param>
        /// <param name="fState">(Buyer/Provider) Filters work to include only that of a given state (case insensitive) or a list of states when given a comma separated list of values (optional)</param>
        /// <param name="fPostalCode">(Buyer/Provider) Filters work to include only that of a given postal code (case insensitive) or a list of postal codes when given a comma separated list of values (optional)</param>
        /// <param name="fCountry">(Buyer/Provider) Filters work to include only that of a given country (case insensitive) or a list of countries when given a comma separated list of values (optional)</param>
        /// <param name="fFlags">(Buyer) Filters work to include that with a given label by name (e.g.: Late) or unique id or a list of either. If empty, includes only work with no flags. (optional)</param>
        /// <param name="fAssignment">(Buyer/Provider) Filters work to assigned providers of the given assignment type, must be one of: &#39;vendor&#39;, &#39;service_company&#39;, &#39;provider&#39;, &#39;any&#39; or a single unique id of a provider or list of ids (CSV) (optional)</param>
        /// <param name="fConfirmation">(Buyer/Provider) Filters to include work which may be given one or some (comma separated) of the following values: &#39;unconfirmed&#39;, &#39;confirmed&#39;, &#39;readytogo&#39;, &#39;onmyway&#39;, &#39;checked-in&#39;, &#39;checked-out&#39;, &#39;in-progress&#39; (optional)</param>
        /// <param name="fFinancing">(Buyer) Filters work to that of a specific financing account or list of financing accounts, either specified by their name or their unique identifier (optional)</param>
        /// <param name="fLocationRadius">(Provider) Filters work orders to a geofence, it may be given two array values the first being a search &#39;string&#39; and the second as integer radius in miles.  You can also optionally leave the first search string value blank to default to the Provider&#39;s home address or set a lattitude and longitude with the pattern &#39;&lt;lat&gt;,&lt;lng&gt;&#39;.  If a radius (in miles) is not include the default value of 60 will be set. (optional)</param>
        /// <param name="fRemoteWork">(Provider) Filters out all work orders with an onsite location when set to &#39;true&#39;. (optional)</param>
        /// <param name="fSearch">Keyword search, case insensitive, searches title, description, location, type of work, buyer, assigned provider and other criteria free-form (optional)</param>
        /// <returns>Task of WorkOrders</returns>
        System.Threading.Tasks.Task<WorkOrders> GetWorkOrdersAsync (string list = null, string columns = null, int? page = null, int? perPage = null, string view = null, bool? sticky = null, string sort = null, string order = null, string f_ = null, int? fMaxApprovalTime = null, string fRating = null, bool? fFlightboardTomorrow = null, bool? fRequests = null, bool? fCounterOffers = null, string fWorkOrderId = null, string fHourly = null, string fFixed = null, string fDevice = null, string fPay = null, string fTemplates = null, string fTypeOfWork = null, string fTimeZone = null, string fMode = null, string fCompany = null, string fWorkedWith = null, string fManager = null, string fClient = null, string fProject = null, string fApprovalWindow = null, string fReviewWindow = null, string fNetwork = null, string fAutoAssign = null, string fSchedule = null, string fCreated = null, string fPublished = null, string fRouted = null, string fPublishedRouted = null, string fCompleted = null, string fApprovedCancelled = null, string fConfirmed = null, string fAssigned = null, string fSavedLocation = null, string fSavedLocationGroup = null, string fCity = null, string fState = null, string fPostalCode = null, string fCountry = null, string fFlags = null, string fAssignment = null, string fConfirmation = null, string fFinancing = null, List<string> fLocationRadius = null, bool? fRemoteWork = null, string fSearch = null);

        /// <summary>
        /// Get Work Orders
        /// </summary>
        /// <remarks>
        /// Returns a list of work orders.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Saved group which sandboxes filters, sorts and column preferences in addition to pre-applied settings (e.g.: tabs or saved searches) (optional)</param>
        /// <param name="columns">Specify the columns and their order to return data for (optional)</param>
        /// <param name="page">Specify the page number (optional)</param>
        /// <param name="perPage">Specify the results per page (optional)</param>
        /// <param name="view">Caters the response data to how you&#39;re going to display it. For most uses, you&#39;ll want &#39;list&#39;; other options might include map, schedule, tiles, etc. (optional)</param>
        /// <param name="sticky">Persists filters, columns, and sorts (all but pagination) to re-apply on future requests where omitted. Persists to the &#39;list&#39; specified for the authenticated user (optional, default to false)</param>
        /// <param name="sort">Sorts results by a specified column id (optional)</param>
        /// <param name="order">Whether the sort should be ascending or descending (optional)</param>
        /// <param name="f_">Clears all filters (optional)</param>
        /// <param name="fMaxApprovalTime">(Provider) Filters work to where company has specified their maximum approval day target is less than or equal to provided number of days (optional)</param>
        /// <param name="fRating">(Provider) Filters work by buyer&#39;s star rating (Buyer) Filters work by assigned provider&#39;s star rating - - value can be a single number (e.g.: 3.5) where that value must be met or exceededor a specific inclusive range (e.g.: 3.5,5.0) (optional)</param>
        /// <param name="fFlightboardTomorrow">(Provider) Used by the confirm tomorrow work screen (optional)</param>
        /// <param name="fRequests">(Buyer) Filters work with requests (e.g.: true) or with no requests (e.g.: false) (optional)</param>
        /// <param name="fCounterOffers">(Buyer) Filters work with counter-offer requests of any type (schedule, expense or pay change) when true (e.g.: true) or with no counter offers (e.g.: false) (optional)</param>
        /// <param name="fWorkOrderId">(Buyer/Provider) Filters work by specific work order ids (optional)</param>
        /// <param name="fHourly">(Buyer/Provider) Filters work by that of a minimum hourly rate (includes only hourly or blended pay struture) - - may be given a single value which must be met or exceeded (e.g.: 50) or an inclusive range (e.g.: 35,75) (optional)</param>
        /// <param name="fFixed">(Buyer/Provider) Filters work by that of a minimum fixed rate (includes only fixed or blended pay structure) - - may by given a single value which must be met or exceeded (e.g.: 250) or an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fDevice">(Buyer/Provider) Filters work by that of a minimum per-device rate (includes only device pay structure) - - may by given a single value which must be met or exceeded (e.g.: 250) or an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fPay">(Buyer/Provider) Filters work by that whose minimum or maximum payout meets or exceeds a single value (e.g.: 250) or whose minimum or maximum payout falls between an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fTemplates">(Buyer) Filters work orders created using a given template, provided either by name or it&#39;s unique id. May be given as a single value or as a list of comma-separated values. If the template name itself has a comma, you should use its unique identifier instead (optional)</param>
        /// <param name="fTypeOfWork">(Buyer/Provider) Filters work by that of a given type (e.g.: Networking). May be given a single or comma separated list of values of the full descriptions (Networking) or their unique identifiers (40) - - if the descriptions include commas you should use their unique identifiers (optional)</param>
        /// <param name="fTimeZone">(Buyer/Provider) Filters work by that of a given time zone (e.g.: America/New_York), list of time zones (e.g.: America/New_York,America/Chicago), its offset (e.g.: -5) or a range of offsets (e.g.: -4,-6) (optional)</param>
        /// <param name="fMode">(Buyer/Provider) Filters work by that of a given mode which must be one of the following values: &#39;managed&#39;, &#39;marketplace&#39;, or &#39;any&#39; (optional)</param>
        /// <param name="fCompany">(Buyer/Provider) Filters work by buyer, can be given text which would free-form search all buyers by name (e.g.: &#39;acme&#39;), or a company&#39;s unique identifier (e.g.: &#39;50&#39;). You can also include a list of unique identifiers (e.g.: 50,51,52) to search for multiple buyers (optional)</param>
        /// <param name="fWorkedWith">(Provider) Filters work orders to include only those by company&#39;s I or my vendor/service company has previously worked with (optional)</param>
        /// <param name="fManager">(Buyer) Filters work to that assigned to a given company user, either by name (case insensitive), email or their unique id or a list of comma separated values of any of these (optional)</param>
        /// <param name="fClient">(Buyer) Filters work to that assigned to a given client company, either by name (case insensitive), or their unique id or a list of comma separated values of either of these (optional)</param>
        /// <param name="fProject">(Buyer) Filters work to that assigned to a given project, either by name (case insensitive), or their unique id or a list of comma separated values of either of these (optional)</param>
        /// <param name="fApprovalWindow">(Provider) Filters work to include only companies who set their target approval days equal or less than provided value (e.g.: 2) or within a given range (e.g.: 1,3) (optional)</param>
        /// <param name="fReviewWindow">(Buyer) Filters work to include only work orders that exceed the days given, or the company&#39;s target approval days when given no value (optional)</param>
        /// <param name="fNetwork">(Buyer) Filters work by one or more of your company&#39;s networks. You must have the Field Nation Complete feature to enable new networks. Networks may be provided as a comma separated list of their names (e.g.: Field Nation) or unique ids (optional)</param>
        /// <param name="fAutoAssign">(Buyer) Filters work to that which was auto-assigned/dispatched (when true) or to that which was not (when false) (optional)</param>
        /// <param name="fSchedule">(Buyer/Provider) Filters work by a given service date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fCreated">(Buyer) Filters work created on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fPublished">(Buyer/Provider) Filters work published on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fRouted">(Buyer/Provider) Filters work routed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fPublishedRouted">(Buyer/Provider) Filters work published or routed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fCompleted">(Buyer/Provider) Filters work marked complete on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fApprovedCancelled">(Buyer/Provider) Filters work approved or cancelled on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fConfirmed">(Buyer/Provider) Filters work confirmed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fAssigned">(Buyer/Provider) Filters work assigned on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fSavedLocation">(Buyer) Filters work to that assigned to a saved location by name (e.g.: Acme store #1) or its unique identifier. Can also be given a list of comma separated values of either type. If the name includes a comma, you should use a list of the unique identifiers (optional)</param>
        /// <param name="fSavedLocationGroup">(Buyer) Filters work to that assigned to a saved location group by name (e.g.: Acme stores) or its unique identifier. Can also be given a list of comma separated values of either type. If the name includes a comma, you should use a list of the unique identifiers (optional)</param>
        /// <param name="fCity">(Buyer/Provider) Filters work to include only that of a given city name (case insensitive) or a list of cities when given a comma separated list of values (optional)</param>
        /// <param name="fState">(Buyer/Provider) Filters work to include only that of a given state (case insensitive) or a list of states when given a comma separated list of values (optional)</param>
        /// <param name="fPostalCode">(Buyer/Provider) Filters work to include only that of a given postal code (case insensitive) or a list of postal codes when given a comma separated list of values (optional)</param>
        /// <param name="fCountry">(Buyer/Provider) Filters work to include only that of a given country (case insensitive) or a list of countries when given a comma separated list of values (optional)</param>
        /// <param name="fFlags">(Buyer) Filters work to include that with a given label by name (e.g.: Late) or unique id or a list of either. If empty, includes only work with no flags. (optional)</param>
        /// <param name="fAssignment">(Buyer/Provider) Filters work to assigned providers of the given assignment type, must be one of: &#39;vendor&#39;, &#39;service_company&#39;, &#39;provider&#39;, &#39;any&#39; or a single unique id of a provider or list of ids (CSV) (optional)</param>
        /// <param name="fConfirmation">(Buyer/Provider) Filters to include work which may be given one or some (comma separated) of the following values: &#39;unconfirmed&#39;, &#39;confirmed&#39;, &#39;readytogo&#39;, &#39;onmyway&#39;, &#39;checked-in&#39;, &#39;checked-out&#39;, &#39;in-progress&#39; (optional)</param>
        /// <param name="fFinancing">(Buyer) Filters work to that of a specific financing account or list of financing accounts, either specified by their name or their unique identifier (optional)</param>
        /// <param name="fLocationRadius">(Provider) Filters work orders to a geofence, it may be given two array values the first being a search &#39;string&#39; and the second as integer radius in miles.  You can also optionally leave the first search string value blank to default to the Provider&#39;s home address or set a lattitude and longitude with the pattern &#39;&lt;lat&gt;,&lt;lng&gt;&#39;.  If a radius (in miles) is not include the default value of 60 will be set. (optional)</param>
        /// <param name="fRemoteWork">(Provider) Filters out all work orders with an onsite location when set to &#39;true&#39;. (optional)</param>
        /// <param name="fSearch">Keyword search, case insensitive, searches title, description, location, type of work, buyer, assigned provider and other criteria free-form (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrders)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrders>> GetWorkOrdersAsyncWithHttpInfo (string list = null, string columns = null, int? page = null, int? perPage = null, string view = null, bool? sticky = null, string sort = null, string order = null, string f_ = null, int? fMaxApprovalTime = null, string fRating = null, bool? fFlightboardTomorrow = null, bool? fRequests = null, bool? fCounterOffers = null, string fWorkOrderId = null, string fHourly = null, string fFixed = null, string fDevice = null, string fPay = null, string fTemplates = null, string fTypeOfWork = null, string fTimeZone = null, string fMode = null, string fCompany = null, string fWorkedWith = null, string fManager = null, string fClient = null, string fProject = null, string fApprovalWindow = null, string fReviewWindow = null, string fNetwork = null, string fAutoAssign = null, string fSchedule = null, string fCreated = null, string fPublished = null, string fRouted = null, string fPublishedRouted = null, string fCompleted = null, string fApprovedCancelled = null, string fConfirmed = null, string fAssigned = null, string fSavedLocation = null, string fSavedLocationGroup = null, string fCity = null, string fState = null, string fPostalCode = null, string fCountry = null, string fFlags = null, string fAssignment = null, string fConfirmation = null, string fFinancing = null, List<string> fLocationRadius = null, bool? fRemoteWork = null, string fSearch = null);
        /// <summary>
        /// Group Task by Work Order and Task
        /// </summary>
        /// <remarks>
        /// Regroups a task associated with a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="group">New group</param>
        /// <param name="destination">beginning or end (position in new group)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> GroupTaskByWorkOrderAndTaskAsync (int? workOrderId, int? taskId, string group, string destination);

        /// <summary>
        /// Group Task by Work Order and Task
        /// </summary>
        /// <remarks>
        /// Regroups a task associated with a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="group">New group</param>
        /// <param name="destination">beginning or end (position in new group)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> GroupTaskByWorkOrderAndTaskAsyncWithHttpInfo (int? workOrderId, int? taskId, string group, string destination);
        /// <summary>
        /// Incomplete Work Order By Work Order
        /// </summary>
        /// <remarks>
        /// Marks a work order incomplete and moves it to work done status
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="reason">Reason (optional)</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> IncompleteWorkOrderByWorkOrderAsync (int? workOrderId, string reason = null, bool? async = null);

        /// <summary>
        /// Incomplete Work Order By Work Order
        /// </summary>
        /// <remarks>
        /// Marks a work order incomplete and moves it to work done status
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="reason">Reason (optional)</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> IncompleteWorkOrderByWorkOrderAsyncWithHttpInfo (int? workOrderId, string reason = null, bool? async = null);
        /// <summary>
        /// Mass Accept Work Order by Work Order
        /// </summary>
        /// <remarks>
        /// Mass Accept with ETA
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eta">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MassAcceptWorkOrderByWorkOrderAsync (EtaMassAccept eta, bool? async = null);

        /// <summary>
        /// Mass Accept Work Order by Work Order
        /// </summary>
        /// <remarks>
        /// Mass Accept with ETA
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eta">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MassAcceptWorkOrderByWorkOrderAsyncWithHttpInfo (EtaMassAccept eta, bool? async = null);
        /// <summary>
        /// Mass Requests
        /// </summary>
        /// <remarks>
        /// Work order mass requests
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requests">JSON Payload</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MassRequestsAsync (Requests requests);

        /// <summary>
        /// Mass Requests
        /// </summary>
        /// <remarks>
        /// Work order mass requests
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requests">JSON Payload</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MassRequestsAsyncWithHttpInfo (Requests requests);
        /// <summary>
        /// Publish by Work Order
        /// </summary>
        /// <remarks>
        /// Publishes a work order to the marketplace where it can garner requests. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> PublishByWorkOrderAsync (int? workOrderId, bool? async = null, Publish body = null);

        /// <summary>
        /// Publish by Work Order
        /// </summary>
        /// <remarks>
        /// Publishes a work order to the marketplace where it can garner requests. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> PublishByWorkOrderAsyncWithHttpInfo (int? workOrderId, bool? async = null, Publish body = null);
        /// <summary>
        /// Remove provider by work order
        /// </summary>
        /// <remarks>
        /// Unassigns and removes a provider for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveProviderByWorkOrderAsync (int? workOrderId);

        /// <summary>
        /// Remove provider by work order
        /// </summary>
        /// <remarks>
        /// Unassigns and removes a provider for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveProviderByWorkOrderAsyncWithHttpInfo (int? workOrderId);
        /// <summary>
        /// Remove Qualification by Work Order
        /// </summary>
        /// <remarks>
        /// Remove qualification work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualificationId">ID of qualification</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> RemoveQualificationByWorkOrderAsync (int? workOrderId, int? qualificationId);

        /// <summary>
        /// Remove Qualification by Work Order
        /// </summary>
        /// <remarks>
        /// Remove qualification work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualificationId">ID of qualification</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> RemoveQualificationByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? qualificationId);
        /// <summary>
        /// Reply Message by Work Order
        /// </summary>
        /// <remarks>
        /// Reply a message on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <param name="json">JSON payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of Messages</returns>
        System.Threading.Tasks.Task<Messages> ReplyMessageByWorkOrderAsync (int? workOrderId, int? messageId, Message json, bool? async = null);

        /// <summary>
        /// Reply Message by Work Order
        /// </summary>
        /// <remarks>
        /// Reply a message on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <param name="json">JSON payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (Messages)</returns>
        System.Threading.Tasks.Task<ApiResponse<Messages>> ReplyMessageByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? messageId, Message json, bool? async = null);
        /// <summary>
        /// Request by Work Order
        /// </summary>
        /// <remarks>
        /// Request or un-hide a request for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="request">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> RequestByWorkOrderAsync (int? workOrderId, Request request, bool? async = null);

        /// <summary>
        /// Request by Work Order
        /// </summary>
        /// <remarks>
        /// Request or un-hide a request for a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="request">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> RequestByWorkOrderAsyncWithHttpInfo (int? workOrderId, Request request, bool? async = null);
        /// <summary>
        /// Revert Work Order To Draft by Work Order
        /// </summary>
        /// <remarks>
        /// Reverts a work order to draft status 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> RevertWorkOrderToDraftByWorkOrderAsync (int? workOrderId, bool? async = null);

        /// <summary>
        /// Revert Work Order To Draft by Work Order
        /// </summary>
        /// <remarks>
        /// Reverts a work order to draft status 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> RevertWorkOrderToDraftByWorkOrderAsyncWithHttpInfo (int? workOrderId, bool? async = null);
        /// <summary>
        /// Route User by Work Order
        /// </summary>
        /// <remarks>
        /// Route a user to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="route">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> RouteUserByWorkOrderAsync (int? workOrderId, Route route, bool? async = null);

        /// <summary>
        /// Route User by Work Order
        /// </summary>
        /// <remarks>
        /// Route a user to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="route">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> RouteUserByWorkOrderAsyncWithHttpInfo (int? workOrderId, Route route, bool? async = null);
        /// <summary>
        /// Unroute User by Work Order
        /// </summary>
        /// <remarks>
        /// Unroute a user from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="route">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UnRouteUserByWorkOrderAsync (int? workOrderId, Route route, bool? async = null);

        /// <summary>
        /// Unroute User by Work Order
        /// </summary>
        /// <remarks>
        /// Unroute a user from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="route">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UnRouteUserByWorkOrderAsyncWithHttpInfo (int? workOrderId, Route route, bool? async = null);
        /// <summary>
        /// Unapprove Work Order By Work Order
        /// </summary>
        /// <remarks>
        /// Unapproves a completed work order and moves it to work done status
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UnapproveWorkOrderByWorkOrderAsync (int? workOrderId, bool? async = null);

        /// <summary>
        /// Unapprove Work Order By Work Order
        /// </summary>
        /// <remarks>
        /// Unapproves a completed work order and moves it to work done status
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UnapproveWorkOrderByWorkOrderAsyncWithHttpInfo (int? workOrderId, bool? async = null);
        /// <summary>
        /// Unassign User by Work Order and User
        /// </summary>
        /// <remarks>
        /// Unassign user from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="assignee">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UnassignUserByWorkOrderAndUserAsync (int? workOrderId, Assignee assignee, bool? async = null);

        /// <summary>
        /// Unassign User by Work Order and User
        /// </summary>
        /// <remarks>
        /// Unassign user from a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="assignee">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UnassignUserByWorkOrderAndUserAsyncWithHttpInfo (int? workOrderId, Assignee assignee, bool? async = null);
        /// <summary>
        /// Unpublish by Work Order
        /// </summary>
        /// <remarks>
        /// Unpublishes a work order from the marketplace so that no requests or counter-offers can be made. Moves to draft unless it was also routed. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UnpublishByWorkOrderAsync (int? workOrderId, bool? async = null);

        /// <summary>
        /// Unpublish by Work Order
        /// </summary>
        /// <remarks>
        /// Unpublishes a work order from the marketplace so that no requests or counter-offers can be made. Moves to draft unless it was also routed. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UnpublishByWorkOrderAsyncWithHttpInfo (int? workOrderId, bool? async = null);
        /// <summary>
        /// Update All Time Logs by Work Order
        /// </summary>
        /// <remarks>
        /// Update all time logs for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="timeLog">Check in information</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateAllTimeLogsByWorkOrderAsync (int? workOrderId, TimeLog timeLog, bool? async = null);

        /// <summary>
        /// Update All Time Logs by Work Order
        /// </summary>
        /// <remarks>
        /// Update all time logs for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="timeLog">Check in information</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateAllTimeLogsByWorkOrderAsyncWithHttpInfo (int? workOrderId, TimeLog timeLog, bool? async = null);
        /// <summary>
        /// Update Attachment by Work Order and Folder and Attachment
        /// </summary>
        /// <remarks>
        /// Updates an attachment folder and its contents
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <param name="attachment">Attachment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateAttachmentByWorkOrderAndFolderAndAttachmentAsync (int? workOrderId, int? folderId, int? attachmentId, Attachment attachment, bool? async = null);

        /// <summary>
        /// Update Attachment by Work Order and Folder and Attachment
        /// </summary>
        /// <remarks>
        /// Updates an attachment folder and its contents
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <param name="attachment">Attachment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateAttachmentByWorkOrderAndFolderAndAttachmentAsyncWithHttpInfo (int? workOrderId, int? folderId, int? attachmentId, Attachment attachment, bool? async = null);
        /// <summary>
        /// Update Attribute by Location and Attribute
        /// </summary>
        /// <remarks>
        /// Updates an attribute to a stored location
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <param name="attribute">JSON Model</param>
        /// <returns>Task of StoredLocation</returns>
        System.Threading.Tasks.Task<StoredLocation> UpdateAttributeByLocationAndAttributeAsync (int? locationId, int? attributeName, LocationAttribute attribute);

        /// <summary>
        /// Update Attribute by Location and Attribute
        /// </summary>
        /// <remarks>
        /// Updates an attribute to a stored location
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <param name="attribute">JSON Model</param>
        /// <returns>Task of ApiResponse (StoredLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<StoredLocation>> UpdateAttributeByLocationAndAttributeAsyncWithHttpInfo (int? locationId, int? attributeName, LocationAttribute attribute);
        /// <summary>
        /// Update Bonus by Work Order and Bonus
        /// </summary>
        /// <remarks>
        /// Updates a bonus on a work order which can conditionally increase the amount paid to the provider upon conditions being met
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateBonusByWorkOrderAndBonusAsync (int? workOrderId, int? bonusId, PayModifier bonus);

        /// <summary>
        /// Update Bonus by Work Order and Bonus
        /// </summary>
        /// <remarks>
        /// Updates a bonus on a work order which can conditionally increase the amount paid to the provider upon conditions being met
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateBonusByWorkOrderAndBonusAsyncWithHttpInfo (int? workOrderId, int? bonusId, PayModifier bonus);
        /// <summary>
        /// Update Contact by Work Order and Contact
        /// </summary>
        /// <remarks>
        /// Update contact of a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contactId">Contact id</param>
        /// <param name="contact">JSON Model</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateContactByWorkOrderAndContactAsync (int? workOrderId, int? contactId, Contact contact);

        /// <summary>
        /// Update Contact by Work Order and Contact
        /// </summary>
        /// <remarks>
        /// Update contact of a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contactId">Contact id</param>
        /// <param name="contact">JSON Model</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateContactByWorkOrderAndContactAsyncWithHttpInfo (int? workOrderId, int? contactId, Contact contact);
        /// <summary>
        /// Update Custom Field by Work Order and Custom Field
        /// </summary>
        /// <remarks>
        /// Update a custom field value on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="customFieldId">Custom field ID</param>
        /// <param name="customField">Custom field</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateCustomFieldByWorkOrderAndCustomFieldAsync (int? workOrderId, int? customFieldId, CustomField customField, bool? async = null);

        /// <summary>
        /// Update Custom Field by Work Order and Custom Field
        /// </summary>
        /// <remarks>
        /// Update a custom field value on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="customFieldId">Custom field ID</param>
        /// <param name="customField">Custom field</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateCustomFieldByWorkOrderAndCustomFieldAsyncWithHttpInfo (int? workOrderId, int? customFieldId, CustomField customField, bool? async = null);
        /// <summary>
        /// Update Discount by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the amount or description of a discount applied to the work order. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="discountId">ID of the discount</param>
        /// <param name="json">Payload of the discount</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateDiscountByWorkOrderAsync (int? workOrderId, int? discountId, PayModifier json);

        /// <summary>
        /// Update Discount by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the amount or description of a discount applied to the work order. 
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="discountId">ID of the discount</param>
        /// <param name="json">Payload of the discount</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateDiscountByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? discountId, PayModifier json);
        /// <summary>
        /// Update ETA by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the eta of a work order (depending on your role)
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="eta">JSON Payload</param>
        /// <param name="confirm">Confirm (optional)</param>
        /// <param name="updateFromIvr">update from IVR (optional)</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateETAByWorkOrderAsync (int? workOrderId, ETA eta, bool? confirm = null, bool? updateFromIvr = null, bool? async = null);

        /// <summary>
        /// Update ETA by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the eta of a work order (depending on your role)
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="eta">JSON Payload</param>
        /// <param name="confirm">Confirm (optional)</param>
        /// <param name="updateFromIvr">update from IVR (optional)</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateETAByWorkOrderAsyncWithHttpInfo (int? workOrderId, ETA eta, bool? confirm = null, bool? updateFromIvr = null, bool? async = null);
        /// <summary>
        /// Update Expense by Work order and Expense
        /// </summary>
        /// <remarks>
        /// Update an Expense of a Work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expenseId">ID of expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <param name="expense">Expense (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateExpenseByWorkOrderAndExpenseAsync (int? workOrderId, int? expenseId, bool? async = null, Expense expense = null);

        /// <summary>
        /// Update Expense by Work order and Expense
        /// </summary>
        /// <remarks>
        /// Update an Expense of a Work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expenseId">ID of expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <param name="expense">Expense (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateExpenseByWorkOrderAndExpenseAsyncWithHttpInfo (int? workOrderId, int? expenseId, bool? async = null, Expense expense = null);
        /// <summary>
        /// Update Expenses by Work Order
        /// </summary>
        /// <remarks>
        /// Updates all the expneses in a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="expenses">JSON Model</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateExpensesByWorkOrderAsync (int? workOrderId, Expenses expenses);

        /// <summary>
        /// Update Expenses by Work Order
        /// </summary>
        /// <remarks>
        /// Updates all the expneses in a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="expenses">JSON Model</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateExpensesByWorkOrderAsyncWithHttpInfo (int? workOrderId, Expenses expenses);
        /// <summary>
        /// Update Folder by Work Order and Folder
        /// </summary>
        /// <remarks>
        /// Updates an attachment folder
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="folder">Folder</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateFolderByWorkOrderAndFolderAsync (int? workOrderId, int? folderId, AttachmentFolder folder, bool? async = null);

        /// <summary>
        /// Update Folder by Work Order and Folder
        /// </summary>
        /// <remarks>
        /// Updates an attachment folder
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="folder">Folder</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateFolderByWorkOrderAndFolderAsyncWithHttpInfo (int? workOrderId, int? folderId, AttachmentFolder folder, bool? async = null);
        /// <summary>
        /// Update Hold by Work Order and Hold
        /// </summary>
        /// <remarks>
        /// Updates a hold on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="hold">Hold object with updates</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateHoldByWorkOrderAndHoldAsync (int? workOrderId, int? holdId, Hold hold, bool? async = null);

        /// <summary>
        /// Update Hold by Work Order and Hold
        /// </summary>
        /// <remarks>
        /// Updates a hold on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="hold">Hold object with updates</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateHoldByWorkOrderAndHoldAsyncWithHttpInfo (int? workOrderId, int? holdId, Hold hold, bool? async = null);
        /// <summary>
        /// Update Increase by Work Order
        /// </summary>
        /// <remarks>
        /// Update pay increase for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="increase">Increase structure for update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateIncreaseByWorkOrderAndIncreaseAsync (int? workOrderId, int? increaseId, PayIncrease increase, bool? async = null);

        /// <summary>
        /// Update Increase by Work Order
        /// </summary>
        /// <remarks>
        /// Update pay increase for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="increase">Increase structure for update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateIncreaseByWorkOrderAndIncreaseAsyncWithHttpInfo (int? workOrderId, int? increaseId, PayIncrease increase, bool? async = null);
        /// <summary>
        /// Update Location by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the location of a work order (depending on your role)
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="location">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateLocationByWorkOrderAsync (int? workOrderId, Location location, bool? async = null);

        /// <summary>
        /// Update Location by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the location of a work order (depending on your role)
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="location">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateLocationByWorkOrderAsyncWithHttpInfo (int? workOrderId, Location location, bool? async = null);
        /// <summary>
        /// Update Message by Work Order
        /// </summary>
        /// <remarks>
        /// Updates a message on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <param name="json">JSON payload</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateMessageByWorkOrderAsync (int? workOrderId, int? messageId, Message json);

        /// <summary>
        /// Update Message by Work Order
        /// </summary>
        /// <remarks>
        /// Updates a message on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <param name="json">JSON payload</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateMessageByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? messageId, Message json);
        /// <summary>
        /// Update Pay by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the pay of a work order, or requests an adjustment
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="pay">Pay</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdatePayByWorkOrderAsync (int? workOrderId, Pay pay, bool? async = null);

        /// <summary>
        /// Update Pay by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the pay of a work order, or requests an adjustment
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="pay">Pay</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdatePayByWorkOrderAsyncWithHttpInfo (int? workOrderId, Pay pay, bool? async = null);
        /// <summary>
        /// Update Penalty by Work Order and Penalty
        /// </summary>
        /// <remarks>
        /// Updates a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <param name="penalty">Penalty (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdatePenaltyByWorkOrderAndPenaltyAsync (int? workOrderId, int? penaltyId, PayModifier penalty = null);

        /// <summary>
        /// Update Penalty by Work Order and Penalty
        /// </summary>
        /// <remarks>
        /// Updates a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <param name="penalty">Penalty (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdatePenaltyByWorkOrderAndPenaltyAsyncWithHttpInfo (int? workOrderId, int? penaltyId, PayModifier penalty = null);
        /// <summary>
        /// Update problem by work order
        /// </summary>
        /// <remarks>
        /// Updates a problem on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of work order</param>
        /// <param name="problem">Problem</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateProblemByWorkOrderAndProblemAsync (int? workOrderId, int? problemId, Problem problem, bool? async = null);

        /// <summary>
        /// Update problem by work order
        /// </summary>
        /// <remarks>
        /// Updates a problem on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of work order</param>
        /// <param name="problem">Problem</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateProblemByWorkOrderAndProblemAsyncWithHttpInfo (int? workOrderId, int? problemId, Problem problem, bool? async = null);
        /// <summary>
        /// Update Qualification by Work Order
        /// </summary>
        /// <remarks>
        /// Update qualification for work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualifications">Qualification information</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateQualificationByWorkOrderAsync (int? workOrderId, Qualifications qualifications);

        /// <summary>
        /// Update Qualification by Work Order
        /// </summary>
        /// <remarks>
        /// Update qualification for work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualifications">Qualification information</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateQualificationByWorkOrderAsyncWithHttpInfo (int? workOrderId, Qualifications qualifications);
        /// <summary>
        /// Update rating by Work Order
        /// </summary>
        /// <remarks>
        /// Updates ratings or blocks by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="ratings">rating_json</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateRatingsByWorkOrderAsync (int? workOrderId, WorkOrderRatings ratings, bool? async = null);

        /// <summary>
        /// Update rating by Work Order
        /// </summary>
        /// <remarks>
        /// Updates ratings or blocks by work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="ratings">rating_json</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateRatingsByWorkOrderAsyncWithHttpInfo (int? workOrderId, WorkOrderRatings ratings, bool? async = null);
        /// <summary>
        /// Update Schedule by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the service schedule or eta of a work order (depending on your role)
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="schedule">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateScheduleByWorkOrderAsync (int? workOrderId, Schedule schedule, bool? async = null);

        /// <summary>
        /// Update Schedule by Work Order
        /// </summary>
        /// <remarks>
        /// Updates the service schedule or eta of a work order (depending on your role)
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="schedule">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateScheduleByWorkOrderAsyncWithHttpInfo (int? workOrderId, Schedule schedule, bool? async = null);
        /// <summary>
        /// Update Shipment by Work Order and Shipment
        /// </summary>
        /// <remarks>
        /// Updates a shipment attached to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipmentId">Shipment id</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateShipmentByWorkOrderAndShipmentAsync (int? workOrderId, int? shipmentId, Shipment shipment, bool? async = null);

        /// <summary>
        /// Update Shipment by Work Order and Shipment
        /// </summary>
        /// <remarks>
        /// Updates a shipment attached to a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipmentId">Shipment id</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateShipmentByWorkOrderAndShipmentAsyncWithHttpInfo (int? workOrderId, int? shipmentId, Shipment shipment, bool? async = null);
        /// <summary>
        /// Update Swap by Work order and Problem
        /// </summary>
        /// <remarks>
        /// Updates a swap request by id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapId">ID of swap</param>
        /// <param name="swap">Swap</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateSwapByWorkOrderAndSwapAsync (int? workOrderId, int? swapId, Swap swap);

        /// <summary>
        /// Update Swap by Work order and Problem
        /// </summary>
        /// <remarks>
        /// Updates a swap request by id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapId">ID of swap</param>
        /// <param name="swap">Swap</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateSwapByWorkOrderAndSwapAsyncWithHttpInfo (int? workOrderId, int? swapId, Swap swap);
        /// <summary>
        /// Update tag by work order
        /// </summary>
        /// <remarks>
        /// Updates a tag on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of work order</param>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateTagByWorkOrderAndProblemAsync (int? workOrderId, int? tagId, Tag tag, bool? async = null);

        /// <summary>
        /// Update tag by work order
        /// </summary>
        /// <remarks>
        /// Updates a tag on a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of work order</param>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateTagByWorkOrderAndProblemAsyncWithHttpInfo (int? workOrderId, int? tagId, Tag tag, bool? async = null);
        /// <summary>
        /// Update Task by Work Order
        /// </summary>
        /// <remarks>
        /// Updates a work order&#39;s task
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="task">JSON Model</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateTaskByWorkOrderAsync (int? workOrderId, int? taskId, Task task);

        /// <summary>
        /// Update Task by Work Order
        /// </summary>
        /// <remarks>
        /// Updates a work order&#39;s task
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="task">JSON Model</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateTaskByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? taskId, Task task);
        /// <summary>
        /// Update Tasks by Work Order
        /// </summary>
        /// <remarks>
        /// Updates all the tasks in a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="tasks">JSON Model</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateTasksByWorkOrderAsync (int? workOrderId, Tasks tasks);

        /// <summary>
        /// Update Tasks by Work Order
        /// </summary>
        /// <remarks>
        /// Updates all the tasks in a work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="tasks">JSON Model</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateTasksByWorkOrderAsyncWithHttpInfo (int? workOrderId, Tasks tasks);
        /// <summary>
        /// Update Time Log by Work Order
        /// </summary>
        /// <remarks>
        /// Update time log for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="timeLog">Check in information</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateTimeLogByWorkOrderAsync (int? workOrderId, int? workorderHoursId, TimeLog timeLog, bool? async = null);

        /// <summary>
        /// Update Time Log by Work Order
        /// </summary>
        /// <remarks>
        /// Update time log for assigned work order.
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="timeLog">Check in information</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateTimeLogByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? workorderHoursId, TimeLog timeLog, bool? async = null);
        /// <summary>
        /// Update Work Order by Work Order
        /// </summary>
        /// <remarks>
        /// Updates a work order by its id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workOrder">Work order model</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> UpdateWorkOrderByWorkOrderAsync (int? workOrderId, WorkOrder workOrder, bool? async = null);

        /// <summary>
        /// Update Work Order by Work Order
        /// </summary>
        /// <remarks>
        /// Updates a work order by its id
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workOrder">Work order model</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateWorkOrderByWorkOrderAsyncWithHttpInfo (int? workOrderId, WorkOrder workOrder, bool? async = null);
        /// <summary>
        /// Verify Time Log by Work Order
        /// </summary>
        /// <remarks>
        /// Verify time log for assigned work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        System.Threading.Tasks.Task<WorkOrder> VerifyTimeLogByWorkOrderAsync (int? workOrderId, int? workorderHoursId, bool? async = null);

        /// <summary>
        /// Verify Time Log by Work Order
        /// </summary>
        /// <remarks>
        /// Verify time log for assigned work order
        /// </remarks>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkOrder>> VerifyTimeLogByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? workorderHoursId, bool? async = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkorderApi : IWorkorderApi
    {
        private FieldNation.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkorderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkorderApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = FieldNation.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkorderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkorderApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = FieldNation.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FieldNation.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Accept Swap Request Accept work order swap request.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>SwapResponse</returns>
        public SwapResponse AcceptSwapRequest (int? workOrderId, int? swapRequestId)
        {
             ApiResponse<SwapResponse> localVarResponse = AcceptSwapRequestWithHttpInfo(workOrderId, swapRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accept Swap Request Accept work order swap request.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>ApiResponse of SwapResponse</returns>
        public ApiResponse< SwapResponse > AcceptSwapRequestWithHttpInfo (int? workOrderId, int? swapRequestId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AcceptSwapRequest");
            // verify the required parameter 'swapRequestId' is set
            if (swapRequestId == null)
                throw new ApiException(400, "Missing required parameter 'swapRequestId' when calling WorkorderApi->AcceptSwapRequest");

            var localVarPath = "/workorders/{work_order_id}/swaps/{swap_request_id}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (swapRequestId != null) localVarPathParams.Add("swap_request_id", Configuration.ApiClient.ParameterToString(swapRequestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptSwapRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwapResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SwapResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwapResponse)));
        }

        /// <summary>
        /// Accept Swap Request Accept work order swap request.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>Task of SwapResponse</returns>
        public async System.Threading.Tasks.Task<SwapResponse> AcceptSwapRequestAsync (int? workOrderId, int? swapRequestId)
        {
             ApiResponse<SwapResponse> localVarResponse = await AcceptSwapRequestAsyncWithHttpInfo(workOrderId, swapRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accept Swap Request Accept work order swap request.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>Task of ApiResponse (SwapResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SwapResponse>> AcceptSwapRequestAsyncWithHttpInfo (int? workOrderId, int? swapRequestId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AcceptSwapRequest");
            // verify the required parameter 'swapRequestId' is set
            if (swapRequestId == null)
                throw new ApiException(400, "Missing required parameter 'swapRequestId' when calling WorkorderApi->AcceptSwapRequest");

            var localVarPath = "/workorders/{work_order_id}/swaps/{swap_request_id}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (swapRequestId != null) localVarPathParams.Add("swap_request_id", Configuration.ApiClient.ParameterToString(swapRequestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptSwapRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwapResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SwapResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwapResponse)));
        }

        /// <summary>
        /// Acknowledge delay by work order Acknowledges a provider&#39;s delay on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns></returns>
        public void AcknowledgeDelayByWorkOrder (int? workOrderId)
        {
             AcknowledgeDelayByWorkOrderWithHttpInfo(workOrderId);
        }

        /// <summary>
        /// Acknowledge delay by work order Acknowledges a provider&#39;s delay on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AcknowledgeDelayByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AcknowledgeDelayByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/provider/delay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcknowledgeDelayByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Acknowledge delay by work order Acknowledges a provider&#39;s delay on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AcknowledgeDelayByWorkOrderAsync (int? workOrderId)
        {
             await AcknowledgeDelayByWorkOrderAsyncWithHttpInfo(workOrderId);

        }

        /// <summary>
        /// Acknowledge delay by work order Acknowledges a provider&#39;s delay on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AcknowledgeDelayByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AcknowledgeDelayByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/provider/delay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcknowledgeDelayByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add Alert to Work Order and Task Sets up an alert to be fired upon the completion of a task associated with a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="json">JSON Model</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder AddAlertToWorkOrderAndTask (int? workOrderId, int? taskId, TaskAlert json)
        {
             ApiResponse<WorkOrder> localVarResponse = AddAlertToWorkOrderAndTaskWithHttpInfo(workOrderId, taskId, json);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Alert to Work Order and Task Sets up an alert to be fired upon the completion of a task associated with a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="json">JSON Model</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > AddAlertToWorkOrderAndTaskWithHttpInfo (int? workOrderId, int? taskId, TaskAlert json)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddAlertToWorkOrderAndTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling WorkorderApi->AddAlertToWorkOrderAndTask");
            // verify the required parameter 'json' is set
            if (json == null)
                throw new ApiException(400, "Missing required parameter 'json' when calling WorkorderApi->AddAlertToWorkOrderAndTask");

            var localVarPath = "/workorders/{work_order_id}/tasks/{task_id}/alerts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (json != null && json.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(json); // http body (model) parameter
            }
            else
            {
                localVarPostBody = json; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAlertToWorkOrderAndTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Alert to Work Order and Task Sets up an alert to be fired upon the completion of a task associated with a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="json">JSON Model</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> AddAlertToWorkOrderAndTaskAsync (int? workOrderId, int? taskId, TaskAlert json)
        {
             ApiResponse<WorkOrder> localVarResponse = await AddAlertToWorkOrderAndTaskAsyncWithHttpInfo(workOrderId, taskId, json);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Alert to Work Order and Task Sets up an alert to be fired upon the completion of a task associated with a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="json">JSON Model</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddAlertToWorkOrderAndTaskAsyncWithHttpInfo (int? workOrderId, int? taskId, TaskAlert json)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddAlertToWorkOrderAndTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling WorkorderApi->AddAlertToWorkOrderAndTask");
            // verify the required parameter 'json' is set
            if (json == null)
                throw new ApiException(400, "Missing required parameter 'json' when calling WorkorderApi->AddAlertToWorkOrderAndTask");

            var localVarPath = "/workorders/{work_order_id}/tasks/{task_id}/alerts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (json != null && json.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(json); // http body (model) parameter
            }
            else
            {
                localVarPostBody = json; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAlertToWorkOrderAndTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Attachment by Work Order and Folder Uploads a file by an attachment folder
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachment">Folder</param>
        /// <param name="file">File</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder AddAttachmentByWorkOrderAndFolder (int? workOrderId, int? folderId, string attachment, System.IO.Stream file, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = AddAttachmentByWorkOrderAndFolderWithHttpInfo(workOrderId, folderId, attachment, file, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Attachment by Work Order and Folder Uploads a file by an attachment folder
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachment">Folder</param>
        /// <param name="file">File</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > AddAttachmentByWorkOrderAndFolderWithHttpInfo (int? workOrderId, int? folderId, string attachment, System.IO.Stream file, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddAttachmentByWorkOrderAndFolder");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkorderApi->AddAttachmentByWorkOrderAndFolder");
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling WorkorderApi->AddAttachmentByWorkOrderAndFolder");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling WorkorderApi->AddAttachmentByWorkOrderAndFolder");

            var localVarPath = "/workorders/{work_order_id}/attachments/{folder_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folder_id", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (attachment != null) localVarFormParams.Add("attachment", Configuration.ApiClient.ParameterToString(attachment)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAttachmentByWorkOrderAndFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Attachment by Work Order and Folder Uploads a file by an attachment folder
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachment">Folder</param>
        /// <param name="file">File</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> AddAttachmentByWorkOrderAndFolderAsync (int? workOrderId, int? folderId, string attachment, System.IO.Stream file, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await AddAttachmentByWorkOrderAndFolderAsyncWithHttpInfo(workOrderId, folderId, attachment, file, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Attachment by Work Order and Folder Uploads a file by an attachment folder
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachment">Folder</param>
        /// <param name="file">File</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddAttachmentByWorkOrderAndFolderAsyncWithHttpInfo (int? workOrderId, int? folderId, string attachment, System.IO.Stream file, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddAttachmentByWorkOrderAndFolder");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkorderApi->AddAttachmentByWorkOrderAndFolder");
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling WorkorderApi->AddAttachmentByWorkOrderAndFolder");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling WorkorderApi->AddAttachmentByWorkOrderAndFolder");

            var localVarPath = "/workorders/{work_order_id}/attachments/{folder_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folder_id", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (attachment != null) localVarFormParams.Add("attachment", Configuration.ApiClient.ParameterToString(attachment)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAttachmentByWorkOrderAndFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Attribute by Location and Attribute Adds an attribute to a stored location
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <param name="attribute">JSON Model</param>
        /// <returns>StoredLocation</returns>
        public StoredLocation AddAttributeByLocationAndAttribute (int? locationId, int? attributeName, LocationAttribute attribute)
        {
             ApiResponse<StoredLocation> localVarResponse = AddAttributeByLocationAndAttributeWithHttpInfo(locationId, attributeName, attribute);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Attribute by Location and Attribute Adds an attribute to a stored location
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <param name="attribute">JSON Model</param>
        /// <returns>ApiResponse of StoredLocation</returns>
        public ApiResponse< StoredLocation > AddAttributeByLocationAndAttributeWithHttpInfo (int? locationId, int? attributeName, LocationAttribute attribute)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling WorkorderApi->AddAttributeByLocationAndAttribute");
            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new ApiException(400, "Missing required parameter 'attributeName' when calling WorkorderApi->AddAttributeByLocationAndAttribute");
            // verify the required parameter 'attribute' is set
            if (attribute == null)
                throw new ApiException(400, "Missing required parameter 'attribute' when calling WorkorderApi->AddAttributeByLocationAndAttribute");

            var localVarPath = "/locations/{location_id}/attributes/{attribute_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (attributeName != null) localVarPathParams.Add("attribute_name", Configuration.ApiClient.ParameterToString(attributeName)); // path parameter
            if (attribute != null && attribute.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(attribute); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attribute; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAttributeByLocationAndAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoredLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoredLocation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoredLocation)));
        }

        /// <summary>
        /// Add Attribute by Location and Attribute Adds an attribute to a stored location
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <param name="attribute">JSON Model</param>
        /// <returns>Task of StoredLocation</returns>
        public async System.Threading.Tasks.Task<StoredLocation> AddAttributeByLocationAndAttributeAsync (int? locationId, int? attributeName, LocationAttribute attribute)
        {
             ApiResponse<StoredLocation> localVarResponse = await AddAttributeByLocationAndAttributeAsyncWithHttpInfo(locationId, attributeName, attribute);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Attribute by Location and Attribute Adds an attribute to a stored location
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <param name="attribute">JSON Model</param>
        /// <returns>Task of ApiResponse (StoredLocation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StoredLocation>> AddAttributeByLocationAndAttributeAsyncWithHttpInfo (int? locationId, int? attributeName, LocationAttribute attribute)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling WorkorderApi->AddAttributeByLocationAndAttribute");
            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new ApiException(400, "Missing required parameter 'attributeName' when calling WorkorderApi->AddAttributeByLocationAndAttribute");
            // verify the required parameter 'attribute' is set
            if (attribute == null)
                throw new ApiException(400, "Missing required parameter 'attribute' when calling WorkorderApi->AddAttributeByLocationAndAttribute");

            var localVarPath = "/locations/{location_id}/attributes/{attribute_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (attributeName != null) localVarPathParams.Add("attribute_name", Configuration.ApiClient.ParameterToString(attributeName)); // path parameter
            if (attribute != null && attribute.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(attribute); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attribute; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAttributeByLocationAndAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoredLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoredLocation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoredLocation)));
        }

        /// <summary>
        /// Add Bonus by Work Order and Bonus Adds a bonus on a work order which can conditionally increase the amount paid to the provider upon conditions being met
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder AddBonusByWorkOrderAndBonus (int? workOrderId, int? bonusId, PayModifier bonus = null)
        {
             ApiResponse<WorkOrder> localVarResponse = AddBonusByWorkOrderAndBonusWithHttpInfo(workOrderId, bonusId, bonus);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Bonus by Work Order and Bonus Adds a bonus on a work order which can conditionally increase the amount paid to the provider upon conditions being met
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > AddBonusByWorkOrderAndBonusWithHttpInfo (int? workOrderId, int? bonusId, PayModifier bonus = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddBonusByWorkOrderAndBonus");
            // verify the required parameter 'bonusId' is set
            if (bonusId == null)
                throw new ApiException(400, "Missing required parameter 'bonusId' when calling WorkorderApi->AddBonusByWorkOrderAndBonus");

            var localVarPath = "/workorders/{work_order_id}/bonuses/{bonus_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (bonusId != null) localVarPathParams.Add("bonus_id", Configuration.ApiClient.ParameterToString(bonusId)); // path parameter
            if (bonus != null && bonus.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bonus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bonus; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBonusByWorkOrderAndBonus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Bonus by Work Order and Bonus Adds a bonus on a work order which can conditionally increase the amount paid to the provider upon conditions being met
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> AddBonusByWorkOrderAndBonusAsync (int? workOrderId, int? bonusId, PayModifier bonus = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await AddBonusByWorkOrderAndBonusAsyncWithHttpInfo(workOrderId, bonusId, bonus);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Bonus by Work Order and Bonus Adds a bonus on a work order which can conditionally increase the amount paid to the provider upon conditions being met
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddBonusByWorkOrderAndBonusAsyncWithHttpInfo (int? workOrderId, int? bonusId, PayModifier bonus = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddBonusByWorkOrderAndBonus");
            // verify the required parameter 'bonusId' is set
            if (bonusId == null)
                throw new ApiException(400, "Missing required parameter 'bonusId' when calling WorkorderApi->AddBonusByWorkOrderAndBonus");

            var localVarPath = "/workorders/{work_order_id}/bonuses/{bonus_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (bonusId != null) localVarPathParams.Add("bonus_id", Configuration.ApiClient.ParameterToString(bonusId)); // path parameter
            if (bonus != null && bonus.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bonus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bonus; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBonusByWorkOrderAndBonus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Contact by Work Order Adds a contact to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contact">JSON Model</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder AddContactByWorkOrder (int? workOrderId, Contact contact)
        {
             ApiResponse<WorkOrder> localVarResponse = AddContactByWorkOrderWithHttpInfo(workOrderId, contact);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Contact by Work Order Adds a contact to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contact">JSON Model</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > AddContactByWorkOrderWithHttpInfo (int? workOrderId, Contact contact)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddContactByWorkOrder");
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling WorkorderApi->AddContactByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddContactByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Contact by Work Order Adds a contact to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contact">JSON Model</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> AddContactByWorkOrderAsync (int? workOrderId, Contact contact)
        {
             ApiResponse<WorkOrder> localVarResponse = await AddContactByWorkOrderAsyncWithHttpInfo(workOrderId, contact);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Contact by Work Order Adds a contact to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contact">JSON Model</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddContactByWorkOrderAsyncWithHttpInfo (int? workOrderId, Contact contact)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddContactByWorkOrder");
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling WorkorderApi->AddContactByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddContactByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Work Order Discount Assigned provider route to adds and apply a discount to a work order which reduces the amount they will be paid. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="json">Payload of the discount</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder AddDiscountByWorkOrder (int? workOrderId, PayModifier json)
        {
             ApiResponse<WorkOrder> localVarResponse = AddDiscountByWorkOrderWithHttpInfo(workOrderId, json);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Work Order Discount Assigned provider route to adds and apply a discount to a work order which reduces the amount they will be paid. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="json">Payload of the discount</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > AddDiscountByWorkOrderWithHttpInfo (int? workOrderId, PayModifier json)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddDiscountByWorkOrder");
            // verify the required parameter 'json' is set
            if (json == null)
                throw new ApiException(400, "Missing required parameter 'json' when calling WorkorderApi->AddDiscountByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/discounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (json != null && json.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(json); // http body (model) parameter
            }
            else
            {
                localVarPostBody = json; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDiscountByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Work Order Discount Assigned provider route to adds and apply a discount to a work order which reduces the amount they will be paid. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="json">Payload of the discount</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> AddDiscountByWorkOrderAsync (int? workOrderId, PayModifier json)
        {
             ApiResponse<WorkOrder> localVarResponse = await AddDiscountByWorkOrderAsyncWithHttpInfo(workOrderId, json);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Work Order Discount Assigned provider route to adds and apply a discount to a work order which reduces the amount they will be paid. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="json">Payload of the discount</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddDiscountByWorkOrderAsyncWithHttpInfo (int? workOrderId, PayModifier json)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddDiscountByWorkOrder");
            // verify the required parameter 'json' is set
            if (json == null)
                throw new ApiException(400, "Missing required parameter 'json' when calling WorkorderApi->AddDiscountByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/discounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (json != null && json.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(json); // http body (model) parameter
            }
            else
            {
                localVarPostBody = json; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDiscountByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Expense By Work order Adds an expense on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expense">Expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder AddExpenseByWorkOrder (int? workOrderId, Expense expense, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = AddExpenseByWorkOrderWithHttpInfo(workOrderId, expense, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Expense By Work order Adds an expense on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expense">Expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > AddExpenseByWorkOrderWithHttpInfo (int? workOrderId, Expense expense, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddExpenseByWorkOrder");
            // verify the required parameter 'expense' is set
            if (expense == null)
                throw new ApiException(400, "Missing required parameter 'expense' when calling WorkorderApi->AddExpenseByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (expense != null && expense.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(expense); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expense; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExpenseByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Expense By Work order Adds an expense on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expense">Expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> AddExpenseByWorkOrderAsync (int? workOrderId, Expense expense, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await AddExpenseByWorkOrderAsyncWithHttpInfo(workOrderId, expense, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Expense By Work order Adds an expense on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expense">Expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddExpenseByWorkOrderAsyncWithHttpInfo (int? workOrderId, Expense expense, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddExpenseByWorkOrder");
            // verify the required parameter 'expense' is set
            if (expense == null)
                throw new ApiException(400, "Missing required parameter 'expense' when calling WorkorderApi->AddExpenseByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (expense != null && expense.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(expense); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expense; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExpenseByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Folder by Work Order Adds an attachment folder
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folder">Folder</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder AddFolderByWorkOrder (int? workOrderId, AttachmentFolder folder, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = AddFolderByWorkOrderWithHttpInfo(workOrderId, folder, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Folder by Work Order Adds an attachment folder
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folder">Folder</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > AddFolderByWorkOrderWithHttpInfo (int? workOrderId, AttachmentFolder folder, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddFolderByWorkOrder");
            // verify the required parameter 'folder' is set
            if (folder == null)
                throw new ApiException(400, "Missing required parameter 'folder' when calling WorkorderApi->AddFolderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (folder != null && folder.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(folder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = folder; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFolderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Folder by Work Order Adds an attachment folder
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folder">Folder</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> AddFolderByWorkOrderAsync (int? workOrderId, AttachmentFolder folder, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await AddFolderByWorkOrderAsyncWithHttpInfo(workOrderId, folder, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Folder by Work Order Adds an attachment folder
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folder">Folder</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddFolderByWorkOrderAsyncWithHttpInfo (int? workOrderId, AttachmentFolder folder, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddFolderByWorkOrder");
            // verify the required parameter 'folder' is set
            if (folder == null)
                throw new ApiException(400, "Missing required parameter 'folder' when calling WorkorderApi->AddFolderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (folder != null && folder.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(folder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = folder; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFolderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Hold by Work Order and Hold Adds a hold on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="hold">Hold object with updates</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder AddHoldByWorkOrder (int? workOrderId, Hold hold, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = AddHoldByWorkOrderWithHttpInfo(workOrderId, hold, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Hold by Work Order and Hold Adds a hold on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="hold">Hold object with updates</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > AddHoldByWorkOrderWithHttpInfo (int? workOrderId, Hold hold, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddHoldByWorkOrder");
            // verify the required parameter 'hold' is set
            if (hold == null)
                throw new ApiException(400, "Missing required parameter 'hold' when calling WorkorderApi->AddHoldByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/holds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (hold != null && hold.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(hold); // http body (model) parameter
            }
            else
            {
                localVarPostBody = hold; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddHoldByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Hold by Work Order and Hold Adds a hold on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="hold">Hold object with updates</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> AddHoldByWorkOrderAsync (int? workOrderId, Hold hold, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await AddHoldByWorkOrderAsyncWithHttpInfo(workOrderId, hold, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Hold by Work Order and Hold Adds a hold on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="hold">Hold object with updates</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddHoldByWorkOrderAsyncWithHttpInfo (int? workOrderId, Hold hold, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddHoldByWorkOrder");
            // verify the required parameter 'hold' is set
            if (hold == null)
                throw new ApiException(400, "Missing required parameter 'hold' when calling WorkorderApi->AddHoldByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/holds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (hold != null && hold.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(hold); // http body (model) parameter
            }
            else
            {
                localVarPostBody = hold; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddHoldByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Create Increase by Work Order Create pay increase for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increase">Increase structure for update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder AddIncreaseByWorkOrder (int? workOrderId, PayIncrease increase, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = AddIncreaseByWorkOrderWithHttpInfo(workOrderId, increase, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Increase by Work Order Create pay increase for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increase">Increase structure for update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > AddIncreaseByWorkOrderWithHttpInfo (int? workOrderId, PayIncrease increase, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddIncreaseByWorkOrder");
            // verify the required parameter 'increase' is set
            if (increase == null)
                throw new ApiException(400, "Missing required parameter 'increase' when calling WorkorderApi->AddIncreaseByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/increases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (increase != null && increase.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(increase); // http body (model) parameter
            }
            else
            {
                localVarPostBody = increase; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddIncreaseByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Create Increase by Work Order Create pay increase for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increase">Increase structure for update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> AddIncreaseByWorkOrderAsync (int? workOrderId, PayIncrease increase, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await AddIncreaseByWorkOrderAsyncWithHttpInfo(workOrderId, increase, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Increase by Work Order Create pay increase for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increase">Increase structure for update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddIncreaseByWorkOrderAsyncWithHttpInfo (int? workOrderId, PayIncrease increase, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddIncreaseByWorkOrder");
            // verify the required parameter 'increase' is set
            if (increase == null)
                throw new ApiException(400, "Missing required parameter 'increase' when calling WorkorderApi->AddIncreaseByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/increases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (increase != null && increase.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(increase); // http body (model) parameter
            }
            else
            {
                localVarPostBody = increase; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddIncreaseByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Message by Work Order Adds a message to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="json">JSON payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Messages</returns>
        public Messages AddMessageByWorkOrder (int? workOrderId, Message json, bool? async = null)
        {
             ApiResponse<Messages> localVarResponse = AddMessageByWorkOrderWithHttpInfo(workOrderId, json, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Message by Work Order Adds a message to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="json">JSON payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of Messages</returns>
        public ApiResponse< Messages > AddMessageByWorkOrderWithHttpInfo (int? workOrderId, Message json, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddMessageByWorkOrder");
            // verify the required parameter 'json' is set
            if (json == null)
                throw new ApiException(400, "Missing required parameter 'json' when calling WorkorderApi->AddMessageByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (json != null && json.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(json); // http body (model) parameter
            }
            else
            {
                localVarPostBody = json; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMessageByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Messages>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Messages) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Messages)));
        }

        /// <summary>
        /// Add Message by Work Order Adds a message to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="json">JSON payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of Messages</returns>
        public async System.Threading.Tasks.Task<Messages> AddMessageByWorkOrderAsync (int? workOrderId, Message json, bool? async = null)
        {
             ApiResponse<Messages> localVarResponse = await AddMessageByWorkOrderAsyncWithHttpInfo(workOrderId, json, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Message by Work Order Adds a message to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="json">JSON payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (Messages)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Messages>> AddMessageByWorkOrderAsyncWithHttpInfo (int? workOrderId, Message json, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddMessageByWorkOrder");
            // verify the required parameter 'json' is set
            if (json == null)
                throw new ApiException(400, "Missing required parameter 'json' when calling WorkorderApi->AddMessageByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (json != null && json.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(json); // http body (model) parameter
            }
            else
            {
                localVarPostBody = json; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMessageByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Messages>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Messages) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Messages)));
        }

        /// <summary>
        /// Add Penalty by Work Order and Penalty Adds a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <param name="penalty">Penalty (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder AddPenaltyByWorkOrderAndPenalty (int? workOrderId, int? penaltyId, PayModifier penalty = null)
        {
             ApiResponse<WorkOrder> localVarResponse = AddPenaltyByWorkOrderAndPenaltyWithHttpInfo(workOrderId, penaltyId, penalty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Penalty by Work Order and Penalty Adds a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <param name="penalty">Penalty (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > AddPenaltyByWorkOrderAndPenaltyWithHttpInfo (int? workOrderId, int? penaltyId, PayModifier penalty = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddPenaltyByWorkOrderAndPenalty");
            // verify the required parameter 'penaltyId' is set
            if (penaltyId == null)
                throw new ApiException(400, "Missing required parameter 'penaltyId' when calling WorkorderApi->AddPenaltyByWorkOrderAndPenalty");

            var localVarPath = "/workorders/{work_order_id}/penalties/{penalty_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (penaltyId != null) localVarPathParams.Add("penalty_id", Configuration.ApiClient.ParameterToString(penaltyId)); // path parameter
            if (penalty != null && penalty.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(penalty); // http body (model) parameter
            }
            else
            {
                localVarPostBody = penalty; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPenaltyByWorkOrderAndPenalty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Penalty by Work Order and Penalty Adds a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <param name="penalty">Penalty (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> AddPenaltyByWorkOrderAndPenaltyAsync (int? workOrderId, int? penaltyId, PayModifier penalty = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await AddPenaltyByWorkOrderAndPenaltyAsyncWithHttpInfo(workOrderId, penaltyId, penalty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Penalty by Work Order and Penalty Adds a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <param name="penalty">Penalty (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddPenaltyByWorkOrderAndPenaltyAsyncWithHttpInfo (int? workOrderId, int? penaltyId, PayModifier penalty = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddPenaltyByWorkOrderAndPenalty");
            // verify the required parameter 'penaltyId' is set
            if (penaltyId == null)
                throw new ApiException(400, "Missing required parameter 'penaltyId' when calling WorkorderApi->AddPenaltyByWorkOrderAndPenalty");

            var localVarPath = "/workorders/{work_order_id}/penalties/{penalty_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (penaltyId != null) localVarPathParams.Add("penalty_id", Configuration.ApiClient.ParameterToString(penaltyId)); // path parameter
            if (penalty != null && penalty.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(penalty); // http body (model) parameter
            }
            else
            {
                localVarPostBody = penalty; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPenaltyByWorkOrderAndPenalty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Problem by Work Order Reports a problem on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problem">Problem</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder AddProblemByWorkOrder (int? workOrderId, Problem problem, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = AddProblemByWorkOrderWithHttpInfo(workOrderId, problem, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Problem by Work Order Reports a problem on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problem">Problem</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > AddProblemByWorkOrderWithHttpInfo (int? workOrderId, Problem problem, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddProblemByWorkOrder");
            // verify the required parameter 'problem' is set
            if (problem == null)
                throw new ApiException(400, "Missing required parameter 'problem' when calling WorkorderApi->AddProblemByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/problems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (problem != null && problem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(problem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = problem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProblemByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Problem by Work Order Reports a problem on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problem">Problem</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> AddProblemByWorkOrderAsync (int? workOrderId, Problem problem, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await AddProblemByWorkOrderAsyncWithHttpInfo(workOrderId, problem, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Problem by Work Order Reports a problem on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problem">Problem</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddProblemByWorkOrderAsyncWithHttpInfo (int? workOrderId, Problem problem, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddProblemByWorkOrder");
            // verify the required parameter 'problem' is set
            if (problem == null)
                throw new ApiException(400, "Missing required parameter 'problem' when calling WorkorderApi->AddProblemByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/problems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (problem != null && problem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(problem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = problem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProblemByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Qualification by Work Order Add qualification for work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualifications">Qualification information</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder AddQualificationByWorkOrder (int? workOrderId, Qualifications qualifications)
        {
             ApiResponse<WorkOrder> localVarResponse = AddQualificationByWorkOrderWithHttpInfo(workOrderId, qualifications);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Qualification by Work Order Add qualification for work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualifications">Qualification information</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > AddQualificationByWorkOrderWithHttpInfo (int? workOrderId, Qualifications qualifications)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddQualificationByWorkOrder");
            // verify the required parameter 'qualifications' is set
            if (qualifications == null)
                throw new ApiException(400, "Missing required parameter 'qualifications' when calling WorkorderApi->AddQualificationByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/qualifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (qualifications != null && qualifications.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(qualifications); // http body (model) parameter
            }
            else
            {
                localVarPostBody = qualifications; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddQualificationByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Qualification by Work Order Add qualification for work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualifications">Qualification information</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> AddQualificationByWorkOrderAsync (int? workOrderId, Qualifications qualifications)
        {
             ApiResponse<WorkOrder> localVarResponse = await AddQualificationByWorkOrderAsyncWithHttpInfo(workOrderId, qualifications);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Qualification by Work Order Add qualification for work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualifications">Qualification information</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddQualificationByWorkOrderAsyncWithHttpInfo (int? workOrderId, Qualifications qualifications)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddQualificationByWorkOrder");
            // verify the required parameter 'qualifications' is set
            if (qualifications == null)
                throw new ApiException(400, "Missing required parameter 'qualifications' when calling WorkorderApi->AddQualificationByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/qualifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (qualifications != null && qualifications.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(qualifications); // http body (model) parameter
            }
            else
            {
                localVarPostBody = qualifications; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddQualificationByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Shipment by Work Order Adds a shipment to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder AddShipmentByWorkOrder (int? workOrderId, Shipment shipment, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = AddShipmentByWorkOrderWithHttpInfo(workOrderId, shipment, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Shipment by Work Order Adds a shipment to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > AddShipmentByWorkOrderWithHttpInfo (int? workOrderId, Shipment shipment, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddShipmentByWorkOrder");
            // verify the required parameter 'shipment' is set
            if (shipment == null)
                throw new ApiException(400, "Missing required parameter 'shipment' when calling WorkorderApi->AddShipmentByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/shipments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (shipment != null && shipment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(shipment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shipment; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddShipmentByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Shipment by Work Order Adds a shipment to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> AddShipmentByWorkOrderAsync (int? workOrderId, Shipment shipment, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await AddShipmentByWorkOrderAsyncWithHttpInfo(workOrderId, shipment, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Shipment by Work Order Adds a shipment to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddShipmentByWorkOrderAsyncWithHttpInfo (int? workOrderId, Shipment shipment, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddShipmentByWorkOrder");
            // verify the required parameter 'shipment' is set
            if (shipment == null)
                throw new ApiException(400, "Missing required parameter 'shipment' when calling WorkorderApi->AddShipmentByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/shipments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (shipment != null && shipment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(shipment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shipment; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddShipmentByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Signature by Work Order Add signature by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signature">Signature JSON</param>
        /// <param name="async">async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder AddSignatureByWorkOrder (int? workOrderId, Signature signature, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = AddSignatureByWorkOrderWithHttpInfo(workOrderId, signature, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Signature by Work Order Add signature by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signature">Signature JSON</param>
        /// <param name="async">async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > AddSignatureByWorkOrderWithHttpInfo (int? workOrderId, Signature signature, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddSignatureByWorkOrder");
            // verify the required parameter 'signature' is set
            if (signature == null)
                throw new ApiException(400, "Missing required parameter 'signature' when calling WorkorderApi->AddSignatureByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/signatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (signature != null && signature.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signature); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signature; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSignatureByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Signature by Work Order Add signature by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signature">Signature JSON</param>
        /// <param name="async">async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> AddSignatureByWorkOrderAsync (int? workOrderId, Signature signature, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await AddSignatureByWorkOrderAsyncWithHttpInfo(workOrderId, signature, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Signature by Work Order Add signature by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signature">Signature JSON</param>
        /// <param name="async">async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddSignatureByWorkOrderAsyncWithHttpInfo (int? workOrderId, Signature signature, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddSignatureByWorkOrder");
            // verify the required parameter 'signature' is set
            if (signature == null)
                throw new ApiException(400, "Missing required parameter 'signature' when calling WorkorderApi->AddSignatureByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/signatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (signature != null && signature.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signature); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signature; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSignatureByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Swap by Work Order Requests a provider swap for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swap">Swap</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder AddSwapByWorkOrder (int? workOrderId, Swap swap)
        {
             ApiResponse<WorkOrder> localVarResponse = AddSwapByWorkOrderWithHttpInfo(workOrderId, swap);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Swap by Work Order Requests a provider swap for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swap">Swap</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > AddSwapByWorkOrderWithHttpInfo (int? workOrderId, Swap swap)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddSwapByWorkOrder");
            // verify the required parameter 'swap' is set
            if (swap == null)
                throw new ApiException(400, "Missing required parameter 'swap' when calling WorkorderApi->AddSwapByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/swaps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (swap != null && swap.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(swap); // http body (model) parameter
            }
            else
            {
                localVarPostBody = swap; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSwapByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Swap by Work Order Requests a provider swap for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swap">Swap</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> AddSwapByWorkOrderAsync (int? workOrderId, Swap swap)
        {
             ApiResponse<WorkOrder> localVarResponse = await AddSwapByWorkOrderAsyncWithHttpInfo(workOrderId, swap);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Swap by Work Order Requests a provider swap for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swap">Swap</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddSwapByWorkOrderAsyncWithHttpInfo (int? workOrderId, Swap swap)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddSwapByWorkOrder");
            // verify the required parameter 'swap' is set
            if (swap == null)
                throw new ApiException(400, "Missing required parameter 'swap' when calling WorkorderApi->AddSwapByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/swaps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (swap != null && swap.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(swap); // http body (model) parameter
            }
            else
            {
                localVarPostBody = swap; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSwapByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Tag Adds a tag to a company for selection on a work order basis
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Tag</returns>
        public Tag AddTag (Tag tag, bool? async = null)
        {
             ApiResponse<Tag> localVarResponse = AddTagWithHttpInfo(tag, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Tag Adds a tag to a company for selection on a work order basis
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        public ApiResponse< Tag > AddTagWithHttpInfo (Tag tag, bool? async = null)
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling WorkorderApi->AddTag");

            var localVarPath = "/company/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (tag != null && tag.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tag); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tag; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
        }

        /// <summary>
        /// Add Tag Adds a tag to a company for selection on a work order basis
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> AddTagAsync (Tag tag, bool? async = null)
        {
             ApiResponse<Tag> localVarResponse = await AddTagAsyncWithHttpInfo(tag, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Tag Adds a tag to a company for selection on a work order basis
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tag>> AddTagAsyncWithHttpInfo (Tag tag, bool? async = null)
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling WorkorderApi->AddTag");

            var localVarPath = "/company/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (tag != null && tag.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tag); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tag; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
        }

        /// <summary>
        /// Add Tag by Work Order Adds a tag to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <param name="noModelUpdate">Supress the model update return (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder AddTagByWorkOrder (int? workOrderId, Tag tag, bool? async = null, bool? noModelUpdate = null)
        {
             ApiResponse<WorkOrder> localVarResponse = AddTagByWorkOrderWithHttpInfo(workOrderId, tag, async, noModelUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Tag by Work Order Adds a tag to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <param name="noModelUpdate">Supress the model update return (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > AddTagByWorkOrderWithHttpInfo (int? workOrderId, Tag tag, bool? async = null, bool? noModelUpdate = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddTagByWorkOrder");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling WorkorderApi->AddTagByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (noModelUpdate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_no_model_update", noModelUpdate)); // query parameter
            if (tag != null && tag.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tag); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tag; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTagByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Tag by Work Order Adds a tag to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <param name="noModelUpdate">Supress the model update return (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> AddTagByWorkOrderAsync (int? workOrderId, Tag tag, bool? async = null, bool? noModelUpdate = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await AddTagByWorkOrderAsyncWithHttpInfo(workOrderId, tag, async, noModelUpdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Tag by Work Order Adds a tag to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <param name="noModelUpdate">Supress the model update return (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddTagByWorkOrderAsyncWithHttpInfo (int? workOrderId, Tag tag, bool? async = null, bool? noModelUpdate = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddTagByWorkOrder");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling WorkorderApi->AddTagByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (noModelUpdate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_no_model_update", noModelUpdate)); // query parameter
            if (tag != null && tag.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tag); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tag; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTagByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Task by Work Order Adds a task to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="task">JSON Model</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder AddTaskByWorkOrder (int? workOrderId, Task task)
        {
             ApiResponse<WorkOrder> localVarResponse = AddTaskByWorkOrderWithHttpInfo(workOrderId, task);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Task by Work Order Adds a task to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="task">JSON Model</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > AddTaskByWorkOrderWithHttpInfo (int? workOrderId, Task task)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddTaskByWorkOrder");
            // verify the required parameter 'task' is set
            if (task == null)
                throw new ApiException(400, "Missing required parameter 'task' when calling WorkorderApi->AddTaskByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (task != null && task.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(task); // http body (model) parameter
            }
            else
            {
                localVarPostBody = task; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTaskByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Task by Work Order Adds a task to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="task">JSON Model</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> AddTaskByWorkOrderAsync (int? workOrderId, Task task)
        {
             ApiResponse<WorkOrder> localVarResponse = await AddTaskByWorkOrderAsyncWithHttpInfo(workOrderId, task);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Task by Work Order Adds a task to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="task">JSON Model</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddTaskByWorkOrderAsyncWithHttpInfo (int? workOrderId, Task task)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddTaskByWorkOrder");
            // verify the required parameter 'task' is set
            if (task == null)
                throw new ApiException(400, "Missing required parameter 'task' when calling WorkorderApi->AddTaskByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (task != null && task.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(task); // http body (model) parameter
            }
            else
            {
                localVarPostBody = task; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTaskByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Time Log by Work Order Add time log for work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="timeLog">Check in information</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder AddTimeLogByWorkOrder (int? workOrderId, TimeLog timeLog)
        {
             ApiResponse<WorkOrder> localVarResponse = AddTimeLogByWorkOrderWithHttpInfo(workOrderId, timeLog);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Time Log by Work Order Add time log for work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="timeLog">Check in information</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > AddTimeLogByWorkOrderWithHttpInfo (int? workOrderId, TimeLog timeLog)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddTimeLogByWorkOrder");
            // verify the required parameter 'timeLog' is set
            if (timeLog == null)
                throw new ApiException(400, "Missing required parameter 'timeLog' when calling WorkorderApi->AddTimeLogByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/time_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (timeLog != null && timeLog.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(timeLog); // http body (model) parameter
            }
            else
            {
                localVarPostBody = timeLog; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTimeLogByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Time Log by Work Order Add time log for work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="timeLog">Check in information</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> AddTimeLogByWorkOrderAsync (int? workOrderId, TimeLog timeLog)
        {
             ApiResponse<WorkOrder> localVarResponse = await AddTimeLogByWorkOrderAsyncWithHttpInfo(workOrderId, timeLog);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Time Log by Work Order Add time log for work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="timeLog">Check in information</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddTimeLogByWorkOrderAsyncWithHttpInfo (int? workOrderId, TimeLog timeLog)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AddTimeLogByWorkOrder");
            // verify the required parameter 'timeLog' is set
            if (timeLog == null)
                throw new ApiException(400, "Missing required parameter 'timeLog' when calling WorkorderApi->AddTimeLogByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/time_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (timeLog != null && timeLog.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(timeLog); // http body (model) parameter
            }
            else
            {
                localVarPostBody = timeLog; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTimeLogByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Work Order Create a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrder">Work order</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder AddWorkOrder (WorkOrder workOrder)
        {
             ApiResponse<WorkOrder> localVarResponse = AddWorkOrderWithHttpInfo(workOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Work Order Create a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrder">Work order</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > AddWorkOrderWithHttpInfo (WorkOrder workOrder)
        {
            // verify the required parameter 'workOrder' is set
            if (workOrder == null)
                throw new ApiException(400, "Missing required parameter 'workOrder' when calling WorkorderApi->AddWorkOrder");

            var localVarPath = "/workorders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrder != null && workOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(workOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workOrder; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Add Work Order Create a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrder">Work order</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> AddWorkOrderAsync (WorkOrder workOrder)
        {
             ApiResponse<WorkOrder> localVarResponse = await AddWorkOrderAsyncWithHttpInfo(workOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Work Order Create a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrder">Work order</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> AddWorkOrderAsyncWithHttpInfo (WorkOrder workOrder)
        {
            // verify the required parameter 'workOrder' is set
            if (workOrder == null)
                throw new ApiException(400, "Missing required parameter 'workOrder' when calling WorkorderApi->AddWorkOrder");

            var localVarPath = "/workorders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrder != null && workOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(workOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workOrder; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Approve Work Order By Work Order Approves a completed work order and moves it to paid status
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder ApproveWorkOrderByWorkOrder (int? workOrderId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = ApproveWorkOrderByWorkOrderWithHttpInfo(workOrderId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Approve Work Order By Work Order Approves a completed work order and moves it to paid status
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > ApproveWorkOrderByWorkOrderWithHttpInfo (int? workOrderId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->ApproveWorkOrderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/approve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApproveWorkOrderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Approve Work Order By Work Order Approves a completed work order and moves it to paid status
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> ApproveWorkOrderByWorkOrderAsync (int? workOrderId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await ApproveWorkOrderByWorkOrderAsyncWithHttpInfo(workOrderId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Approve Work Order By Work Order Approves a completed work order and moves it to paid status
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> ApproveWorkOrderByWorkOrderAsyncWithHttpInfo (int? workOrderId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->ApproveWorkOrderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/approve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApproveWorkOrderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Assign User by Work Order Assign a user to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="assignee">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns></returns>
        public void AssignUserByWorkOrder (int? workOrderId, Assignee assignee, bool? async = null)
        {
             AssignUserByWorkOrderWithHttpInfo(workOrderId, assignee, async);
        }

        /// <summary>
        /// Assign User by Work Order Assign a user to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="assignee">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssignUserByWorkOrderWithHttpInfo (int? workOrderId, Assignee assignee, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AssignUserByWorkOrder");
            // verify the required parameter 'assignee' is set
            if (assignee == null)
                throw new ApiException(400, "Missing required parameter 'assignee' when calling WorkorderApi->AssignUserByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/assignee";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (assignee != null && assignee.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(assignee); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignee; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignUserByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Assign User by Work Order Assign a user to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="assignee">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssignUserByWorkOrderAsync (int? workOrderId, Assignee assignee, bool? async = null)
        {
             await AssignUserByWorkOrderAsyncWithHttpInfo(workOrderId, assignee, async);

        }

        /// <summary>
        /// Assign User by Work Order Assign a user to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="assignee">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssignUserByWorkOrderAsyncWithHttpInfo (int? workOrderId, Assignee assignee, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->AssignUserByWorkOrder");
            // verify the required parameter 'assignee' is set
            if (assignee == null)
                throw new ApiException(400, "Missing required parameter 'assignee' when calling WorkorderApi->AssignUserByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/assignee";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (assignee != null && assignee.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(assignee); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignee; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignUserByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Auto Dispatch Work Orders Auto-dispatches one or more draft work orders
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoDispatch"></param>
        /// <returns></returns>
        public void AutoDispatchWorkOrders (AutoDispatch autoDispatch)
        {
             AutoDispatchWorkOrdersWithHttpInfo(autoDispatch);
        }

        /// <summary>
        /// Auto Dispatch Work Orders Auto-dispatches one or more draft work orders
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoDispatch"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AutoDispatchWorkOrdersWithHttpInfo (AutoDispatch autoDispatch)
        {
            // verify the required parameter 'autoDispatch' is set
            if (autoDispatch == null)
                throw new ApiException(400, "Missing required parameter 'autoDispatch' when calling WorkorderApi->AutoDispatchWorkOrders");

            var localVarPath = "/workorders/auto_dispatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (autoDispatch != null && autoDispatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(autoDispatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoDispatch; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoDispatchWorkOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Auto Dispatch Work Orders Auto-dispatches one or more draft work orders
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoDispatch"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AutoDispatchWorkOrdersAsync (AutoDispatch autoDispatch)
        {
             await AutoDispatchWorkOrdersAsyncWithHttpInfo(autoDispatch);

        }

        /// <summary>
        /// Auto Dispatch Work Orders Auto-dispatches one or more draft work orders
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoDispatch"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AutoDispatchWorkOrdersAsyncWithHttpInfo (AutoDispatch autoDispatch)
        {
            // verify the required parameter 'autoDispatch' is set
            if (autoDispatch == null)
                throw new ApiException(400, "Missing required parameter 'autoDispatch' when calling WorkorderApi->AutoDispatchWorkOrders");

            var localVarPath = "/workorders/auto_dispatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (autoDispatch != null && autoDispatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(autoDispatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoDispatch; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoDispatchWorkOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel Swap Request Cancel work order swap request.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>SwapResponse</returns>
        public SwapResponse CancelSwapRequest (int? workOrderId, int? swapRequestId)
        {
             ApiResponse<SwapResponse> localVarResponse = CancelSwapRequestWithHttpInfo(workOrderId, swapRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Swap Request Cancel work order swap request.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>ApiResponse of SwapResponse</returns>
        public ApiResponse< SwapResponse > CancelSwapRequestWithHttpInfo (int? workOrderId, int? swapRequestId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->CancelSwapRequest");
            // verify the required parameter 'swapRequestId' is set
            if (swapRequestId == null)
                throw new ApiException(400, "Missing required parameter 'swapRequestId' when calling WorkorderApi->CancelSwapRequest");

            var localVarPath = "/workorders/{work_order_id}/swaps/{swap_request_id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (swapRequestId != null) localVarPathParams.Add("swap_request_id", Configuration.ApiClient.ParameterToString(swapRequestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSwapRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwapResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SwapResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwapResponse)));
        }

        /// <summary>
        /// Cancel Swap Request Cancel work order swap request.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>Task of SwapResponse</returns>
        public async System.Threading.Tasks.Task<SwapResponse> CancelSwapRequestAsync (int? workOrderId, int? swapRequestId)
        {
             ApiResponse<SwapResponse> localVarResponse = await CancelSwapRequestAsyncWithHttpInfo(workOrderId, swapRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel Swap Request Cancel work order swap request.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>Task of ApiResponse (SwapResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SwapResponse>> CancelSwapRequestAsyncWithHttpInfo (int? workOrderId, int? swapRequestId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->CancelSwapRequest");
            // verify the required parameter 'swapRequestId' is set
            if (swapRequestId == null)
                throw new ApiException(400, "Missing required parameter 'swapRequestId' when calling WorkorderApi->CancelSwapRequest");

            var localVarPath = "/workorders/{work_order_id}/swaps/{swap_request_id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (swapRequestId != null) localVarPathParams.Add("swap_request_id", Configuration.ApiClient.ParameterToString(swapRequestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSwapRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwapResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SwapResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwapResponse)));
        }

        /// <summary>
        /// Complete Work Order By Work Order Marks a work order complete and moves it to work done status
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder CompleteWorkOrderByWorkOrder (int? workOrderId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = CompleteWorkOrderByWorkOrderWithHttpInfo(workOrderId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Complete Work Order By Work Order Marks a work order complete and moves it to work done status
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > CompleteWorkOrderByWorkOrderWithHttpInfo (int? workOrderId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->CompleteWorkOrderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteWorkOrderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Complete Work Order By Work Order Marks a work order complete and moves it to work done status
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> CompleteWorkOrderByWorkOrderAsync (int? workOrderId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await CompleteWorkOrderByWorkOrderAsyncWithHttpInfo(workOrderId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Complete Work Order By Work Order Marks a work order complete and moves it to work done status
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> CompleteWorkOrderByWorkOrderAsyncWithHttpInfo (int? workOrderId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->CompleteWorkOrderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteWorkOrderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Decline by Work Order Decline a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder DeclineByWorkOrder (int? workOrderId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = DeclineByWorkOrderWithHttpInfo(workOrderId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Decline by Work Order Decline a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > DeclineByWorkOrderWithHttpInfo (int? workOrderId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeclineByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/declines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeclineByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Decline by Work Order Decline a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> DeclineByWorkOrderAsync (int? workOrderId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await DeclineByWorkOrderAsyncWithHttpInfo(workOrderId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Decline by Work Order Decline a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeclineByWorkOrderAsyncWithHttpInfo (int? workOrderId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeclineByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/declines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeclineByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Decline Request by Work Order and userId Removes or hides a request by a user from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="userId">User id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder DeclineRequestByWorkOrder (int? workOrderId, int? userId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = DeclineRequestByWorkOrderWithHttpInfo(workOrderId, userId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Decline Request by Work Order and userId Removes or hides a request by a user from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="userId">User id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > DeclineRequestByWorkOrderWithHttpInfo (int? workOrderId, int? userId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeclineRequestByWorkOrder");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling WorkorderApi->DeclineRequestByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/declines/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeclineRequestByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Decline Request by Work Order and userId Removes or hides a request by a user from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="userId">User id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> DeclineRequestByWorkOrderAsync (int? workOrderId, int? userId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await DeclineRequestByWorkOrderAsyncWithHttpInfo(workOrderId, userId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Decline Request by Work Order and userId Removes or hides a request by a user from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="userId">User id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeclineRequestByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? userId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeclineRequestByWorkOrder");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling WorkorderApi->DeclineRequestByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/declines/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeclineRequestByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Decline Swap Request Decline work order swap request.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>SwapResponse</returns>
        public SwapResponse DeclineSwapRequest (int? workOrderId, int? swapRequestId)
        {
             ApiResponse<SwapResponse> localVarResponse = DeclineSwapRequestWithHttpInfo(workOrderId, swapRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Decline Swap Request Decline work order swap request.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>ApiResponse of SwapResponse</returns>
        public ApiResponse< SwapResponse > DeclineSwapRequestWithHttpInfo (int? workOrderId, int? swapRequestId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeclineSwapRequest");
            // verify the required parameter 'swapRequestId' is set
            if (swapRequestId == null)
                throw new ApiException(400, "Missing required parameter 'swapRequestId' when calling WorkorderApi->DeclineSwapRequest");

            var localVarPath = "/workorders/{work_order_id}/swaps/{swap_request_id}/decline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (swapRequestId != null) localVarPathParams.Add("swap_request_id", Configuration.ApiClient.ParameterToString(swapRequestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeclineSwapRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwapResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SwapResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwapResponse)));
        }

        /// <summary>
        /// Decline Swap Request Decline work order swap request.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>Task of SwapResponse</returns>
        public async System.Threading.Tasks.Task<SwapResponse> DeclineSwapRequestAsync (int? workOrderId, int? swapRequestId)
        {
             ApiResponse<SwapResponse> localVarResponse = await DeclineSwapRequestAsyncWithHttpInfo(workOrderId, swapRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Decline Swap Request Decline work order swap request.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapRequestId">ID of swap request</param>
        /// <returns>Task of ApiResponse (SwapResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SwapResponse>> DeclineSwapRequestAsyncWithHttpInfo (int? workOrderId, int? swapRequestId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeclineSwapRequest");
            // verify the required parameter 'swapRequestId' is set
            if (swapRequestId == null)
                throw new ApiException(400, "Missing required parameter 'swapRequestId' when calling WorkorderApi->DeclineSwapRequest");

            var localVarPath = "/workorders/{work_order_id}/swaps/{swap_request_id}/decline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (swapRequestId != null) localVarPathParams.Add("swap_request_id", Configuration.ApiClient.ParameterToString(swapRequestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeclineSwapRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwapResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SwapResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwapResponse)));
        }

        /// <summary>
        /// Delete Attachment by Work Order and Folder and Attachment Deletes an attachment folder and its contents
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder DeleteAttachmentByWorkOrderAndFolderAndAttachment (int? workOrderId, int? folderId, int? attachmentId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = DeleteAttachmentByWorkOrderAndFolderAndAttachmentWithHttpInfo(workOrderId, folderId, attachmentId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Attachment by Work Order and Folder and Attachment Deletes an attachment folder and its contents
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > DeleteAttachmentByWorkOrderAndFolderAndAttachmentWithHttpInfo (int? workOrderId, int? folderId, int? attachmentId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteAttachmentByWorkOrderAndFolderAndAttachment");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkorderApi->DeleteAttachmentByWorkOrderAndFolderAndAttachment");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling WorkorderApi->DeleteAttachmentByWorkOrderAndFolderAndAttachment");

            var localVarPath = "/workorders/{work_order_id}/attachments/{folder_id}/{attachment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folder_id", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachment_id", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAttachmentByWorkOrderAndFolderAndAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Attachment by Work Order and Folder and Attachment Deletes an attachment folder and its contents
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> DeleteAttachmentByWorkOrderAndFolderAndAttachmentAsync (int? workOrderId, int? folderId, int? attachmentId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await DeleteAttachmentByWorkOrderAndFolderAndAttachmentAsyncWithHttpInfo(workOrderId, folderId, attachmentId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Attachment by Work Order and Folder and Attachment Deletes an attachment folder and its contents
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteAttachmentByWorkOrderAndFolderAndAttachmentAsyncWithHttpInfo (int? workOrderId, int? folderId, int? attachmentId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteAttachmentByWorkOrderAndFolderAndAttachment");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkorderApi->DeleteAttachmentByWorkOrderAndFolderAndAttachment");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling WorkorderApi->DeleteAttachmentByWorkOrderAndFolderAndAttachment");

            var localVarPath = "/workorders/{work_order_id}/attachments/{folder_id}/{attachment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folder_id", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachment_id", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAttachmentByWorkOrderAndFolderAndAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Attribute by Location and Attribute Delete an attribute from a stored location
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <returns>StoredLocation</returns>
        public StoredLocation DeleteAttributeByLocationAndAttribute (int? locationId, int? attributeName)
        {
             ApiResponse<StoredLocation> localVarResponse = DeleteAttributeByLocationAndAttributeWithHttpInfo(locationId, attributeName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Attribute by Location and Attribute Delete an attribute from a stored location
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <returns>ApiResponse of StoredLocation</returns>
        public ApiResponse< StoredLocation > DeleteAttributeByLocationAndAttributeWithHttpInfo (int? locationId, int? attributeName)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling WorkorderApi->DeleteAttributeByLocationAndAttribute");
            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new ApiException(400, "Missing required parameter 'attributeName' when calling WorkorderApi->DeleteAttributeByLocationAndAttribute");

            var localVarPath = "/locations/{location_id}/attributes/{attribute_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (attributeName != null) localVarPathParams.Add("attribute_name", Configuration.ApiClient.ParameterToString(attributeName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAttributeByLocationAndAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoredLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoredLocation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoredLocation)));
        }

        /// <summary>
        /// Delete Attribute by Location and Attribute Delete an attribute from a stored location
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <returns>Task of StoredLocation</returns>
        public async System.Threading.Tasks.Task<StoredLocation> DeleteAttributeByLocationAndAttributeAsync (int? locationId, int? attributeName)
        {
             ApiResponse<StoredLocation> localVarResponse = await DeleteAttributeByLocationAndAttributeAsyncWithHttpInfo(locationId, attributeName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Attribute by Location and Attribute Delete an attribute from a stored location
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <returns>Task of ApiResponse (StoredLocation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StoredLocation>> DeleteAttributeByLocationAndAttributeAsyncWithHttpInfo (int? locationId, int? attributeName)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling WorkorderApi->DeleteAttributeByLocationAndAttribute");
            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new ApiException(400, "Missing required parameter 'attributeName' when calling WorkorderApi->DeleteAttributeByLocationAndAttribute");

            var localVarPath = "/locations/{location_id}/attributes/{attribute_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (attributeName != null) localVarPathParams.Add("attribute_name", Configuration.ApiClient.ParameterToString(attributeName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAttributeByLocationAndAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoredLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoredLocation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoredLocation)));
        }

        /// <summary>
        /// Delete Bonus by Work Order and Bonus Deletes a bonus from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder DeleteBonusByWorkOrderAndBonus (int? workOrderId, int? bonusId)
        {
             ApiResponse<WorkOrder> localVarResponse = DeleteBonusByWorkOrderAndBonusWithHttpInfo(workOrderId, bonusId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Bonus by Work Order and Bonus Deletes a bonus from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > DeleteBonusByWorkOrderAndBonusWithHttpInfo (int? workOrderId, int? bonusId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteBonusByWorkOrderAndBonus");
            // verify the required parameter 'bonusId' is set
            if (bonusId == null)
                throw new ApiException(400, "Missing required parameter 'bonusId' when calling WorkorderApi->DeleteBonusByWorkOrderAndBonus");

            var localVarPath = "/workorders/{work_order_id}/bonuses/{bonus_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (bonusId != null) localVarPathParams.Add("bonus_id", Configuration.ApiClient.ParameterToString(bonusId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBonusByWorkOrderAndBonus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Bonus by Work Order and Bonus Deletes a bonus from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> DeleteBonusByWorkOrderAndBonusAsync (int? workOrderId, int? bonusId)
        {
             ApiResponse<WorkOrder> localVarResponse = await DeleteBonusByWorkOrderAndBonusAsyncWithHttpInfo(workOrderId, bonusId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Bonus by Work Order and Bonus Deletes a bonus from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteBonusByWorkOrderAndBonusAsyncWithHttpInfo (int? workOrderId, int? bonusId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteBonusByWorkOrderAndBonus");
            // verify the required parameter 'bonusId' is set
            if (bonusId == null)
                throw new ApiException(400, "Missing required parameter 'bonusId' when calling WorkorderApi->DeleteBonusByWorkOrderAndBonus");

            var localVarPath = "/workorders/{work_order_id}/bonuses/{bonus_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (bonusId != null) localVarPathParams.Add("bonus_id", Configuration.ApiClient.ParameterToString(bonusId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBonusByWorkOrderAndBonus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Contact by Work Order and Contact Delete a work order contact
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contactId">Contact id</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder DeleteContactByWorkOrderAndContact (int? workOrderId, int? contactId)
        {
             ApiResponse<WorkOrder> localVarResponse = DeleteContactByWorkOrderAndContactWithHttpInfo(workOrderId, contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Contact by Work Order and Contact Delete a work order contact
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contactId">Contact id</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > DeleteContactByWorkOrderAndContactWithHttpInfo (int? workOrderId, int? contactId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteContactByWorkOrderAndContact");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling WorkorderApi->DeleteContactByWorkOrderAndContact");

            var localVarPath = "/workorders/{work_order_id}/contacts/{contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contact_id", Configuration.ApiClient.ParameterToString(contactId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactByWorkOrderAndContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Contact by Work Order and Contact Delete a work order contact
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contactId">Contact id</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> DeleteContactByWorkOrderAndContactAsync (int? workOrderId, int? contactId)
        {
             ApiResponse<WorkOrder> localVarResponse = await DeleteContactByWorkOrderAndContactAsyncWithHttpInfo(workOrderId, contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Contact by Work Order and Contact Delete a work order contact
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contactId">Contact id</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteContactByWorkOrderAndContactAsyncWithHttpInfo (int? workOrderId, int? contactId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteContactByWorkOrderAndContact");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling WorkorderApi->DeleteContactByWorkOrderAndContact");

            var localVarPath = "/workorders/{work_order_id}/contacts/{contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contact_id", Configuration.ApiClient.ParameterToString(contactId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactByWorkOrderAndContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Discount by WorK Order Allows an assigned provider to removes a discount they previously applied from a work order, increasing the amount they will be paid. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="discountId">ID of the discount</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder DeleteDiscountByWorkOrder (int? workOrderId, int? discountId)
        {
             ApiResponse<WorkOrder> localVarResponse = DeleteDiscountByWorkOrderWithHttpInfo(workOrderId, discountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Discount by WorK Order Allows an assigned provider to removes a discount they previously applied from a work order, increasing the amount they will be paid. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="discountId">ID of the discount</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > DeleteDiscountByWorkOrderWithHttpInfo (int? workOrderId, int? discountId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteDiscountByWorkOrder");
            // verify the required parameter 'discountId' is set
            if (discountId == null)
                throw new ApiException(400, "Missing required parameter 'discountId' when calling WorkorderApi->DeleteDiscountByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/discounts/{discount_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (discountId != null) localVarPathParams.Add("discount_id", Configuration.ApiClient.ParameterToString(discountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDiscountByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Discount by WorK Order Allows an assigned provider to removes a discount they previously applied from a work order, increasing the amount they will be paid. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="discountId">ID of the discount</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> DeleteDiscountByWorkOrderAsync (int? workOrderId, int? discountId)
        {
             ApiResponse<WorkOrder> localVarResponse = await DeleteDiscountByWorkOrderAsyncWithHttpInfo(workOrderId, discountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Discount by WorK Order Allows an assigned provider to removes a discount they previously applied from a work order, increasing the amount they will be paid. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="discountId">ID of the discount</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteDiscountByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? discountId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteDiscountByWorkOrder");
            // verify the required parameter 'discountId' is set
            if (discountId == null)
                throw new ApiException(400, "Missing required parameter 'discountId' when calling WorkorderApi->DeleteDiscountByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/discounts/{discount_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (discountId != null) localVarPathParams.Add("discount_id", Configuration.ApiClient.ParameterToString(discountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDiscountByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Expense by Work Order and Expense Delete an expense from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expenseId">ID of expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder DeleteExpenseByWorkOrderAndExpense (int? workOrderId, int? expenseId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = DeleteExpenseByWorkOrderAndExpenseWithHttpInfo(workOrderId, expenseId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Expense by Work Order and Expense Delete an expense from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expenseId">ID of expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > DeleteExpenseByWorkOrderAndExpenseWithHttpInfo (int? workOrderId, int? expenseId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteExpenseByWorkOrderAndExpense");
            // verify the required parameter 'expenseId' is set
            if (expenseId == null)
                throw new ApiException(400, "Missing required parameter 'expenseId' when calling WorkorderApi->DeleteExpenseByWorkOrderAndExpense");

            var localVarPath = "/workorders/{work_order_id}/expenses/{expense_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (expenseId != null) localVarPathParams.Add("expense_id", Configuration.ApiClient.ParameterToString(expenseId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExpenseByWorkOrderAndExpense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Expense by Work Order and Expense Delete an expense from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expenseId">ID of expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> DeleteExpenseByWorkOrderAndExpenseAsync (int? workOrderId, int? expenseId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await DeleteExpenseByWorkOrderAndExpenseAsyncWithHttpInfo(workOrderId, expenseId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Expense by Work Order and Expense Delete an expense from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expenseId">ID of expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteExpenseByWorkOrderAndExpenseAsyncWithHttpInfo (int? workOrderId, int? expenseId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteExpenseByWorkOrderAndExpense");
            // verify the required parameter 'expenseId' is set
            if (expenseId == null)
                throw new ApiException(400, "Missing required parameter 'expenseId' when calling WorkorderApi->DeleteExpenseByWorkOrderAndExpense");

            var localVarPath = "/workorders/{work_order_id}/expenses/{expense_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (expenseId != null) localVarPathParams.Add("expense_id", Configuration.ApiClient.ParameterToString(expenseId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExpenseByWorkOrderAndExpense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Folder by Work Order and Folder Deletes an attachment folder
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder DeleteFolderByWorkOrderAndFolder (int? workOrderId, int? folderId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = DeleteFolderByWorkOrderAndFolderWithHttpInfo(workOrderId, folderId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Folder by Work Order and Folder Deletes an attachment folder
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > DeleteFolderByWorkOrderAndFolderWithHttpInfo (int? workOrderId, int? folderId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteFolderByWorkOrderAndFolder");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkorderApi->DeleteFolderByWorkOrderAndFolder");

            var localVarPath = "/workorders/{work_order_id}/attachments/{folder_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folder_id", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFolderByWorkOrderAndFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Folder by Work Order and Folder Deletes an attachment folder
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> DeleteFolderByWorkOrderAndFolderAsync (int? workOrderId, int? folderId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await DeleteFolderByWorkOrderAndFolderAsyncWithHttpInfo(workOrderId, folderId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Folder by Work Order and Folder Deletes an attachment folder
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteFolderByWorkOrderAndFolderAsyncWithHttpInfo (int? workOrderId, int? folderId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteFolderByWorkOrderAndFolder");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkorderApi->DeleteFolderByWorkOrderAndFolder");

            var localVarPath = "/workorders/{work_order_id}/attachments/{folder_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folder_id", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFolderByWorkOrderAndFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Hold by Work Order and Hold Deletes a hold on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="hold">Hold object</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder DeleteHoldByWorkOrderAndHold (int? workOrderId, int? holdId, Hold hold, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = DeleteHoldByWorkOrderAndHoldWithHttpInfo(workOrderId, holdId, hold, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Hold by Work Order and Hold Deletes a hold on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="hold">Hold object</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > DeleteHoldByWorkOrderAndHoldWithHttpInfo (int? workOrderId, int? holdId, Hold hold, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteHoldByWorkOrderAndHold");
            // verify the required parameter 'holdId' is set
            if (holdId == null)
                throw new ApiException(400, "Missing required parameter 'holdId' when calling WorkorderApi->DeleteHoldByWorkOrderAndHold");
            // verify the required parameter 'hold' is set
            if (hold == null)
                throw new ApiException(400, "Missing required parameter 'hold' when calling WorkorderApi->DeleteHoldByWorkOrderAndHold");

            var localVarPath = "/workorders/{work_order_id}/holds/{hold_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (holdId != null) localVarPathParams.Add("hold_id", Configuration.ApiClient.ParameterToString(holdId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (hold != null && hold.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(hold); // http body (model) parameter
            }
            else
            {
                localVarPostBody = hold; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHoldByWorkOrderAndHold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Hold by Work Order and Hold Deletes a hold on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="hold">Hold object</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> DeleteHoldByWorkOrderAndHoldAsync (int? workOrderId, int? holdId, Hold hold, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await DeleteHoldByWorkOrderAndHoldAsyncWithHttpInfo(workOrderId, holdId, hold, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Hold by Work Order and Hold Deletes a hold on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="hold">Hold object</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteHoldByWorkOrderAndHoldAsyncWithHttpInfo (int? workOrderId, int? holdId, Hold hold, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteHoldByWorkOrderAndHold");
            // verify the required parameter 'holdId' is set
            if (holdId == null)
                throw new ApiException(400, "Missing required parameter 'holdId' when calling WorkorderApi->DeleteHoldByWorkOrderAndHold");
            // verify the required parameter 'hold' is set
            if (hold == null)
                throw new ApiException(400, "Missing required parameter 'hold' when calling WorkorderApi->DeleteHoldByWorkOrderAndHold");

            var localVarPath = "/workorders/{work_order_id}/holds/{hold_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (holdId != null) localVarPathParams.Add("hold_id", Configuration.ApiClient.ParameterToString(holdId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (hold != null && hold.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(hold); // http body (model) parameter
            }
            else
            {
                localVarPostBody = hold; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHoldByWorkOrderAndHold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Increase by Work Order Delete pay increase for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder DeleteIncreaseByWorkOrderAndIncrease (int? workOrderId, int? increaseId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = DeleteIncreaseByWorkOrderAndIncreaseWithHttpInfo(workOrderId, increaseId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Increase by Work Order Delete pay increase for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > DeleteIncreaseByWorkOrderAndIncreaseWithHttpInfo (int? workOrderId, int? increaseId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteIncreaseByWorkOrderAndIncrease");
            // verify the required parameter 'increaseId' is set
            if (increaseId == null)
                throw new ApiException(400, "Missing required parameter 'increaseId' when calling WorkorderApi->DeleteIncreaseByWorkOrderAndIncrease");

            var localVarPath = "/workorders/{work_order_id}/increases/{increase_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (increaseId != null) localVarPathParams.Add("increase_id", Configuration.ApiClient.ParameterToString(increaseId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIncreaseByWorkOrderAndIncrease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Increase by Work Order Delete pay increase for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> DeleteIncreaseByWorkOrderAndIncreaseAsync (int? workOrderId, int? increaseId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await DeleteIncreaseByWorkOrderAndIncreaseAsyncWithHttpInfo(workOrderId, increaseId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Increase by Work Order Delete pay increase for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteIncreaseByWorkOrderAndIncreaseAsyncWithHttpInfo (int? workOrderId, int? increaseId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteIncreaseByWorkOrderAndIncrease");
            // verify the required parameter 'increaseId' is set
            if (increaseId == null)
                throw new ApiException(400, "Missing required parameter 'increaseId' when calling WorkorderApi->DeleteIncreaseByWorkOrderAndIncrease");

            var localVarPath = "/workorders/{work_order_id}/increases/{increase_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (increaseId != null) localVarPathParams.Add("increase_id", Configuration.ApiClient.ParameterToString(increaseId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIncreaseByWorkOrderAndIncrease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Message by Work Order Deletes a message on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder DeleteMessageByWorkOrder (int? workOrderId, int? messageId)
        {
             ApiResponse<WorkOrder> localVarResponse = DeleteMessageByWorkOrderWithHttpInfo(workOrderId, messageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Message by Work Order Deletes a message on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > DeleteMessageByWorkOrderWithHttpInfo (int? workOrderId, int? messageId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteMessageByWorkOrder");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling WorkorderApi->DeleteMessageByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", Configuration.ApiClient.ParameterToString(messageId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Message by Work Order Deletes a message on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> DeleteMessageByWorkOrderAsync (int? workOrderId, int? messageId)
        {
             ApiResponse<WorkOrder> localVarResponse = await DeleteMessageByWorkOrderAsyncWithHttpInfo(workOrderId, messageId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Message by Work Order Deletes a message on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteMessageByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? messageId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteMessageByWorkOrder");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling WorkorderApi->DeleteMessageByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", Configuration.ApiClient.ParameterToString(messageId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Penalty by Work Order and Penalty Removes a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of Work Order</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder DeletePenaltyByWorkOrderAndPenalty (int? workOrderId, int? penaltyId)
        {
             ApiResponse<WorkOrder> localVarResponse = DeletePenaltyByWorkOrderAndPenaltyWithHttpInfo(workOrderId, penaltyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Penalty by Work Order and Penalty Removes a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of Work Order</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > DeletePenaltyByWorkOrderAndPenaltyWithHttpInfo (int? workOrderId, int? penaltyId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeletePenaltyByWorkOrderAndPenalty");
            // verify the required parameter 'penaltyId' is set
            if (penaltyId == null)
                throw new ApiException(400, "Missing required parameter 'penaltyId' when calling WorkorderApi->DeletePenaltyByWorkOrderAndPenalty");

            var localVarPath = "/workorders/{work_order_id}/penalties/{penalty_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (penaltyId != null) localVarPathParams.Add("penalty_id", Configuration.ApiClient.ParameterToString(penaltyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePenaltyByWorkOrderAndPenalty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Penalty by Work Order and Penalty Removes a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of Work Order</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> DeletePenaltyByWorkOrderAndPenaltyAsync (int? workOrderId, int? penaltyId)
        {
             ApiResponse<WorkOrder> localVarResponse = await DeletePenaltyByWorkOrderAndPenaltyAsyncWithHttpInfo(workOrderId, penaltyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Penalty by Work Order and Penalty Removes a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of Work Order</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeletePenaltyByWorkOrderAndPenaltyAsyncWithHttpInfo (int? workOrderId, int? penaltyId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeletePenaltyByWorkOrderAndPenalty");
            // verify the required parameter 'penaltyId' is set
            if (penaltyId == null)
                throw new ApiException(400, "Missing required parameter 'penaltyId' when calling WorkorderApi->DeletePenaltyByWorkOrderAndPenalty");

            var localVarPath = "/workorders/{work_order_id}/penalties/{penalty_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (penaltyId != null) localVarPathParams.Add("penalty_id", Configuration.ApiClient.ParameterToString(penaltyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePenaltyByWorkOrderAndPenalty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete problem by work order Deletes a problem on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder DeleteProblemByWorkOrder (int? workOrderId, int? problemId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = DeleteProblemByWorkOrderWithHttpInfo(workOrderId, problemId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete problem by work order Deletes a problem on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > DeleteProblemByWorkOrderWithHttpInfo (int? workOrderId, int? problemId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteProblemByWorkOrder");
            // verify the required parameter 'problemId' is set
            if (problemId == null)
                throw new ApiException(400, "Missing required parameter 'problemId' when calling WorkorderApi->DeleteProblemByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/problems/{problem_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (problemId != null) localVarPathParams.Add("problem_id", Configuration.ApiClient.ParameterToString(problemId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProblemByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete problem by work order Deletes a problem on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> DeleteProblemByWorkOrderAsync (int? workOrderId, int? problemId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await DeleteProblemByWorkOrderAsyncWithHttpInfo(workOrderId, problemId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete problem by work order Deletes a problem on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteProblemByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? problemId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteProblemByWorkOrder");
            // verify the required parameter 'problemId' is set
            if (problemId == null)
                throw new ApiException(400, "Missing required parameter 'problemId' when calling WorkorderApi->DeleteProblemByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/problems/{problem_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (problemId != null) localVarPathParams.Add("problem_id", Configuration.ApiClient.ParameterToString(problemId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProblemByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Request by Work Order Removes or hides a request by a user from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="requestId">ID of work order request/counter offer</param>
        /// <param name="async">Async (optional)</param>
        /// <returns></returns>
        public void DeleteRequestByWorkOrder (int? workOrderId, int? requestId, bool? async = null)
        {
             DeleteRequestByWorkOrderWithHttpInfo(workOrderId, requestId, async);
        }

        /// <summary>
        /// Delete Request by Work Order Removes or hides a request by a user from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="requestId">ID of work order request/counter offer</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRequestByWorkOrderWithHttpInfo (int? workOrderId, int? requestId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteRequestByWorkOrder");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling WorkorderApi->DeleteRequestByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/requests/{request_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (requestId != null) localVarPathParams.Add("request_id", Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRequestByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Request by Work Order Removes or hides a request by a user from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="requestId">ID of work order request/counter offer</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRequestByWorkOrderAsync (int? workOrderId, int? requestId, bool? async = null)
        {
             await DeleteRequestByWorkOrderAsyncWithHttpInfo(workOrderId, requestId, async);

        }

        /// <summary>
        /// Delete Request by Work Order Removes or hides a request by a user from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="requestId">ID of work order request/counter offer</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRequestByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? requestId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteRequestByWorkOrder");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling WorkorderApi->DeleteRequestByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/requests/{request_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (requestId != null) localVarPathParams.Add("request_id", Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRequestByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Shipment by Work Order and Shipment Deletes a shipment from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipmentId">Shipment id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder DeleteShipmentByWorkOrderAndShipment (int? workOrderId, int? shipmentId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = DeleteShipmentByWorkOrderAndShipmentWithHttpInfo(workOrderId, shipmentId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Shipment by Work Order and Shipment Deletes a shipment from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipmentId">Shipment id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > DeleteShipmentByWorkOrderAndShipmentWithHttpInfo (int? workOrderId, int? shipmentId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteShipmentByWorkOrderAndShipment");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling WorkorderApi->DeleteShipmentByWorkOrderAndShipment");

            var localVarPath = "/workorders/{work_order_id}/shipments/{shipment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteShipmentByWorkOrderAndShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Shipment by Work Order and Shipment Deletes a shipment from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipmentId">Shipment id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> DeleteShipmentByWorkOrderAndShipmentAsync (int? workOrderId, int? shipmentId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await DeleteShipmentByWorkOrderAndShipmentAsyncWithHttpInfo(workOrderId, shipmentId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Shipment by Work Order and Shipment Deletes a shipment from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipmentId">Shipment id</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteShipmentByWorkOrderAndShipmentAsyncWithHttpInfo (int? workOrderId, int? shipmentId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteShipmentByWorkOrderAndShipment");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling WorkorderApi->DeleteShipmentByWorkOrderAndShipment");

            var localVarPath = "/workorders/{work_order_id}/shipments/{shipment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteShipmentByWorkOrderAndShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Signature by Work Order and Signature Delete signature by work order and signature
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signatureId">ID of signature</param>
        /// <param name="async">async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder DeleteSignatureByWorkOrderAndSignature (int? workOrderId, int? signatureId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = DeleteSignatureByWorkOrderAndSignatureWithHttpInfo(workOrderId, signatureId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Signature by Work Order and Signature Delete signature by work order and signature
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signatureId">ID of signature</param>
        /// <param name="async">async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > DeleteSignatureByWorkOrderAndSignatureWithHttpInfo (int? workOrderId, int? signatureId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteSignatureByWorkOrderAndSignature");
            // verify the required parameter 'signatureId' is set
            if (signatureId == null)
                throw new ApiException(400, "Missing required parameter 'signatureId' when calling WorkorderApi->DeleteSignatureByWorkOrderAndSignature");

            var localVarPath = "/workorders/{work_order_id}/signatures/{signature_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (signatureId != null) localVarPathParams.Add("signature_id", Configuration.ApiClient.ParameterToString(signatureId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSignatureByWorkOrderAndSignature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Signature by Work Order and Signature Delete signature by work order and signature
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signatureId">ID of signature</param>
        /// <param name="async">async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> DeleteSignatureByWorkOrderAndSignatureAsync (int? workOrderId, int? signatureId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await DeleteSignatureByWorkOrderAndSignatureAsyncWithHttpInfo(workOrderId, signatureId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Signature by Work Order and Signature Delete signature by work order and signature
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signatureId">ID of signature</param>
        /// <param name="async">async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteSignatureByWorkOrderAndSignatureAsyncWithHttpInfo (int? workOrderId, int? signatureId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteSignatureByWorkOrderAndSignature");
            // verify the required parameter 'signatureId' is set
            if (signatureId == null)
                throw new ApiException(400, "Missing required parameter 'signatureId' when calling WorkorderApi->DeleteSignatureByWorkOrderAndSignature");

            var localVarPath = "/workorders/{work_order_id}/signatures/{signature_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (signatureId != null) localVarPathParams.Add("signature_id", Configuration.ApiClient.ParameterToString(signatureId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSignatureByWorkOrderAndSignature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete tag by work order Deletes a tag on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder DeleteTagByWorkOrderAndTag (int? workOrderId, int? tagId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = DeleteTagByWorkOrderAndTagWithHttpInfo(workOrderId, tagId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete tag by work order Deletes a tag on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > DeleteTagByWorkOrderAndTagWithHttpInfo (int? workOrderId, int? tagId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteTagByWorkOrderAndTag");
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling WorkorderApi->DeleteTagByWorkOrderAndTag");

            var localVarPath = "/workorders/{work_order_id}/tags/{tag_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (tagId != null) localVarPathParams.Add("tag_id", Configuration.ApiClient.ParameterToString(tagId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTagByWorkOrderAndTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete tag by work order Deletes a tag on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> DeleteTagByWorkOrderAndTagAsync (int? workOrderId, int? tagId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await DeleteTagByWorkOrderAndTagAsyncWithHttpInfo(workOrderId, tagId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete tag by work order Deletes a tag on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteTagByWorkOrderAndTagAsyncWithHttpInfo (int? workOrderId, int? tagId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteTagByWorkOrderAndTag");
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling WorkorderApi->DeleteTagByWorkOrderAndTag");

            var localVarPath = "/workorders/{work_order_id}/tags/{tag_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (tagId != null) localVarPathParams.Add("tag_id", Configuration.ApiClient.ParameterToString(tagId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTagByWorkOrderAndTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Task by Work Order Delete a work order&#39;s task
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder DeleteTaskByWorkOrder (int? workOrderId, int? taskId)
        {
             ApiResponse<WorkOrder> localVarResponse = DeleteTaskByWorkOrderWithHttpInfo(workOrderId, taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Task by Work Order Delete a work order&#39;s task
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > DeleteTaskByWorkOrderWithHttpInfo (int? workOrderId, int? taskId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteTaskByWorkOrder");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling WorkorderApi->DeleteTaskByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/tasks/{task_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaskByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Task by Work Order Delete a work order&#39;s task
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> DeleteTaskByWorkOrderAsync (int? workOrderId, int? taskId)
        {
             ApiResponse<WorkOrder> localVarResponse = await DeleteTaskByWorkOrderAsyncWithHttpInfo(workOrderId, taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Task by Work Order Delete a work order&#39;s task
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteTaskByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? taskId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteTaskByWorkOrder");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling WorkorderApi->DeleteTaskByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/tasks/{task_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaskByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Time Log by Work Order Remove time log for assigned work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder DeleteTimeLogByWorkOrder (int? workOrderId, int? workorderHoursId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = DeleteTimeLogByWorkOrderWithHttpInfo(workOrderId, workorderHoursId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Time Log by Work Order Remove time log for assigned work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > DeleteTimeLogByWorkOrderWithHttpInfo (int? workOrderId, int? workorderHoursId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteTimeLogByWorkOrder");
            // verify the required parameter 'workorderHoursId' is set
            if (workorderHoursId == null)
                throw new ApiException(400, "Missing required parameter 'workorderHoursId' when calling WorkorderApi->DeleteTimeLogByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/time_logs/{workorder_hours_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (workorderHoursId != null) localVarPathParams.Add("workorder_hours_id", Configuration.ApiClient.ParameterToString(workorderHoursId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTimeLogByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Time Log by Work Order Remove time log for assigned work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> DeleteTimeLogByWorkOrderAsync (int? workOrderId, int? workorderHoursId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await DeleteTimeLogByWorkOrderAsyncWithHttpInfo(workOrderId, workorderHoursId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Time Log by Work Order Remove time log for assigned work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteTimeLogByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? workorderHoursId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteTimeLogByWorkOrder");
            // verify the required parameter 'workorderHoursId' is set
            if (workorderHoursId == null)
                throw new ApiException(400, "Missing required parameter 'workorderHoursId' when calling WorkorderApi->DeleteTimeLogByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/time_logs/{workorder_hours_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (workorderHoursId != null) localVarPathParams.Add("workorder_hours_id", Configuration.ApiClient.ParameterToString(workorderHoursId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTimeLogByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Work Order by Work Order Deletes a work order by its id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="cancellation">Cancellation reasons</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder DeleteWorkOrderByWorkOrder (int? workOrderId, Cancellation cancellation, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = DeleteWorkOrderByWorkOrderWithHttpInfo(workOrderId, cancellation, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Work Order by Work Order Deletes a work order by its id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="cancellation">Cancellation reasons</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > DeleteWorkOrderByWorkOrderWithHttpInfo (int? workOrderId, Cancellation cancellation, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteWorkOrderByWorkOrder");
            // verify the required parameter 'cancellation' is set
            if (cancellation == null)
                throw new ApiException(400, "Missing required parameter 'cancellation' when calling WorkorderApi->DeleteWorkOrderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (cancellation != null && cancellation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cancellation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cancellation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkOrderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Delete Work Order by Work Order Deletes a work order by its id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="cancellation">Cancellation reasons</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> DeleteWorkOrderByWorkOrderAsync (int? workOrderId, Cancellation cancellation, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await DeleteWorkOrderByWorkOrderAsyncWithHttpInfo(workOrderId, cancellation, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Work Order by Work Order Deletes a work order by its id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="cancellation">Cancellation reasons</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> DeleteWorkOrderByWorkOrderAsyncWithHttpInfo (int? workOrderId, Cancellation cancellation, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->DeleteWorkOrderByWorkOrder");
            // verify the required parameter 'cancellation' is set
            if (cancellation == null)
                throw new ApiException(400, "Missing required parameter 'cancellation' when calling WorkorderApi->DeleteWorkOrderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (cancellation != null && cancellation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cancellation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cancellation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkOrderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Get Assignee by Work Order Get assignee of a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Assignee</returns>
        public Assignee GetAssigneeByWorkOrder (int? workOrderId)
        {
             ApiResponse<Assignee> localVarResponse = GetAssigneeByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Assignee by Work Order Get assignee of a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>ApiResponse of Assignee</returns>
        public ApiResponse< Assignee > GetAssigneeByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetAssigneeByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/assignee";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssigneeByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Assignee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Assignee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Assignee)));
        }

        /// <summary>
        /// Get Assignee by Work Order Get assignee of a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of Assignee</returns>
        public async System.Threading.Tasks.Task<Assignee> GetAssigneeByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<Assignee> localVarResponse = await GetAssigneeByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Assignee by Work Order Get assignee of a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of ApiResponse (Assignee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Assignee>> GetAssigneeByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetAssigneeByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/assignee";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssigneeByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Assignee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Assignee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Assignee)));
        }

        /// <summary>
        /// Get Attachment Conflicts Runs a report for a set of attachment ids, identifying any files corresponding to those ids that were used more than once. The response will include a report for each item with  a status reporting as unique or duplicate and the work order. Duplicate also reports a list of conflicting work order ids. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>AttachmentConflict</returns>
        public AttachmentConflict GetAttachmentConflicts (List<int?> id = null)
        {
             ApiResponse<AttachmentConflict> localVarResponse = GetAttachmentConflictsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Attachment Conflicts Runs a report for a set of attachment ids, identifying any files corresponding to those ids that were used more than once. The response will include a report for each item with  a status reporting as unique or duplicate and the work order. Duplicate also reports a list of conflicting work order ids. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of AttachmentConflict</returns>
        public ApiResponse< AttachmentConflict > GetAttachmentConflictsWithHttpInfo (List<int?> id = null)
        {

            var localVarPath = "/workorders/attachments/conflicts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachmentConflicts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentConflict>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentConflict) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentConflict)));
        }

        /// <summary>
        /// Get Attachment Conflicts Runs a report for a set of attachment ids, identifying any files corresponding to those ids that were used more than once. The response will include a report for each item with  a status reporting as unique or duplicate and the work order. Duplicate also reports a list of conflicting work order ids. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of AttachmentConflict</returns>
        public async System.Threading.Tasks.Task<AttachmentConflict> GetAttachmentConflictsAsync (List<int?> id = null)
        {
             ApiResponse<AttachmentConflict> localVarResponse = await GetAttachmentConflictsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Attachment Conflicts Runs a report for a set of attachment ids, identifying any files corresponding to those ids that were used more than once. The response will include a report for each item with  a status reporting as unique or duplicate and the work order. Duplicate also reports a list of conflicting work order ids. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentConflict)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentConflict>> GetAttachmentConflictsAsyncWithHttpInfo (List<int?> id = null)
        {

            var localVarPath = "/workorders/attachments/conflicts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachmentConflicts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentConflict>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentConflict) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentConflict)));
        }

        /// <summary>
        /// Get Attachments Gets a zip file of deliverables from multiple work orders
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="isFromProject"> (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetAttachments (List<string> workOrderId, int? type = null, bool? isFromProject = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = GetAttachmentsWithHttpInfo(workOrderId, type, isFromProject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Attachments Gets a zip file of deliverables from multiple work orders
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="isFromProject"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > GetAttachmentsWithHttpInfo (List<string> workOrderId, int? type = null, bool? isFromProject = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetAttachments");

            var localVarPath = "/workorders/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (isFromProject != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "is_from_project", isFromProject)); // query parameter
            if (workOrderId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "work_order_id", workOrderId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Get Attachments Gets a zip file of deliverables from multiple work orders
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="isFromProject"> (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> GetAttachmentsAsync (List<string> workOrderId, int? type = null, bool? isFromProject = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await GetAttachmentsAsyncWithHttpInfo(workOrderId, type, isFromProject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Attachments Gets a zip file of deliverables from multiple work orders
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="isFromProject"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetAttachmentsAsyncWithHttpInfo (List<string> workOrderId, int? type = null, bool? isFromProject = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetAttachments");

            var localVarPath = "/workorders/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (isFromProject != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "is_from_project", isFromProject)); // query parameter
            if (workOrderId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "work_order_id", workOrderId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Get Attachments by Work Order Gets a list of attachment folders which contain files and deliverables for the work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>AttachmentFolders</returns>
        public AttachmentFolders GetAttachmentsByWorkOrder (int? workOrderId)
        {
             ApiResponse<AttachmentFolders> localVarResponse = GetAttachmentsByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Attachments by Work Order Gets a list of attachment folders which contain files and deliverables for the work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>ApiResponse of AttachmentFolders</returns>
        public ApiResponse< AttachmentFolders > GetAttachmentsByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetAttachmentsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachmentsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentFolders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentFolders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentFolders)));
        }

        /// <summary>
        /// Get Attachments by Work Order Gets a list of attachment folders which contain files and deliverables for the work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of AttachmentFolders</returns>
        public async System.Threading.Tasks.Task<AttachmentFolders> GetAttachmentsByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<AttachmentFolders> localVarResponse = await GetAttachmentsByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Attachments by Work Order Gets a list of attachment folders which contain files and deliverables for the work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of ApiResponse (AttachmentFolders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentFolders>> GetAttachmentsByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetAttachmentsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachmentsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentFolders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentFolders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentFolders)));
        }

        /// <summary>
        /// Get Bonus by Work Order and Bonus Gets a bonus for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus (optional)</param>
        /// <returns>PayModifier</returns>
        public PayModifier GetBonusByWorkOrderAndBonus (int? workOrderId, int? bonusId, PayModifier bonus = null)
        {
             ApiResponse<PayModifier> localVarResponse = GetBonusByWorkOrderAndBonusWithHttpInfo(workOrderId, bonusId, bonus);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Bonus by Work Order and Bonus Gets a bonus for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus (optional)</param>
        /// <returns>ApiResponse of PayModifier</returns>
        public ApiResponse< PayModifier > GetBonusByWorkOrderAndBonusWithHttpInfo (int? workOrderId, int? bonusId, PayModifier bonus = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetBonusByWorkOrderAndBonus");
            // verify the required parameter 'bonusId' is set
            if (bonusId == null)
                throw new ApiException(400, "Missing required parameter 'bonusId' when calling WorkorderApi->GetBonusByWorkOrderAndBonus");

            var localVarPath = "/workorders/{work_order_id}/bonuses/{bonus_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (bonusId != null) localVarPathParams.Add("bonus_id", Configuration.ApiClient.ParameterToString(bonusId)); // path parameter
            if (bonus != null && bonus.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bonus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bonus; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBonusByWorkOrderAndBonus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayModifier>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PayModifier) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayModifier)));
        }

        /// <summary>
        /// Get Bonus by Work Order and Bonus Gets a bonus for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus (optional)</param>
        /// <returns>Task of PayModifier</returns>
        public async System.Threading.Tasks.Task<PayModifier> GetBonusByWorkOrderAndBonusAsync (int? workOrderId, int? bonusId, PayModifier bonus = null)
        {
             ApiResponse<PayModifier> localVarResponse = await GetBonusByWorkOrderAndBonusAsyncWithHttpInfo(workOrderId, bonusId, bonus);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Bonus by Work Order and Bonus Gets a bonus for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus (optional)</param>
        /// <returns>Task of ApiResponse (PayModifier)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PayModifier>> GetBonusByWorkOrderAndBonusAsyncWithHttpInfo (int? workOrderId, int? bonusId, PayModifier bonus = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetBonusByWorkOrderAndBonus");
            // verify the required parameter 'bonusId' is set
            if (bonusId == null)
                throw new ApiException(400, "Missing required parameter 'bonusId' when calling WorkorderApi->GetBonusByWorkOrderAndBonus");

            var localVarPath = "/workorders/{work_order_id}/bonuses/{bonus_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (bonusId != null) localVarPathParams.Add("bonus_id", Configuration.ApiClient.ParameterToString(bonusId)); // path parameter
            if (bonus != null && bonus.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bonus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bonus; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBonusByWorkOrderAndBonus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayModifier>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PayModifier) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayModifier)));
        }

        /// <summary>
        /// Get Bonuses by Work Order Get a list of available bonuses on a work order that can be applied to increase the amount paid to the provider upon conditions being met
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <returns>PayModifiers</returns>
        public PayModifiers GetBonusesByWorkOrder (int? workOrderId)
        {
             ApiResponse<PayModifiers> localVarResponse = GetBonusesByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Bonuses by Work Order Get a list of available bonuses on a work order that can be applied to increase the amount paid to the provider upon conditions being met
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <returns>ApiResponse of PayModifiers</returns>
        public ApiResponse< PayModifiers > GetBonusesByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetBonusesByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/bonuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBonusesByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayModifiers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PayModifiers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayModifiers)));
        }

        /// <summary>
        /// Get Bonuses by Work Order Get a list of available bonuses on a work order that can be applied to increase the amount paid to the provider upon conditions being met
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <returns>Task of PayModifiers</returns>
        public async System.Threading.Tasks.Task<PayModifiers> GetBonusesByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<PayModifiers> localVarResponse = await GetBonusesByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Bonuses by Work Order Get a list of available bonuses on a work order that can be applied to increase the amount paid to the provider upon conditions being met
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <returns>Task of ApiResponse (PayModifiers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PayModifiers>> GetBonusesByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetBonusesByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/bonuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBonusesByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayModifiers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PayModifiers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayModifiers)));
        }

        /// <summary>
        /// Get Contacts by Work Order Get a list of contacts on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Contacts</returns>
        public Contacts GetContactsByWorkOrder (int? workOrderId)
        {
             ApiResponse<Contacts> localVarResponse = GetContactsByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Contacts by Work Order Get a list of contacts on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>ApiResponse of Contacts</returns>
        public ApiResponse< Contacts > GetContactsByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetContactsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contacts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contacts) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contacts)));
        }

        /// <summary>
        /// Get Contacts by Work Order Get a list of contacts on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of Contacts</returns>
        public async System.Threading.Tasks.Task<Contacts> GetContactsByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<Contacts> localVarResponse = await GetContactsByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Contacts by Work Order Get a list of contacts on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contacts>> GetContactsByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetContactsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contacts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contacts) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contacts)));
        }

        /// <summary>
        /// Get Custom Field By Work Order And Custom Field Get a custom field by work order and custom field
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="customFieldId">Custom field id</param>
        /// <returns>CustomField</returns>
        public CustomField GetCustomFieldByWorkOrderAndCustomField (int? workOrderId, int? customFieldId)
        {
             ApiResponse<CustomField> localVarResponse = GetCustomFieldByWorkOrderAndCustomFieldWithHttpInfo(workOrderId, customFieldId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Custom Field By Work Order And Custom Field Get a custom field by work order and custom field
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="customFieldId">Custom field id</param>
        /// <returns>ApiResponse of CustomField</returns>
        public ApiResponse< CustomField > GetCustomFieldByWorkOrderAndCustomFieldWithHttpInfo (int? workOrderId, int? customFieldId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetCustomFieldByWorkOrderAndCustomField");
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling WorkorderApi->GetCustomFieldByWorkOrderAndCustomField");

            var localVarPath = "/workorders/{work_order_id}/custom_fields/{custom_field_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (customFieldId != null) localVarPathParams.Add("custom_field_id", Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomFieldByWorkOrderAndCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomField>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomField) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomField)));
        }

        /// <summary>
        /// Get Custom Field By Work Order And Custom Field Get a custom field by work order and custom field
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="customFieldId">Custom field id</param>
        /// <returns>Task of CustomField</returns>
        public async System.Threading.Tasks.Task<CustomField> GetCustomFieldByWorkOrderAndCustomFieldAsync (int? workOrderId, int? customFieldId)
        {
             ApiResponse<CustomField> localVarResponse = await GetCustomFieldByWorkOrderAndCustomFieldAsyncWithHttpInfo(workOrderId, customFieldId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Custom Field By Work Order And Custom Field Get a custom field by work order and custom field
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="customFieldId">Custom field id</param>
        /// <returns>Task of ApiResponse (CustomField)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomField>> GetCustomFieldByWorkOrderAndCustomFieldAsyncWithHttpInfo (int? workOrderId, int? customFieldId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetCustomFieldByWorkOrderAndCustomField");
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling WorkorderApi->GetCustomFieldByWorkOrderAndCustomField");

            var localVarPath = "/workorders/{work_order_id}/custom_fields/{custom_field_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (customFieldId != null) localVarPathParams.Add("custom_field_id", Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomFieldByWorkOrderAndCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomField>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomField) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomField)));
        }

        /// <summary>
        /// Get Custom Fields by Work Order Get a list of custom fields and their values for a work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>CustomFields</returns>
        public CustomFields GetCustomFieldsByWorKOrder (int? workOrderId)
        {
             ApiResponse<CustomFields> localVarResponse = GetCustomFieldsByWorKOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Custom Fields by Work Order Get a list of custom fields and their values for a work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of CustomFields</returns>
        public ApiResponse< CustomFields > GetCustomFieldsByWorKOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetCustomFieldsByWorKOrder");

            var localVarPath = "/workorders/{work_order_id}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomFieldsByWorKOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomFields>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomFields) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomFields)));
        }

        /// <summary>
        /// Get Custom Fields by Work Order Get a list of custom fields and their values for a work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of CustomFields</returns>
        public async System.Threading.Tasks.Task<CustomFields> GetCustomFieldsByWorKOrderAsync (int? workOrderId)
        {
             ApiResponse<CustomFields> localVarResponse = await GetCustomFieldsByWorKOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Custom Fields by Work Order Get a list of custom fields and their values for a work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (CustomFields)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomFields>> GetCustomFieldsByWorKOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetCustomFieldsByWorKOrder");

            var localVarPath = "/workorders/{work_order_id}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomFieldsByWorKOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomFields>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomFields) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomFields)));
        }

        /// <summary>
        /// Get Work Order Discounts Returns a list of discounts applied by the assigned provider to reduce the payout of the work order. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>PayModifiers</returns>
        public PayModifiers GetDiscountsByWorkOrder (int? workOrderId)
        {
             ApiResponse<PayModifiers> localVarResponse = GetDiscountsByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Work Order Discounts Returns a list of discounts applied by the assigned provider to reduce the payout of the work order. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of PayModifiers</returns>
        public ApiResponse< PayModifiers > GetDiscountsByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetDiscountsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/discounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDiscountsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayModifiers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PayModifiers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayModifiers)));
        }

        /// <summary>
        /// Get Work Order Discounts Returns a list of discounts applied by the assigned provider to reduce the payout of the work order. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of PayModifiers</returns>
        public async System.Threading.Tasks.Task<PayModifiers> GetDiscountsByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<PayModifiers> localVarResponse = await GetDiscountsByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Work Order Discounts Returns a list of discounts applied by the assigned provider to reduce the payout of the work order. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (PayModifiers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PayModifiers>> GetDiscountsByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetDiscountsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/discounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDiscountsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayModifiers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PayModifiers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayModifiers)));
        }

        /// <summary>
        /// Get ETA by Work Order Gets the eta for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ETA</returns>
        public ETA GetETAByWorkOrder (int? workOrderId)
        {
             ApiResponse<ETA> localVarResponse = GetETAByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get ETA by Work Order Gets the eta for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of ETA</returns>
        public ApiResponse< ETA > GetETAByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetETAByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/eta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetETAByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ETA>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ETA) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ETA)));
        }

        /// <summary>
        /// Get ETA by Work Order Gets the eta for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ETA</returns>
        public async System.Threading.Tasks.Task<ETA> GetETAByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<ETA> localVarResponse = await GetETAByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get ETA by Work Order Gets the eta for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (ETA)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ETA>> GetETAByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetETAByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/eta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetETAByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ETA>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ETA) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ETA)));
        }

        /// <summary>
        /// Get Expenses By Work Order Get all expenses of a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Expenses</returns>
        public Expenses GetExpensesByWorkOrder (int? workOrderId)
        {
             ApiResponse<Expenses> localVarResponse = GetExpensesByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Expenses By Work Order Get all expenses of a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Expenses</returns>
        public ApiResponse< Expenses > GetExpensesByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetExpensesByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExpensesByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Expenses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Expenses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Expenses)));
        }

        /// <summary>
        /// Get Expenses By Work Order Get all expenses of a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Expenses</returns>
        public async System.Threading.Tasks.Task<Expenses> GetExpensesByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<Expenses> localVarResponse = await GetExpensesByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Expenses By Work Order Get all expenses of a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Expenses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Expenses>> GetExpensesByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetExpensesByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExpensesByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Expenses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Expenses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Expenses)));
        }

        /// <summary>
        /// Get File by Work Order and Folder and File Gets an attachment folder and its contents
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <returns>Attachment</returns>
        public Attachment GetFileByWorkOrderAndFolderAndFile (int? workOrderId, int? folderId, int? attachmentId)
        {
             ApiResponse<Attachment> localVarResponse = GetFileByWorkOrderAndFolderAndFileWithHttpInfo(workOrderId, folderId, attachmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get File by Work Order and Folder and File Gets an attachment folder and its contents
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <returns>ApiResponse of Attachment</returns>
        public ApiResponse< Attachment > GetFileByWorkOrderAndFolderAndFileWithHttpInfo (int? workOrderId, int? folderId, int? attachmentId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetFileByWorkOrderAndFolderAndFile");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkorderApi->GetFileByWorkOrderAndFolderAndFile");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling WorkorderApi->GetFileByWorkOrderAndFolderAndFile");

            var localVarPath = "/workorders/{work_order_id}/attachments/{folder_id}/{attachment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folder_id", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachment_id", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFileByWorkOrderAndFolderAndFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Attachment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Attachment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Attachment)));
        }

        /// <summary>
        /// Get File by Work Order and Folder and File Gets an attachment folder and its contents
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <returns>Task of Attachment</returns>
        public async System.Threading.Tasks.Task<Attachment> GetFileByWorkOrderAndFolderAndFileAsync (int? workOrderId, int? folderId, int? attachmentId)
        {
             ApiResponse<Attachment> localVarResponse = await GetFileByWorkOrderAndFolderAndFileAsyncWithHttpInfo(workOrderId, folderId, attachmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get File by Work Order and Folder and File Gets an attachment folder and its contents
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <returns>Task of ApiResponse (Attachment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Attachment>> GetFileByWorkOrderAndFolderAndFileAsyncWithHttpInfo (int? workOrderId, int? folderId, int? attachmentId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetFileByWorkOrderAndFolderAndFile");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkorderApi->GetFileByWorkOrderAndFolderAndFile");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling WorkorderApi->GetFileByWorkOrderAndFolderAndFile");

            var localVarPath = "/workorders/{work_order_id}/attachments/{folder_id}/{attachment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folder_id", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachment_id", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFileByWorkOrderAndFolderAndFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Attachment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Attachment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Attachment)));
        }

        /// <summary>
        /// Get Folder by Work Order and Folder Gets an attachment folder and its contents
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <returns>AttachmentFolder</returns>
        public AttachmentFolder GetFolderByWorkOrderAndFolder (int? workOrderId, int? folderId)
        {
             ApiResponse<AttachmentFolder> localVarResponse = GetFolderByWorkOrderAndFolderWithHttpInfo(workOrderId, folderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Folder by Work Order and Folder Gets an attachment folder and its contents
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <returns>ApiResponse of AttachmentFolder</returns>
        public ApiResponse< AttachmentFolder > GetFolderByWorkOrderAndFolderWithHttpInfo (int? workOrderId, int? folderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetFolderByWorkOrderAndFolder");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkorderApi->GetFolderByWorkOrderAndFolder");

            var localVarPath = "/workorders/{work_order_id}/attachments/{folder_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folder_id", Configuration.ApiClient.ParameterToString(folderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFolderByWorkOrderAndFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentFolder)));
        }

        /// <summary>
        /// Get Folder by Work Order and Folder Gets an attachment folder and its contents
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <returns>Task of AttachmentFolder</returns>
        public async System.Threading.Tasks.Task<AttachmentFolder> GetFolderByWorkOrderAndFolderAsync (int? workOrderId, int? folderId)
        {
             ApiResponse<AttachmentFolder> localVarResponse = await GetFolderByWorkOrderAndFolderAsyncWithHttpInfo(workOrderId, folderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Folder by Work Order and Folder Gets an attachment folder and its contents
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <returns>Task of ApiResponse (AttachmentFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentFolder>> GetFolderByWorkOrderAndFolderAsyncWithHttpInfo (int? workOrderId, int? folderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetFolderByWorkOrderAndFolder");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkorderApi->GetFolderByWorkOrderAndFolder");

            var localVarPath = "/workorders/{work_order_id}/attachments/{folder_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folder_id", Configuration.ApiClient.ParameterToString(folderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFolderByWorkOrderAndFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentFolder)));
        }

        /// <summary>
        /// Get Hold by Work Order and Hold Gets a hold on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Hold</returns>
        public Hold GetHoldByWorkOrderAndHold (int? workOrderId, int? holdId, bool? async = null)
        {
             ApiResponse<Hold> localVarResponse = GetHoldByWorkOrderAndHoldWithHttpInfo(workOrderId, holdId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Hold by Work Order and Hold Gets a hold on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of Hold</returns>
        public ApiResponse< Hold > GetHoldByWorkOrderAndHoldWithHttpInfo (int? workOrderId, int? holdId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetHoldByWorkOrderAndHold");
            // verify the required parameter 'holdId' is set
            if (holdId == null)
                throw new ApiException(400, "Missing required parameter 'holdId' when calling WorkorderApi->GetHoldByWorkOrderAndHold");

            var localVarPath = "/workorders/{work_order_id}/holds/{hold_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (holdId != null) localVarPathParams.Add("hold_id", Configuration.ApiClient.ParameterToString(holdId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHoldByWorkOrderAndHold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Hold>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Hold) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Hold)));
        }

        /// <summary>
        /// Get Hold by Work Order and Hold Gets a hold on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of Hold</returns>
        public async System.Threading.Tasks.Task<Hold> GetHoldByWorkOrderAndHoldAsync (int? workOrderId, int? holdId, bool? async = null)
        {
             ApiResponse<Hold> localVarResponse = await GetHoldByWorkOrderAndHoldAsyncWithHttpInfo(workOrderId, holdId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Hold by Work Order and Hold Gets a hold on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (Hold)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Hold>> GetHoldByWorkOrderAndHoldAsyncWithHttpInfo (int? workOrderId, int? holdId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetHoldByWorkOrderAndHold");
            // verify the required parameter 'holdId' is set
            if (holdId == null)
                throw new ApiException(400, "Missing required parameter 'holdId' when calling WorkorderApi->GetHoldByWorkOrderAndHold");

            var localVarPath = "/workorders/{work_order_id}/holds/{hold_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (holdId != null) localVarPathParams.Add("hold_id", Configuration.ApiClient.ParameterToString(holdId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHoldByWorkOrderAndHold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Hold>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Hold) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Hold)));
        }

        /// <summary>
        /// Get holds on work order Get holds on work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Holds</returns>
        public Holds GetHoldsByWorkOrder (int? workOrderId)
        {
             ApiResponse<Holds> localVarResponse = GetHoldsByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get holds on work order Get holds on work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Holds</returns>
        public ApiResponse< Holds > GetHoldsByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetHoldsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/holds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHoldsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Holds>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Holds) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Holds)));
        }

        /// <summary>
        /// Get holds on work order Get holds on work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Holds</returns>
        public async System.Threading.Tasks.Task<Holds> GetHoldsByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<Holds> localVarResponse = await GetHoldsByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get holds on work order Get holds on work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Holds)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Holds>> GetHoldsByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetHoldsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/holds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHoldsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Holds>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Holds) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Holds)));
        }

        /// <summary>
        /// Get Increase by Work Order Get pay increase for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>PayIncrease</returns>
        public PayIncrease GetIncreaseByWorkOrderAndIncrease (int? workOrderId, int? increaseId, bool? async = null)
        {
             ApiResponse<PayIncrease> localVarResponse = GetIncreaseByWorkOrderAndIncreaseWithHttpInfo(workOrderId, increaseId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Increase by Work Order Get pay increase for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of PayIncrease</returns>
        public ApiResponse< PayIncrease > GetIncreaseByWorkOrderAndIncreaseWithHttpInfo (int? workOrderId, int? increaseId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetIncreaseByWorkOrderAndIncrease");
            // verify the required parameter 'increaseId' is set
            if (increaseId == null)
                throw new ApiException(400, "Missing required parameter 'increaseId' when calling WorkorderApi->GetIncreaseByWorkOrderAndIncrease");

            var localVarPath = "/workorders/{work_order_id}/increases/{increase_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (increaseId != null) localVarPathParams.Add("increase_id", Configuration.ApiClient.ParameterToString(increaseId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncreaseByWorkOrderAndIncrease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayIncrease>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PayIncrease) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayIncrease)));
        }

        /// <summary>
        /// Get Increase by Work Order Get pay increase for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of PayIncrease</returns>
        public async System.Threading.Tasks.Task<PayIncrease> GetIncreaseByWorkOrderAndIncreaseAsync (int? workOrderId, int? increaseId, bool? async = null)
        {
             ApiResponse<PayIncrease> localVarResponse = await GetIncreaseByWorkOrderAndIncreaseAsyncWithHttpInfo(workOrderId, increaseId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Increase by Work Order Get pay increase for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (PayIncrease)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PayIncrease>> GetIncreaseByWorkOrderAndIncreaseAsyncWithHttpInfo (int? workOrderId, int? increaseId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetIncreaseByWorkOrderAndIncrease");
            // verify the required parameter 'increaseId' is set
            if (increaseId == null)
                throw new ApiException(400, "Missing required parameter 'increaseId' when calling WorkorderApi->GetIncreaseByWorkOrderAndIncrease");

            var localVarPath = "/workorders/{work_order_id}/increases/{increase_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (increaseId != null) localVarPathParams.Add("increase_id", Configuration.ApiClient.ParameterToString(increaseId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncreaseByWorkOrderAndIncrease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayIncrease>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PayIncrease) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayIncrease)));
        }

        /// <summary>
        /// Get Increases by Work Order Returns a list of pay increases requested by the assigned provider.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>PayIncreases</returns>
        public PayIncreases GetIncreasesByWorkOrder (int? workOrderId)
        {
             ApiResponse<PayIncreases> localVarResponse = GetIncreasesByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Increases by Work Order Returns a list of pay increases requested by the assigned provider.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of PayIncreases</returns>
        public ApiResponse< PayIncreases > GetIncreasesByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetIncreasesByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/increases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncreasesByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayIncreases>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PayIncreases) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayIncreases)));
        }

        /// <summary>
        /// Get Increases by Work Order Returns a list of pay increases requested by the assigned provider.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of PayIncreases</returns>
        public async System.Threading.Tasks.Task<PayIncreases> GetIncreasesByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<PayIncreases> localVarResponse = await GetIncreasesByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Increases by Work Order Returns a list of pay increases requested by the assigned provider.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (PayIncreases)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PayIncreases>> GetIncreasesByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetIncreasesByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/increases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncreasesByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayIncreases>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PayIncreases) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayIncreases)));
        }

        /// <summary>
        /// Get Location by Work Order Gets the address and geo information for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Location</returns>
        public Location GetLocationByWorkOrder (int? workOrderId)
        {
             ApiResponse<Location> localVarResponse = GetLocationByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Location by Work Order Gets the address and geo information for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Location</returns>
        public ApiResponse< Location > GetLocationByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetLocationByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocationByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Location>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Location) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Location)));
        }

        /// <summary>
        /// Get Location by Work Order Gets the address and geo information for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Location</returns>
        public async System.Threading.Tasks.Task<Location> GetLocationByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<Location> localVarResponse = await GetLocationByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Location by Work Order Gets the address and geo information for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Location>> GetLocationByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetLocationByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocationByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Location>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Location) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Location)));
        }

        /// <summary>
        /// Get Messages by Work Order Gets a list of work order messages
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Messages</returns>
        public Messages GetMessagesByWorkOrder (int? workOrderId)
        {
             ApiResponse<Messages> localVarResponse = GetMessagesByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Messages by Work Order Gets a list of work order messages
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Messages</returns>
        public ApiResponse< Messages > GetMessagesByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetMessagesByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Messages>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Messages) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Messages)));
        }

        /// <summary>
        /// Get Messages by Work Order Gets a list of work order messages
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Messages</returns>
        public async System.Threading.Tasks.Task<Messages> GetMessagesByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<Messages> localVarResponse = await GetMessagesByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Messages by Work Order Gets a list of work order messages
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Messages)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Messages>> GetMessagesByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetMessagesByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Messages>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Messages) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Messages)));
        }

        /// <summary>
        /// Get milestones by work order Get the milestones of a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of Work Order</param>
        /// <returns>Milestones</returns>
        public Milestones GetMilestonesByWorkOrder (int? workOrderId)
        {
             ApiResponse<Milestones> localVarResponse = GetMilestonesByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get milestones by work order Get the milestones of a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of Work Order</param>
        /// <returns>ApiResponse of Milestones</returns>
        public ApiResponse< Milestones > GetMilestonesByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetMilestonesByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/milestones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMilestonesByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Milestones>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Milestones) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Milestones)));
        }

        /// <summary>
        /// Get milestones by work order Get the milestones of a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of Work Order</param>
        /// <returns>Task of Milestones</returns>
        public async System.Threading.Tasks.Task<Milestones> GetMilestonesByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<Milestones> localVarResponse = await GetMilestonesByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get milestones by work order Get the milestones of a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of Work Order</param>
        /// <returns>Task of ApiResponse (Milestones)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Milestones>> GetMilestonesByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetMilestonesByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/milestones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMilestonesByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Milestones>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Milestones) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Milestones)));
        }

        /// <summary>
        /// Get Overview by Work Order Gets overview by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>WorkOrderOverview</returns>
        public WorkOrderOverview GetOverviewByWorkOrder (int? workOrderId)
        {
             ApiResponse<WorkOrderOverview> localVarResponse = GetOverviewByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Overview by Work Order Gets overview by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of WorkOrderOverview</returns>
        public ApiResponse< WorkOrderOverview > GetOverviewByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetOverviewByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/overview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOverviewByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrderOverview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrderOverview) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrderOverview)));
        }

        /// <summary>
        /// Get Overview by Work Order Gets overview by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of WorkOrderOverview</returns>
        public async System.Threading.Tasks.Task<WorkOrderOverview> GetOverviewByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<WorkOrderOverview> localVarResponse = await GetOverviewByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Overview by Work Order Gets overview by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (WorkOrderOverview)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrderOverview>> GetOverviewByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetOverviewByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/overview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOverviewByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrderOverview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrderOverview) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrderOverview)));
        }

        /// <summary>
        /// Get Overview Values by Work Order Gets overview values by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="clientId">client (optional)</param>
        /// <param name="projectId">project (optional)</param>
        /// <param name="serviceContractId">service contract from client invoicing (optional)</param>
        /// <param name="teamId">team id (optional)</param>
        /// <returns>WorkOrderOverviewValues</returns>
        public WorkOrderOverviewValues GetOverviewValuesByWorkOrder (int? workOrderId, int? clientId = null, int? projectId = null, int? serviceContractId = null, int? teamId = null)
        {
             ApiResponse<WorkOrderOverviewValues> localVarResponse = GetOverviewValuesByWorkOrderWithHttpInfo(workOrderId, clientId, projectId, serviceContractId, teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Overview Values by Work Order Gets overview values by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="clientId">client (optional)</param>
        /// <param name="projectId">project (optional)</param>
        /// <param name="serviceContractId">service contract from client invoicing (optional)</param>
        /// <param name="teamId">team id (optional)</param>
        /// <returns>ApiResponse of WorkOrderOverviewValues</returns>
        public ApiResponse< WorkOrderOverviewValues > GetOverviewValuesByWorkOrderWithHttpInfo (int? workOrderId, int? clientId = null, int? projectId = null, int? serviceContractId = null, int? teamId = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetOverviewValuesByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/overview/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (clientId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "client_id", clientId)); // query parameter
            if (projectId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "project_id", projectId)); // query parameter
            if (serviceContractId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "service_contract_id", serviceContractId)); // query parameter
            if (teamId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "team_id", teamId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOverviewValuesByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrderOverviewValues>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrderOverviewValues) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrderOverviewValues)));
        }

        /// <summary>
        /// Get Overview Values by Work Order Gets overview values by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="clientId">client (optional)</param>
        /// <param name="projectId">project (optional)</param>
        /// <param name="serviceContractId">service contract from client invoicing (optional)</param>
        /// <param name="teamId">team id (optional)</param>
        /// <returns>Task of WorkOrderOverviewValues</returns>
        public async System.Threading.Tasks.Task<WorkOrderOverviewValues> GetOverviewValuesByWorkOrderAsync (int? workOrderId, int? clientId = null, int? projectId = null, int? serviceContractId = null, int? teamId = null)
        {
             ApiResponse<WorkOrderOverviewValues> localVarResponse = await GetOverviewValuesByWorkOrderAsyncWithHttpInfo(workOrderId, clientId, projectId, serviceContractId, teamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Overview Values by Work Order Gets overview values by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="clientId">client (optional)</param>
        /// <param name="projectId">project (optional)</param>
        /// <param name="serviceContractId">service contract from client invoicing (optional)</param>
        /// <param name="teamId">team id (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrderOverviewValues)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrderOverviewValues>> GetOverviewValuesByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? clientId = null, int? projectId = null, int? serviceContractId = null, int? teamId = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetOverviewValuesByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/overview/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (clientId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "client_id", clientId)); // query parameter
            if (projectId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "project_id", projectId)); // query parameter
            if (serviceContractId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "service_contract_id", serviceContractId)); // query parameter
            if (teamId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "team_id", teamId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOverviewValuesByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrderOverviewValues>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrderOverviewValues) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrderOverviewValues)));
        }

        /// <summary>
        /// Get Pay by Work Order Gets the pay for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Pay</returns>
        public Pay GetPayByWorkOrder (int? workOrderId)
        {
             ApiResponse<Pay> localVarResponse = GetPayByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Pay by Work Order Gets the pay for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Pay</returns>
        public ApiResponse< Pay > GetPayByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetPayByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/pay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Pay>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Pay) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Pay)));
        }

        /// <summary>
        /// Get Pay by Work Order Gets the pay for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Pay</returns>
        public async System.Threading.Tasks.Task<Pay> GetPayByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<Pay> localVarResponse = await GetPayByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Pay by Work Order Gets the pay for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Pay)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Pay>> GetPayByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetPayByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/pay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Pay>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Pay) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Pay)));
        }

        /// <summary>
        /// Get Penalties by Work Order Get a list of penalties and their applied status for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <returns>PayModifiers</returns>
        public PayModifiers GetPenaltiesByWorkOrder (int? workOrderId)
        {
             ApiResponse<PayModifiers> localVarResponse = GetPenaltiesByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Penalties by Work Order Get a list of penalties and their applied status for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <returns>ApiResponse of PayModifiers</returns>
        public ApiResponse< PayModifiers > GetPenaltiesByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetPenaltiesByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/penalties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPenaltiesByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayModifiers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PayModifiers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayModifiers)));
        }

        /// <summary>
        /// Get Penalties by Work Order Get a list of penalties and their applied status for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <returns>Task of PayModifiers</returns>
        public async System.Threading.Tasks.Task<PayModifiers> GetPenaltiesByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<PayModifiers> localVarResponse = await GetPenaltiesByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Penalties by Work Order Get a list of penalties and their applied status for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <returns>Task of ApiResponse (PayModifiers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PayModifiers>> GetPenaltiesByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetPenaltiesByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/penalties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPenaltiesByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayModifiers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PayModifiers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayModifiers)));
        }

        /// <summary>
        /// Get Penalty by Work Order and Penalty Gets a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <returns>PayModifier</returns>
        public PayModifier GetPenaltyByWorkOrderAndPenalty (int? workOrderId, int? penaltyId)
        {
             ApiResponse<PayModifier> localVarResponse = GetPenaltyByWorkOrderAndPenaltyWithHttpInfo(workOrderId, penaltyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Penalty by Work Order and Penalty Gets a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <returns>ApiResponse of PayModifier</returns>
        public ApiResponse< PayModifier > GetPenaltyByWorkOrderAndPenaltyWithHttpInfo (int? workOrderId, int? penaltyId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetPenaltyByWorkOrderAndPenalty");
            // verify the required parameter 'penaltyId' is set
            if (penaltyId == null)
                throw new ApiException(400, "Missing required parameter 'penaltyId' when calling WorkorderApi->GetPenaltyByWorkOrderAndPenalty");

            var localVarPath = "/workorders/{work_order_id}/penalties/{penalty_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (penaltyId != null) localVarPathParams.Add("penalty_id", Configuration.ApiClient.ParameterToString(penaltyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPenaltyByWorkOrderAndPenalty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayModifier>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PayModifier) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayModifier)));
        }

        /// <summary>
        /// Get Penalty by Work Order and Penalty Gets a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <returns>Task of PayModifier</returns>
        public async System.Threading.Tasks.Task<PayModifier> GetPenaltyByWorkOrderAndPenaltyAsync (int? workOrderId, int? penaltyId)
        {
             ApiResponse<PayModifier> localVarResponse = await GetPenaltyByWorkOrderAndPenaltyAsyncWithHttpInfo(workOrderId, penaltyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Penalty by Work Order and Penalty Gets a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <returns>Task of ApiResponse (PayModifier)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PayModifier>> GetPenaltyByWorkOrderAndPenaltyAsyncWithHttpInfo (int? workOrderId, int? penaltyId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetPenaltyByWorkOrderAndPenalty");
            // verify the required parameter 'penaltyId' is set
            if (penaltyId == null)
                throw new ApiException(400, "Missing required parameter 'penaltyId' when calling WorkorderApi->GetPenaltyByWorkOrderAndPenalty");

            var localVarPath = "/workorders/{work_order_id}/penalties/{penalty_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (penaltyId != null) localVarPathParams.Add("penalty_id", Configuration.ApiClient.ParameterToString(penaltyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPenaltyByWorkOrderAndPenalty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayModifier>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PayModifier) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayModifier)));
        }

        /// <summary>
        /// Get Problem by Work order and Problem Gets information about a problem on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of problem</param>
        /// <returns>Problems</returns>
        public Problems GetProblemByWorkOrderAndProblem (int? workOrderId, int? problemId)
        {
             ApiResponse<Problems> localVarResponse = GetProblemByWorkOrderAndProblemWithHttpInfo(workOrderId, problemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Problem by Work order and Problem Gets information about a problem on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of problem</param>
        /// <returns>ApiResponse of Problems</returns>
        public ApiResponse< Problems > GetProblemByWorkOrderAndProblemWithHttpInfo (int? workOrderId, int? problemId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetProblemByWorkOrderAndProblem");
            // verify the required parameter 'problemId' is set
            if (problemId == null)
                throw new ApiException(400, "Missing required parameter 'problemId' when calling WorkorderApi->GetProblemByWorkOrderAndProblem");

            var localVarPath = "/workorders/{work_order_id}/problems/{problem_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (problemId != null) localVarPathParams.Add("problem_id", Configuration.ApiClient.ParameterToString(problemId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProblemByWorkOrderAndProblem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Problems>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Problems) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Problems)));
        }

        /// <summary>
        /// Get Problem by Work order and Problem Gets information about a problem on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of problem</param>
        /// <returns>Task of Problems</returns>
        public async System.Threading.Tasks.Task<Problems> GetProblemByWorkOrderAndProblemAsync (int? workOrderId, int? problemId)
        {
             ApiResponse<Problems> localVarResponse = await GetProblemByWorkOrderAndProblemAsyncWithHttpInfo(workOrderId, problemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Problem by Work order and Problem Gets information about a problem on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of problem</param>
        /// <returns>Task of ApiResponse (Problems)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Problems>> GetProblemByWorkOrderAndProblemAsyncWithHttpInfo (int? workOrderId, int? problemId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetProblemByWorkOrderAndProblem");
            // verify the required parameter 'problemId' is set
            if (problemId == null)
                throw new ApiException(400, "Missing required parameter 'problemId' when calling WorkorderApi->GetProblemByWorkOrderAndProblem");

            var localVarPath = "/workorders/{work_order_id}/problems/{problem_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (problemId != null) localVarPathParams.Add("problem_id", Configuration.ApiClient.ParameterToString(problemId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProblemByWorkOrderAndProblem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Problems>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Problems) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Problems)));
        }

        /// <summary>
        /// Get Problems by Work Order Gets problems reported on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Problems</returns>
        public Problems GetProblemsByWorkOrder (int? workOrderId)
        {
             ApiResponse<Problems> localVarResponse = GetProblemsByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Problems by Work Order Gets problems reported on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Problems</returns>
        public ApiResponse< Problems > GetProblemsByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetProblemsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/problems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProblemsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Problems>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Problems) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Problems)));
        }

        /// <summary>
        /// Get Problems by Work Order Gets problems reported on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Problems</returns>
        public async System.Threading.Tasks.Task<Problems> GetProblemsByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<Problems> localVarResponse = await GetProblemsByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Problems by Work Order Gets problems reported on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Problems)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Problems>> GetProblemsByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetProblemsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/problems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProblemsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Problems>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Problems) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Problems)));
        }

        /// <summary>
        /// Get Provider by Work Order Gets a single provider entry for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="userId">ID of provider</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> GetProviderByWorkOrder (int? workOrderId, int? userId)
        {
             ApiResponse<List<User>> localVarResponse = GetProviderByWorkOrderWithHttpInfo(workOrderId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Provider by Work Order Gets a single provider entry for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="userId">ID of provider</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse< List<User> > GetProviderByWorkOrderWithHttpInfo (int? workOrderId, int? userId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetProviderByWorkOrder");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling WorkorderApi->GetProviderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/providers/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProviderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// Get Provider by Work Order Gets a single provider entry for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="userId">ID of provider</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> GetProviderByWorkOrderAsync (int? workOrderId, int? userId)
        {
             ApiResponse<List<User>> localVarResponse = await GetProviderByWorkOrderAsyncWithHttpInfo(workOrderId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Provider by Work Order Gets a single provider entry for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="userId">ID of provider</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> GetProviderByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? userId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetProviderByWorkOrder");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling WorkorderApi->GetProviderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/providers/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProviderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// Get Providers by Work Order Gets list of providers available for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="sticky">Sticky (optional)</param>
        /// <param name="defaultView">Default view (optional)</param>
        /// <param name="view">View (optional)</param>
        /// <returns>List&lt;Users&gt;</returns>
        public List<Users> GetProvidersByWorkOrder (int? workOrderId, bool? sticky = null, string defaultView = null, string view = null)
        {
             ApiResponse<List<Users>> localVarResponse = GetProvidersByWorkOrderWithHttpInfo(workOrderId, sticky, defaultView, view);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Providers by Work Order Gets list of providers available for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="sticky">Sticky (optional)</param>
        /// <param name="defaultView">Default view (optional)</param>
        /// <param name="view">View (optional)</param>
        /// <returns>ApiResponse of List&lt;Users&gt;</returns>
        public ApiResponse< List<Users> > GetProvidersByWorkOrderWithHttpInfo (int? workOrderId, bool? sticky = null, string defaultView = null, string view = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetProvidersByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/providers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (sticky != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sticky", sticky)); // query parameter
            if (defaultView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "default_view", defaultView)); // query parameter
            if (view != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProvidersByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Users>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Users>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Users>)));
        }

        /// <summary>
        /// Get Providers by Work Order Gets list of providers available for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="sticky">Sticky (optional)</param>
        /// <param name="defaultView">Default view (optional)</param>
        /// <param name="view">View (optional)</param>
        /// <returns>Task of List&lt;Users&gt;</returns>
        public async System.Threading.Tasks.Task<List<Users>> GetProvidersByWorkOrderAsync (int? workOrderId, bool? sticky = null, string defaultView = null, string view = null)
        {
             ApiResponse<List<Users>> localVarResponse = await GetProvidersByWorkOrderAsyncWithHttpInfo(workOrderId, sticky, defaultView, view);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Providers by Work Order Gets list of providers available for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="sticky">Sticky (optional)</param>
        /// <param name="defaultView">Default view (optional)</param>
        /// <param name="view">View (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Users&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Users>>> GetProvidersByWorkOrderAsyncWithHttpInfo (int? workOrderId, bool? sticky = null, string defaultView = null, string view = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetProvidersByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/providers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (sticky != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sticky", sticky)); // query parameter
            if (defaultView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "default_view", defaultView)); // query parameter
            if (view != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProvidersByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Users>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Users>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Users>)));
        }

        /// <summary>
        /// Get Qualifications by Work Order Returns a list of qualifications applied to work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Qualifications</returns>
        public Qualifications GetQualificationsByWorkOrder (int? workOrderId)
        {
             ApiResponse<Qualifications> localVarResponse = GetQualificationsByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Qualifications by Work Order Returns a list of qualifications applied to work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Qualifications</returns>
        public ApiResponse< Qualifications > GetQualificationsByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetQualificationsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/qualifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQualificationsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Qualifications>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Qualifications) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Qualifications)));
        }

        /// <summary>
        /// Get Qualifications by Work Order Returns a list of qualifications applied to work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Qualifications</returns>
        public async System.Threading.Tasks.Task<Qualifications> GetQualificationsByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<Qualifications> localVarResponse = await GetQualificationsByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Qualifications by Work Order Returns a list of qualifications applied to work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Qualifications)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Qualifications>> GetQualificationsByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetQualificationsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/qualifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQualificationsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Qualifications>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Qualifications) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Qualifications)));
        }

        /// <summary>
        /// Get Ratings by work order Get ratings by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>WorkOrderRatings</returns>
        public WorkOrderRatings GetRatingsByWorkOrder (int? workOrderId)
        {
             ApiResponse<WorkOrderRatings> localVarResponse = GetRatingsByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ratings by work order Get ratings by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of WorkOrderRatings</returns>
        public ApiResponse< WorkOrderRatings > GetRatingsByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetRatingsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/ratings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRatingsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrderRatings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrderRatings) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrderRatings)));
        }

        /// <summary>
        /// Get Ratings by work order Get ratings by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of WorkOrderRatings</returns>
        public async System.Threading.Tasks.Task<WorkOrderRatings> GetRatingsByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<WorkOrderRatings> localVarResponse = await GetRatingsByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Ratings by work order Get ratings by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (WorkOrderRatings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrderRatings>> GetRatingsByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetRatingsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/ratings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRatingsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrderRatings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrderRatings) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrderRatings)));
        }

        /// <summary>
        /// Get Request/Counter offer by Work Order Get request/ counter offer for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="requestId">ID of work order request/counter offer</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Request</returns>
        public Request GetRequestByWorkOrderAndRequest (int? workOrderId, int? requestId, bool? async = null)
        {
             ApiResponse<Request> localVarResponse = GetRequestByWorkOrderAndRequestWithHttpInfo(workOrderId, requestId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Request/Counter offer by Work Order Get request/ counter offer for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="requestId">ID of work order request/counter offer</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of Request</returns>
        public ApiResponse< Request > GetRequestByWorkOrderAndRequestWithHttpInfo (int? workOrderId, int? requestId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetRequestByWorkOrderAndRequest");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling WorkorderApi->GetRequestByWorkOrderAndRequest");

            var localVarPath = "/workorders/{work_order_id}/requests/{request_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (requestId != null) localVarPathParams.Add("request_id", Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRequestByWorkOrderAndRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Request>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Request) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Request)));
        }

        /// <summary>
        /// Get Request/Counter offer by Work Order Get request/ counter offer for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="requestId">ID of work order request/counter offer</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of Request</returns>
        public async System.Threading.Tasks.Task<Request> GetRequestByWorkOrderAndRequestAsync (int? workOrderId, int? requestId, bool? async = null)
        {
             ApiResponse<Request> localVarResponse = await GetRequestByWorkOrderAndRequestAsyncWithHttpInfo(workOrderId, requestId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Request/Counter offer by Work Order Get request/ counter offer for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="requestId">ID of work order request/counter offer</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (Request)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Request>> GetRequestByWorkOrderAndRequestAsyncWithHttpInfo (int? workOrderId, int? requestId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetRequestByWorkOrderAndRequest");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling WorkorderApi->GetRequestByWorkOrderAndRequest");

            var localVarPath = "/workorders/{work_order_id}/requests/{request_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (requestId != null) localVarPathParams.Add("request_id", Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRequestByWorkOrderAndRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Request>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Request) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Request)));
        }

        /// <summary>
        /// Get Requests/Counter offers by Work Order Returns a list of work order requests or counter offers requested by the assigned provider.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Requests</returns>
        public Requests GetRequestsByWorkOrder (int? workOrderId)
        {
             ApiResponse<Requests> localVarResponse = GetRequestsByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Requests/Counter offers by Work Order Returns a list of work order requests or counter offers requested by the assigned provider.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Requests</returns>
        public ApiResponse< Requests > GetRequestsByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetRequestsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRequestsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Requests>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Requests) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Requests)));
        }

        /// <summary>
        /// Get Requests/Counter offers by Work Order Returns a list of work order requests or counter offers requested by the assigned provider.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Requests</returns>
        public async System.Threading.Tasks.Task<Requests> GetRequestsByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<Requests> localVarResponse = await GetRequestsByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Requests/Counter offers by Work Order Returns a list of work order requests or counter offers requested by the assigned provider.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Requests)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Requests>> GetRequestsByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetRequestsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRequestsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Requests>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Requests) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Requests)));
        }

        /// <summary>
        /// Get Schedule and Location Get schedule and location for a list of work orders by work orders
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">array of work order ids</param>
        /// <returns>EtaMassAcceptWithLocation</returns>
        public EtaMassAcceptWithLocation GetScheduleAndLocation (List<int?> workOrderId)
        {
             ApiResponse<EtaMassAcceptWithLocation> localVarResponse = GetScheduleAndLocationWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Schedule and Location Get schedule and location for a list of work orders by work orders
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">array of work order ids</param>
        /// <returns>ApiResponse of EtaMassAcceptWithLocation</returns>
        public ApiResponse< EtaMassAcceptWithLocation > GetScheduleAndLocationWithHttpInfo (List<int?> workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetScheduleAndLocation");

            var localVarPath = "/workorders/mass-accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "work_order_id", workOrderId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScheduleAndLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EtaMassAcceptWithLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EtaMassAcceptWithLocation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EtaMassAcceptWithLocation)));
        }

        /// <summary>
        /// Get Schedule and Location Get schedule and location for a list of work orders by work orders
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">array of work order ids</param>
        /// <returns>Task of EtaMassAcceptWithLocation</returns>
        public async System.Threading.Tasks.Task<EtaMassAcceptWithLocation> GetScheduleAndLocationAsync (List<int?> workOrderId)
        {
             ApiResponse<EtaMassAcceptWithLocation> localVarResponse = await GetScheduleAndLocationAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Schedule and Location Get schedule and location for a list of work orders by work orders
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">array of work order ids</param>
        /// <returns>Task of ApiResponse (EtaMassAcceptWithLocation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EtaMassAcceptWithLocation>> GetScheduleAndLocationAsyncWithHttpInfo (List<int?> workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetScheduleAndLocation");

            var localVarPath = "/workorders/mass-accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "work_order_id", workOrderId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScheduleAndLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EtaMassAcceptWithLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EtaMassAcceptWithLocation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EtaMassAcceptWithLocation)));
        }

        /// <summary>
        /// Get Schedule by Work Order Gets the service schedule for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Schedule</returns>
        public Schedule GetScheduleByWorkOrder (int? workOrderId)
        {
             ApiResponse<Schedule> localVarResponse = GetScheduleByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Schedule by Work Order Gets the service schedule for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Schedule</returns>
        public ApiResponse< Schedule > GetScheduleByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetScheduleByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScheduleByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Schedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Schedule) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Schedule)));
        }

        /// <summary>
        /// Get Schedule by Work Order Gets the service schedule for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Schedule</returns>
        public async System.Threading.Tasks.Task<Schedule> GetScheduleByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<Schedule> localVarResponse = await GetScheduleByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Schedule by Work Order Gets the service schedule for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Schedule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Schedule>> GetScheduleByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetScheduleByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScheduleByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Schedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Schedule) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Schedule)));
        }

        /// <summary>
        /// Get Shipments by Work Order Get a list of shipments on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Shipments</returns>
        public Shipments GetShipmentsByWorkOrder (int? workOrderId)
        {
             ApiResponse<Shipments> localVarResponse = GetShipmentsByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shipments by Work Order Get a list of shipments on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>ApiResponse of Shipments</returns>
        public ApiResponse< Shipments > GetShipmentsByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetShipmentsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/shipments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipmentsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Shipments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Shipments) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Shipments)));
        }

        /// <summary>
        /// Get Shipments by Work Order Get a list of shipments on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of Shipments</returns>
        public async System.Threading.Tasks.Task<Shipments> GetShipmentsByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<Shipments> localVarResponse = await GetShipmentsByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Shipments by Work Order Get a list of shipments on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of ApiResponse (Shipments)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Shipments>> GetShipmentsByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetShipmentsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/shipments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipmentsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Shipments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Shipments) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Shipments)));
        }

        /// <summary>
        /// Get Signature by Work Order and Signature Gets a single signature uploaded by the assigned provider
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signatureId">ID of signature</param>
        /// <returns>Signature</returns>
        public Signature GetSignatureByWorkOrderAndSignature (int? workOrderId, int? signatureId)
        {
             ApiResponse<Signature> localVarResponse = GetSignatureByWorkOrderAndSignatureWithHttpInfo(workOrderId, signatureId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Signature by Work Order and Signature Gets a single signature uploaded by the assigned provider
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signatureId">ID of signature</param>
        /// <returns>ApiResponse of Signature</returns>
        public ApiResponse< Signature > GetSignatureByWorkOrderAndSignatureWithHttpInfo (int? workOrderId, int? signatureId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetSignatureByWorkOrderAndSignature");
            // verify the required parameter 'signatureId' is set
            if (signatureId == null)
                throw new ApiException(400, "Missing required parameter 'signatureId' when calling WorkorderApi->GetSignatureByWorkOrderAndSignature");

            var localVarPath = "/workorders/{work_order_id}/signatures/{signature_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (signatureId != null) localVarPathParams.Add("signature_id", Configuration.ApiClient.ParameterToString(signatureId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSignatureByWorkOrderAndSignature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Signature>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Signature) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Signature)));
        }

        /// <summary>
        /// Get Signature by Work Order and Signature Gets a single signature uploaded by the assigned provider
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signatureId">ID of signature</param>
        /// <returns>Task of Signature</returns>
        public async System.Threading.Tasks.Task<Signature> GetSignatureByWorkOrderAndSignatureAsync (int? workOrderId, int? signatureId)
        {
             ApiResponse<Signature> localVarResponse = await GetSignatureByWorkOrderAndSignatureAsyncWithHttpInfo(workOrderId, signatureId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Signature by Work Order and Signature Gets a single signature uploaded by the assigned provider
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="signatureId">ID of signature</param>
        /// <returns>Task of ApiResponse (Signature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Signature>> GetSignatureByWorkOrderAndSignatureAsyncWithHttpInfo (int? workOrderId, int? signatureId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetSignatureByWorkOrderAndSignature");
            // verify the required parameter 'signatureId' is set
            if (signatureId == null)
                throw new ApiException(400, "Missing required parameter 'signatureId' when calling WorkorderApi->GetSignatureByWorkOrderAndSignature");

            var localVarPath = "/workorders/{work_order_id}/signatures/{signature_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (signatureId != null) localVarPathParams.Add("signature_id", Configuration.ApiClient.ParameterToString(signatureId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSignatureByWorkOrderAndSignature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Signature>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Signature) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Signature)));
        }

        /// <summary>
        /// Get Signatures by Work Order Returns a list of signatures uploaded by the assigned provider
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Signatures</returns>
        public Signatures GetSignaturesByWorkOrder (int? workOrderId)
        {
             ApiResponse<Signatures> localVarResponse = GetSignaturesByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Signatures by Work Order Returns a list of signatures uploaded by the assigned provider
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Signatures</returns>
        public ApiResponse< Signatures > GetSignaturesByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetSignaturesByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/signatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSignaturesByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Signatures>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Signatures) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Signatures)));
        }

        /// <summary>
        /// Get Signatures by Work Order Returns a list of signatures uploaded by the assigned provider
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Signatures</returns>
        public async System.Threading.Tasks.Task<Signatures> GetSignaturesByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<Signatures> localVarResponse = await GetSignaturesByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Signatures by Work Order Returns a list of signatures uploaded by the assigned provider
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Signatures)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Signatures>> GetSignaturesByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetSignaturesByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/signatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSignaturesByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Signatures>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Signatures) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Signatures)));
        }

        /// <summary>
        /// Get Status by Work Order Gets the current real-time status for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Status</returns>
        public Status GetStatusByWorkOrder (int? workOrderId)
        {
             ApiResponse<Status> localVarResponse = GetStatusByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Status by Work Order Gets the current real-time status for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Status</returns>
        public ApiResponse< Status > GetStatusByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetStatusByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatusByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Status)));
        }

        /// <summary>
        /// Get Status by Work Order Gets the current real-time status for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Status</returns>
        public async System.Threading.Tasks.Task<Status> GetStatusByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<Status> localVarResponse = await GetStatusByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Status by Work Order Gets the current real-time status for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Status>> GetStatusByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetStatusByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatusByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Status)));
        }

        /// <summary>
        /// Get Swap by Work order and Problem Gets a swap request by id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapId">ID of swap</param>
        /// <returns>Swap</returns>
        public Swap GetSwapByWorkOrderAndSwap (int? workOrderId, int? swapId)
        {
             ApiResponse<Swap> localVarResponse = GetSwapByWorkOrderAndSwapWithHttpInfo(workOrderId, swapId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Swap by Work order and Problem Gets a swap request by id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapId">ID of swap</param>
        /// <returns>ApiResponse of Swap</returns>
        public ApiResponse< Swap > GetSwapByWorkOrderAndSwapWithHttpInfo (int? workOrderId, int? swapId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetSwapByWorkOrderAndSwap");
            // verify the required parameter 'swapId' is set
            if (swapId == null)
                throw new ApiException(400, "Missing required parameter 'swapId' when calling WorkorderApi->GetSwapByWorkOrderAndSwap");

            var localVarPath = "/workorders/{work_order_id}/swaps/{swap_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (swapId != null) localVarPathParams.Add("swap_id", Configuration.ApiClient.ParameterToString(swapId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSwapByWorkOrderAndSwap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Swap>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Swap) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Swap)));
        }

        /// <summary>
        /// Get Swap by Work order and Problem Gets a swap request by id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapId">ID of swap</param>
        /// <returns>Task of Swap</returns>
        public async System.Threading.Tasks.Task<Swap> GetSwapByWorkOrderAndSwapAsync (int? workOrderId, int? swapId)
        {
             ApiResponse<Swap> localVarResponse = await GetSwapByWorkOrderAndSwapAsyncWithHttpInfo(workOrderId, swapId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Swap by Work order and Problem Gets a swap request by id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapId">ID of swap</param>
        /// <returns>Task of ApiResponse (Swap)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Swap>> GetSwapByWorkOrderAndSwapAsyncWithHttpInfo (int? workOrderId, int? swapId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetSwapByWorkOrderAndSwap");
            // verify the required parameter 'swapId' is set
            if (swapId == null)
                throw new ApiException(400, "Missing required parameter 'swapId' when calling WorkorderApi->GetSwapByWorkOrderAndSwap");

            var localVarPath = "/workorders/{work_order_id}/swaps/{swap_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (swapId != null) localVarPathParams.Add("swap_id", Configuration.ApiClient.ParameterToString(swapId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSwapByWorkOrderAndSwap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Swap>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Swap) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Swap)));
        }

        /// <summary>
        /// Get Swaps by Work Order Gets swap requests for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Swaps</returns>
        public Swaps GetSwapsByWorkOrder (int? workOrderId)
        {
             ApiResponse<Swaps> localVarResponse = GetSwapsByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Swaps by Work Order Gets swap requests for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Swaps</returns>
        public ApiResponse< Swaps > GetSwapsByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetSwapsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/swaps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSwapsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Swaps>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Swaps) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Swaps)));
        }

        /// <summary>
        /// Get Swaps by Work Order Gets swap requests for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Swaps</returns>
        public async System.Threading.Tasks.Task<Swaps> GetSwapsByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<Swaps> localVarResponse = await GetSwapsByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Swaps by Work Order Gets swap requests for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Swaps)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Swaps>> GetSwapsByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetSwapsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/swaps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSwapsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Swaps>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Swaps) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Swaps)));
        }

        /// <summary>
        /// Get Tag by Work order and Problem Gets a tag on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of tag</param>
        /// <returns>Tag</returns>
        public Tag GetTagByWorkOrderAndTag (int? workOrderId, int? tagId)
        {
             ApiResponse<Tag> localVarResponse = GetTagByWorkOrderAndTagWithHttpInfo(workOrderId, tagId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tag by Work order and Problem Gets a tag on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of tag</param>
        /// <returns>ApiResponse of Tag</returns>
        public ApiResponse< Tag > GetTagByWorkOrderAndTagWithHttpInfo (int? workOrderId, int? tagId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetTagByWorkOrderAndTag");
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling WorkorderApi->GetTagByWorkOrderAndTag");

            var localVarPath = "/workorders/{work_order_id}/tags/{tag_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (tagId != null) localVarPathParams.Add("tag_id", Configuration.ApiClient.ParameterToString(tagId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTagByWorkOrderAndTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
        }

        /// <summary>
        /// Get Tag by Work order and Problem Gets a tag on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of tag</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> GetTagByWorkOrderAndTagAsync (int? workOrderId, int? tagId)
        {
             ApiResponse<Tag> localVarResponse = await GetTagByWorkOrderAndTagAsyncWithHttpInfo(workOrderId, tagId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Tag by Work order and Problem Gets a tag on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of tag</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tag>> GetTagByWorkOrderAndTagAsyncWithHttpInfo (int? workOrderId, int? tagId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetTagByWorkOrderAndTag");
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling WorkorderApi->GetTagByWorkOrderAndTag");

            var localVarPath = "/workorders/{work_order_id}/tags/{tag_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (tagId != null) localVarPathParams.Add("tag_id", Configuration.ApiClient.ParameterToString(tagId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTagByWorkOrderAndTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
        }

        /// <summary>
        /// Get Tags by Work Order Gets tags/labels reported on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Tags</returns>
        public Tags GetTagsByWorkOrder (int? workOrderId)
        {
             ApiResponse<Tags> localVarResponse = GetTagsByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tags by Work Order Gets tags/labels reported on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Tags</returns>
        public ApiResponse< Tags > GetTagsByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetTagsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTagsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tags>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tags) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tags)));
        }

        /// <summary>
        /// Get Tags by Work Order Gets tags/labels reported on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of Tags</returns>
        public async System.Threading.Tasks.Task<Tags> GetTagsByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<Tags> localVarResponse = await GetTagsByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Tags by Work Order Gets tags/labels reported on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (Tags)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tags>> GetTagsByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetTagsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTagsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tags>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tags) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tags)));
        }

        /// <summary>
        /// Get Task by Work Order Get a task by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <returns>Task</returns>
        public Task GetTaskByWorkOrder (int? workOrderId, int? taskId)
        {
             ApiResponse<Task> localVarResponse = GetTaskByWorkOrderWithHttpInfo(workOrderId, taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Task by Work Order Get a task by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <returns>ApiResponse of Task</returns>
        public ApiResponse< Task > GetTaskByWorkOrderWithHttpInfo (int? workOrderId, int? taskId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetTaskByWorkOrder");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling WorkorderApi->GetTaskByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/tasks/{task_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Task) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

        /// <summary>
        /// Get Task by Work Order Get a task by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> GetTaskByWorkOrderAsync (int? workOrderId, int? taskId)
        {
             ApiResponse<Task> localVarResponse = await GetTaskByWorkOrderAsyncWithHttpInfo(workOrderId, taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Task by Work Order Get a task by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Task>> GetTaskByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? taskId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetTaskByWorkOrder");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling WorkorderApi->GetTaskByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/tasks/{task_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Task) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

        /// <summary>
        /// Get Tasks by Work Order Get a list of a work order&#39;s tasks
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Tasks</returns>
        public Tasks GetTasksByWorkOrder (int? workOrderId)
        {
             ApiResponse<Tasks> localVarResponse = GetTasksByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tasks by Work Order Get a list of a work order&#39;s tasks
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>ApiResponse of Tasks</returns>
        public ApiResponse< Tasks > GetTasksByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetTasksByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTasksByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tasks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tasks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tasks)));
        }

        /// <summary>
        /// Get Tasks by Work Order Get a list of a work order&#39;s tasks
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of Tasks</returns>
        public async System.Threading.Tasks.Task<Tasks> GetTasksByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<Tasks> localVarResponse = await GetTasksByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Tasks by Work Order Get a list of a work order&#39;s tasks
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <returns>Task of ApiResponse (Tasks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tasks>> GetTasksByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetTasksByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTasksByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tasks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tasks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tasks)));
        }

        /// <summary>
        /// Get Time Logs by Work Order Returns a list of time logs applied by the assigned provider
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>TimeLogs</returns>
        public TimeLogs GetTimeLogsByWorkOrder (int? workOrderId)
        {
             ApiResponse<TimeLogs> localVarResponse = GetTimeLogsByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Time Logs by Work Order Returns a list of time logs applied by the assigned provider
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of TimeLogs</returns>
        public ApiResponse< TimeLogs > GetTimeLogsByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetTimeLogsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/time_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimeLogsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimeLogs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TimeLogs) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimeLogs)));
        }

        /// <summary>
        /// Get Time Logs by Work Order Returns a list of time logs applied by the assigned provider
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of TimeLogs</returns>
        public async System.Threading.Tasks.Task<TimeLogs> GetTimeLogsByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<TimeLogs> localVarResponse = await GetTimeLogsByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Time Logs by Work Order Returns a list of time logs applied by the assigned provider
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (TimeLogs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimeLogs>> GetTimeLogsByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetTimeLogsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/time_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimeLogsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimeLogs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TimeLogs) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimeLogs)));
        }

        /// <summary>
        /// Get Work Order by Work Order Gets a work order by its id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder GetWorkOrderByWorkOrder (int? workOrderId)
        {
             ApiResponse<WorkOrder> localVarResponse = GetWorkOrderByWorkOrderWithHttpInfo(workOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Work Order by Work Order Gets a work order by its id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > GetWorkOrderByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetWorkOrderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkOrderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Get Work Order by Work Order Gets a work order by its id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> GetWorkOrderByWorkOrderAsync (int? workOrderId)
        {
             ApiResponse<WorkOrder> localVarResponse = await GetWorkOrderByWorkOrderAsyncWithHttpInfo(workOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Work Order by Work Order Gets a work order by its id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> GetWorkOrderByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GetWorkOrderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkOrderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Get Work Order Lists Pre-filters results by a certain category or type, settings by list are persisted with &#39;sticky&#39; by user.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SavedList&gt;</returns>
        public List<SavedList> GetWorkOrderLists ()
        {
             ApiResponse<List<SavedList>> localVarResponse = GetWorkOrderListsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Work Order Lists Pre-filters results by a certain category or type, settings by list are persisted with &#39;sticky&#39; by user.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SavedList&gt;</returns>
        public ApiResponse< List<SavedList> > GetWorkOrderListsWithHttpInfo ()
        {

            var localVarPath = "/workorders/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkOrderLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SavedList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SavedList>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SavedList>)));
        }

        /// <summary>
        /// Get Work Order Lists Pre-filters results by a certain category or type, settings by list are persisted with &#39;sticky&#39; by user.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SavedList&gt;</returns>
        public async System.Threading.Tasks.Task<List<SavedList>> GetWorkOrderListsAsync ()
        {
             ApiResponse<List<SavedList>> localVarResponse = await GetWorkOrderListsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Work Order Lists Pre-filters results by a certain category or type, settings by list are persisted with &#39;sticky&#39; by user.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SavedList&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SavedList>>> GetWorkOrderListsAsyncWithHttpInfo ()
        {

            var localVarPath = "/workorders/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkOrderLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SavedList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SavedList>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SavedList>)));
        }

        /// <summary>
        /// Get Work Orders Returns a list of work orders.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Saved group which sandboxes filters, sorts and column preferences in addition to pre-applied settings (e.g.: tabs or saved searches) (optional)</param>
        /// <param name="columns">Specify the columns and their order to return data for (optional)</param>
        /// <param name="page">Specify the page number (optional)</param>
        /// <param name="perPage">Specify the results per page (optional)</param>
        /// <param name="view">Caters the response data to how you&#39;re going to display it. For most uses, you&#39;ll want &#39;list&#39;; other options might include map, schedule, tiles, etc. (optional)</param>
        /// <param name="sticky">Persists filters, columns, and sorts (all but pagination) to re-apply on future requests where omitted. Persists to the &#39;list&#39; specified for the authenticated user (optional, default to false)</param>
        /// <param name="sort">Sorts results by a specified column id (optional)</param>
        /// <param name="order">Whether the sort should be ascending or descending (optional)</param>
        /// <param name="f_">Clears all filters (optional)</param>
        /// <param name="fMaxApprovalTime">(Provider) Filters work to where company has specified their maximum approval day target is less than or equal to provided number of days (optional)</param>
        /// <param name="fRating">(Provider) Filters work by buyer&#39;s star rating (Buyer) Filters work by assigned provider&#39;s star rating - - value can be a single number (e.g.: 3.5) where that value must be met or exceededor a specific inclusive range (e.g.: 3.5,5.0) (optional)</param>
        /// <param name="fFlightboardTomorrow">(Provider) Used by the confirm tomorrow work screen (optional)</param>
        /// <param name="fRequests">(Buyer) Filters work with requests (e.g.: true) or with no requests (e.g.: false) (optional)</param>
        /// <param name="fCounterOffers">(Buyer) Filters work with counter-offer requests of any type (schedule, expense or pay change) when true (e.g.: true) or with no counter offers (e.g.: false) (optional)</param>
        /// <param name="fWorkOrderId">(Buyer/Provider) Filters work by specific work order ids (optional)</param>
        /// <param name="fHourly">(Buyer/Provider) Filters work by that of a minimum hourly rate (includes only hourly or blended pay struture) - - may be given a single value which must be met or exceeded (e.g.: 50) or an inclusive range (e.g.: 35,75) (optional)</param>
        /// <param name="fFixed">(Buyer/Provider) Filters work by that of a minimum fixed rate (includes only fixed or blended pay structure) - - may by given a single value which must be met or exceeded (e.g.: 250) or an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fDevice">(Buyer/Provider) Filters work by that of a minimum per-device rate (includes only device pay structure) - - may by given a single value which must be met or exceeded (e.g.: 250) or an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fPay">(Buyer/Provider) Filters work by that whose minimum or maximum payout meets or exceeds a single value (e.g.: 250) or whose minimum or maximum payout falls between an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fTemplates">(Buyer) Filters work orders created using a given template, provided either by name or it&#39;s unique id. May be given as a single value or as a list of comma-separated values. If the template name itself has a comma, you should use its unique identifier instead (optional)</param>
        /// <param name="fTypeOfWork">(Buyer/Provider) Filters work by that of a given type (e.g.: Networking). May be given a single or comma separated list of values of the full descriptions (Networking) or their unique identifiers (40) - - if the descriptions include commas you should use their unique identifiers (optional)</param>
        /// <param name="fTimeZone">(Buyer/Provider) Filters work by that of a given time zone (e.g.: America/New_York), list of time zones (e.g.: America/New_York,America/Chicago), its offset (e.g.: -5) or a range of offsets (e.g.: -4,-6) (optional)</param>
        /// <param name="fMode">(Buyer/Provider) Filters work by that of a given mode which must be one of the following values: &#39;managed&#39;, &#39;marketplace&#39;, or &#39;any&#39; (optional)</param>
        /// <param name="fCompany">(Buyer/Provider) Filters work by buyer, can be given text which would free-form search all buyers by name (e.g.: &#39;acme&#39;), or a company&#39;s unique identifier (e.g.: &#39;50&#39;). You can also include a list of unique identifiers (e.g.: 50,51,52) to search for multiple buyers (optional)</param>
        /// <param name="fWorkedWith">(Provider) Filters work orders to include only those by company&#39;s I or my vendor/service company has previously worked with (optional)</param>
        /// <param name="fManager">(Buyer) Filters work to that assigned to a given company user, either by name (case insensitive), email or their unique id or a list of comma separated values of any of these (optional)</param>
        /// <param name="fClient">(Buyer) Filters work to that assigned to a given client company, either by name (case insensitive), or their unique id or a list of comma separated values of either of these (optional)</param>
        /// <param name="fProject">(Buyer) Filters work to that assigned to a given project, either by name (case insensitive), or their unique id or a list of comma separated values of either of these (optional)</param>
        /// <param name="fApprovalWindow">(Provider) Filters work to include only companies who set their target approval days equal or less than provided value (e.g.: 2) or within a given range (e.g.: 1,3) (optional)</param>
        /// <param name="fReviewWindow">(Buyer) Filters work to include only work orders that exceed the days given, or the company&#39;s target approval days when given no value (optional)</param>
        /// <param name="fNetwork">(Buyer) Filters work by one or more of your company&#39;s networks. You must have the Field Nation Complete feature to enable new networks. Networks may be provided as a comma separated list of their names (e.g.: Field Nation) or unique ids (optional)</param>
        /// <param name="fAutoAssign">(Buyer) Filters work to that which was auto-assigned/dispatched (when true) or to that which was not (when false) (optional)</param>
        /// <param name="fSchedule">(Buyer/Provider) Filters work by a given service date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fCreated">(Buyer) Filters work created on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fPublished">(Buyer/Provider) Filters work published on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fRouted">(Buyer/Provider) Filters work routed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fPublishedRouted">(Buyer/Provider) Filters work published or routed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fCompleted">(Buyer/Provider) Filters work marked complete on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fApprovedCancelled">(Buyer/Provider) Filters work approved or cancelled on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fConfirmed">(Buyer/Provider) Filters work confirmed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fAssigned">(Buyer/Provider) Filters work assigned on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fSavedLocation">(Buyer) Filters work to that assigned to a saved location by name (e.g.: Acme store #1) or its unique identifier. Can also be given a list of comma separated values of either type. If the name includes a comma, you should use a list of the unique identifiers (optional)</param>
        /// <param name="fSavedLocationGroup">(Buyer) Filters work to that assigned to a saved location group by name (e.g.: Acme stores) or its unique identifier. Can also be given a list of comma separated values of either type. If the name includes a comma, you should use a list of the unique identifiers (optional)</param>
        /// <param name="fCity">(Buyer/Provider) Filters work to include only that of a given city name (case insensitive) or a list of cities when given a comma separated list of values (optional)</param>
        /// <param name="fState">(Buyer/Provider) Filters work to include only that of a given state (case insensitive) or a list of states when given a comma separated list of values (optional)</param>
        /// <param name="fPostalCode">(Buyer/Provider) Filters work to include only that of a given postal code (case insensitive) or a list of postal codes when given a comma separated list of values (optional)</param>
        /// <param name="fCountry">(Buyer/Provider) Filters work to include only that of a given country (case insensitive) or a list of countries when given a comma separated list of values (optional)</param>
        /// <param name="fFlags">(Buyer) Filters work to include that with a given label by name (e.g.: Late) or unique id or a list of either. If empty, includes only work with no flags. (optional)</param>
        /// <param name="fAssignment">(Buyer/Provider) Filters work to assigned providers of the given assignment type, must be one of: &#39;vendor&#39;, &#39;service_company&#39;, &#39;provider&#39;, &#39;any&#39; or a single unique id of a provider or list of ids (CSV) (optional)</param>
        /// <param name="fConfirmation">(Buyer/Provider) Filters to include work which may be given one or some (comma separated) of the following values: &#39;unconfirmed&#39;, &#39;confirmed&#39;, &#39;readytogo&#39;, &#39;onmyway&#39;, &#39;checked-in&#39;, &#39;checked-out&#39;, &#39;in-progress&#39; (optional)</param>
        /// <param name="fFinancing">(Buyer) Filters work to that of a specific financing account or list of financing accounts, either specified by their name or their unique identifier (optional)</param>
        /// <param name="fLocationRadius">(Provider) Filters work orders to a geofence, it may be given two array values the first being a search &#39;string&#39; and the second as integer radius in miles.  You can also optionally leave the first search string value blank to default to the Provider&#39;s home address or set a lattitude and longitude with the pattern &#39;&lt;lat&gt;,&lt;lng&gt;&#39;.  If a radius (in miles) is not include the default value of 60 will be set. (optional)</param>
        /// <param name="fRemoteWork">(Provider) Filters out all work orders with an onsite location when set to &#39;true&#39;. (optional)</param>
        /// <param name="fSearch">Keyword search, case insensitive, searches title, description, location, type of work, buyer, assigned provider and other criteria free-form (optional)</param>
        /// <returns>WorkOrders</returns>
        public WorkOrders GetWorkOrders (string list = null, string columns = null, int? page = null, int? perPage = null, string view = null, bool? sticky = null, string sort = null, string order = null, string f_ = null, int? fMaxApprovalTime = null, string fRating = null, bool? fFlightboardTomorrow = null, bool? fRequests = null, bool? fCounterOffers = null, string fWorkOrderId = null, string fHourly = null, string fFixed = null, string fDevice = null, string fPay = null, string fTemplates = null, string fTypeOfWork = null, string fTimeZone = null, string fMode = null, string fCompany = null, string fWorkedWith = null, string fManager = null, string fClient = null, string fProject = null, string fApprovalWindow = null, string fReviewWindow = null, string fNetwork = null, string fAutoAssign = null, string fSchedule = null, string fCreated = null, string fPublished = null, string fRouted = null, string fPublishedRouted = null, string fCompleted = null, string fApprovedCancelled = null, string fConfirmed = null, string fAssigned = null, string fSavedLocation = null, string fSavedLocationGroup = null, string fCity = null, string fState = null, string fPostalCode = null, string fCountry = null, string fFlags = null, string fAssignment = null, string fConfirmation = null, string fFinancing = null, List<string> fLocationRadius = null, bool? fRemoteWork = null, string fSearch = null)
        {
             ApiResponse<WorkOrders> localVarResponse = GetWorkOrdersWithHttpInfo(list, columns, page, perPage, view, sticky, sort, order, f_, fMaxApprovalTime, fRating, fFlightboardTomorrow, fRequests, fCounterOffers, fWorkOrderId, fHourly, fFixed, fDevice, fPay, fTemplates, fTypeOfWork, fTimeZone, fMode, fCompany, fWorkedWith, fManager, fClient, fProject, fApprovalWindow, fReviewWindow, fNetwork, fAutoAssign, fSchedule, fCreated, fPublished, fRouted, fPublishedRouted, fCompleted, fApprovedCancelled, fConfirmed, fAssigned, fSavedLocation, fSavedLocationGroup, fCity, fState, fPostalCode, fCountry, fFlags, fAssignment, fConfirmation, fFinancing, fLocationRadius, fRemoteWork, fSearch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Work Orders Returns a list of work orders.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Saved group which sandboxes filters, sorts and column preferences in addition to pre-applied settings (e.g.: tabs or saved searches) (optional)</param>
        /// <param name="columns">Specify the columns and their order to return data for (optional)</param>
        /// <param name="page">Specify the page number (optional)</param>
        /// <param name="perPage">Specify the results per page (optional)</param>
        /// <param name="view">Caters the response data to how you&#39;re going to display it. For most uses, you&#39;ll want &#39;list&#39;; other options might include map, schedule, tiles, etc. (optional)</param>
        /// <param name="sticky">Persists filters, columns, and sorts (all but pagination) to re-apply on future requests where omitted. Persists to the &#39;list&#39; specified for the authenticated user (optional, default to false)</param>
        /// <param name="sort">Sorts results by a specified column id (optional)</param>
        /// <param name="order">Whether the sort should be ascending or descending (optional)</param>
        /// <param name="f_">Clears all filters (optional)</param>
        /// <param name="fMaxApprovalTime">(Provider) Filters work to where company has specified their maximum approval day target is less than or equal to provided number of days (optional)</param>
        /// <param name="fRating">(Provider) Filters work by buyer&#39;s star rating (Buyer) Filters work by assigned provider&#39;s star rating - - value can be a single number (e.g.: 3.5) where that value must be met or exceededor a specific inclusive range (e.g.: 3.5,5.0) (optional)</param>
        /// <param name="fFlightboardTomorrow">(Provider) Used by the confirm tomorrow work screen (optional)</param>
        /// <param name="fRequests">(Buyer) Filters work with requests (e.g.: true) or with no requests (e.g.: false) (optional)</param>
        /// <param name="fCounterOffers">(Buyer) Filters work with counter-offer requests of any type (schedule, expense or pay change) when true (e.g.: true) or with no counter offers (e.g.: false) (optional)</param>
        /// <param name="fWorkOrderId">(Buyer/Provider) Filters work by specific work order ids (optional)</param>
        /// <param name="fHourly">(Buyer/Provider) Filters work by that of a minimum hourly rate (includes only hourly or blended pay struture) - - may be given a single value which must be met or exceeded (e.g.: 50) or an inclusive range (e.g.: 35,75) (optional)</param>
        /// <param name="fFixed">(Buyer/Provider) Filters work by that of a minimum fixed rate (includes only fixed or blended pay structure) - - may by given a single value which must be met or exceeded (e.g.: 250) or an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fDevice">(Buyer/Provider) Filters work by that of a minimum per-device rate (includes only device pay structure) - - may by given a single value which must be met or exceeded (e.g.: 250) or an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fPay">(Buyer/Provider) Filters work by that whose minimum or maximum payout meets or exceeds a single value (e.g.: 250) or whose minimum or maximum payout falls between an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fTemplates">(Buyer) Filters work orders created using a given template, provided either by name or it&#39;s unique id. May be given as a single value or as a list of comma-separated values. If the template name itself has a comma, you should use its unique identifier instead (optional)</param>
        /// <param name="fTypeOfWork">(Buyer/Provider) Filters work by that of a given type (e.g.: Networking). May be given a single or comma separated list of values of the full descriptions (Networking) or their unique identifiers (40) - - if the descriptions include commas you should use their unique identifiers (optional)</param>
        /// <param name="fTimeZone">(Buyer/Provider) Filters work by that of a given time zone (e.g.: America/New_York), list of time zones (e.g.: America/New_York,America/Chicago), its offset (e.g.: -5) or a range of offsets (e.g.: -4,-6) (optional)</param>
        /// <param name="fMode">(Buyer/Provider) Filters work by that of a given mode which must be one of the following values: &#39;managed&#39;, &#39;marketplace&#39;, or &#39;any&#39; (optional)</param>
        /// <param name="fCompany">(Buyer/Provider) Filters work by buyer, can be given text which would free-form search all buyers by name (e.g.: &#39;acme&#39;), or a company&#39;s unique identifier (e.g.: &#39;50&#39;). You can also include a list of unique identifiers (e.g.: 50,51,52) to search for multiple buyers (optional)</param>
        /// <param name="fWorkedWith">(Provider) Filters work orders to include only those by company&#39;s I or my vendor/service company has previously worked with (optional)</param>
        /// <param name="fManager">(Buyer) Filters work to that assigned to a given company user, either by name (case insensitive), email or their unique id or a list of comma separated values of any of these (optional)</param>
        /// <param name="fClient">(Buyer) Filters work to that assigned to a given client company, either by name (case insensitive), or their unique id or a list of comma separated values of either of these (optional)</param>
        /// <param name="fProject">(Buyer) Filters work to that assigned to a given project, either by name (case insensitive), or their unique id or a list of comma separated values of either of these (optional)</param>
        /// <param name="fApprovalWindow">(Provider) Filters work to include only companies who set their target approval days equal or less than provided value (e.g.: 2) or within a given range (e.g.: 1,3) (optional)</param>
        /// <param name="fReviewWindow">(Buyer) Filters work to include only work orders that exceed the days given, or the company&#39;s target approval days when given no value (optional)</param>
        /// <param name="fNetwork">(Buyer) Filters work by one or more of your company&#39;s networks. You must have the Field Nation Complete feature to enable new networks. Networks may be provided as a comma separated list of their names (e.g.: Field Nation) or unique ids (optional)</param>
        /// <param name="fAutoAssign">(Buyer) Filters work to that which was auto-assigned/dispatched (when true) or to that which was not (when false) (optional)</param>
        /// <param name="fSchedule">(Buyer/Provider) Filters work by a given service date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fCreated">(Buyer) Filters work created on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fPublished">(Buyer/Provider) Filters work published on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fRouted">(Buyer/Provider) Filters work routed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fPublishedRouted">(Buyer/Provider) Filters work published or routed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fCompleted">(Buyer/Provider) Filters work marked complete on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fApprovedCancelled">(Buyer/Provider) Filters work approved or cancelled on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fConfirmed">(Buyer/Provider) Filters work confirmed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fAssigned">(Buyer/Provider) Filters work assigned on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fSavedLocation">(Buyer) Filters work to that assigned to a saved location by name (e.g.: Acme store #1) or its unique identifier. Can also be given a list of comma separated values of either type. If the name includes a comma, you should use a list of the unique identifiers (optional)</param>
        /// <param name="fSavedLocationGroup">(Buyer) Filters work to that assigned to a saved location group by name (e.g.: Acme stores) or its unique identifier. Can also be given a list of comma separated values of either type. If the name includes a comma, you should use a list of the unique identifiers (optional)</param>
        /// <param name="fCity">(Buyer/Provider) Filters work to include only that of a given city name (case insensitive) or a list of cities when given a comma separated list of values (optional)</param>
        /// <param name="fState">(Buyer/Provider) Filters work to include only that of a given state (case insensitive) or a list of states when given a comma separated list of values (optional)</param>
        /// <param name="fPostalCode">(Buyer/Provider) Filters work to include only that of a given postal code (case insensitive) or a list of postal codes when given a comma separated list of values (optional)</param>
        /// <param name="fCountry">(Buyer/Provider) Filters work to include only that of a given country (case insensitive) or a list of countries when given a comma separated list of values (optional)</param>
        /// <param name="fFlags">(Buyer) Filters work to include that with a given label by name (e.g.: Late) or unique id or a list of either. If empty, includes only work with no flags. (optional)</param>
        /// <param name="fAssignment">(Buyer/Provider) Filters work to assigned providers of the given assignment type, must be one of: &#39;vendor&#39;, &#39;service_company&#39;, &#39;provider&#39;, &#39;any&#39; or a single unique id of a provider or list of ids (CSV) (optional)</param>
        /// <param name="fConfirmation">(Buyer/Provider) Filters to include work which may be given one or some (comma separated) of the following values: &#39;unconfirmed&#39;, &#39;confirmed&#39;, &#39;readytogo&#39;, &#39;onmyway&#39;, &#39;checked-in&#39;, &#39;checked-out&#39;, &#39;in-progress&#39; (optional)</param>
        /// <param name="fFinancing">(Buyer) Filters work to that of a specific financing account or list of financing accounts, either specified by their name or their unique identifier (optional)</param>
        /// <param name="fLocationRadius">(Provider) Filters work orders to a geofence, it may be given two array values the first being a search &#39;string&#39; and the second as integer radius in miles.  You can also optionally leave the first search string value blank to default to the Provider&#39;s home address or set a lattitude and longitude with the pattern &#39;&lt;lat&gt;,&lt;lng&gt;&#39;.  If a radius (in miles) is not include the default value of 60 will be set. (optional)</param>
        /// <param name="fRemoteWork">(Provider) Filters out all work orders with an onsite location when set to &#39;true&#39;. (optional)</param>
        /// <param name="fSearch">Keyword search, case insensitive, searches title, description, location, type of work, buyer, assigned provider and other criteria free-form (optional)</param>
        /// <returns>ApiResponse of WorkOrders</returns>
        public ApiResponse< WorkOrders > GetWorkOrdersWithHttpInfo (string list = null, string columns = null, int? page = null, int? perPage = null, string view = null, bool? sticky = null, string sort = null, string order = null, string f_ = null, int? fMaxApprovalTime = null, string fRating = null, bool? fFlightboardTomorrow = null, bool? fRequests = null, bool? fCounterOffers = null, string fWorkOrderId = null, string fHourly = null, string fFixed = null, string fDevice = null, string fPay = null, string fTemplates = null, string fTypeOfWork = null, string fTimeZone = null, string fMode = null, string fCompany = null, string fWorkedWith = null, string fManager = null, string fClient = null, string fProject = null, string fApprovalWindow = null, string fReviewWindow = null, string fNetwork = null, string fAutoAssign = null, string fSchedule = null, string fCreated = null, string fPublished = null, string fRouted = null, string fPublishedRouted = null, string fCompleted = null, string fApprovedCancelled = null, string fConfirmed = null, string fAssigned = null, string fSavedLocation = null, string fSavedLocationGroup = null, string fCity = null, string fState = null, string fPostalCode = null, string fCountry = null, string fFlags = null, string fAssignment = null, string fConfirmation = null, string fFinancing = null, List<string> fLocationRadius = null, bool? fRemoteWork = null, string fSearch = null)
        {

            var localVarPath = "/workorders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (list != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "list", list)); // query parameter
            if (columns != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "columns", columns)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (view != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (sticky != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sticky", sticky)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (f_ != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_", f_)); // query parameter
            if (fMaxApprovalTime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_max_approval_time", fMaxApprovalTime)); // query parameter
            if (fRating != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_rating", fRating)); // query parameter
            if (fFlightboardTomorrow != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_flightboard_tomorrow", fFlightboardTomorrow)); // query parameter
            if (fRequests != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_requests", fRequests)); // query parameter
            if (fCounterOffers != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_counter_offers", fCounterOffers)); // query parameter
            if (fWorkOrderId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_work_order_id", fWorkOrderId)); // query parameter
            if (fHourly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_hourly", fHourly)); // query parameter
            if (fFixed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_fixed", fFixed)); // query parameter
            if (fDevice != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_device", fDevice)); // query parameter
            if (fPay != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_pay", fPay)); // query parameter
            if (fTemplates != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_templates", fTemplates)); // query parameter
            if (fTypeOfWork != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_type_of_work", fTypeOfWork)); // query parameter
            if (fTimeZone != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_time_zone", fTimeZone)); // query parameter
            if (fMode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_mode", fMode)); // query parameter
            if (fCompany != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_company", fCompany)); // query parameter
            if (fWorkedWith != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_worked_with", fWorkedWith)); // query parameter
            if (fManager != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_manager", fManager)); // query parameter
            if (fClient != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_client", fClient)); // query parameter
            if (fProject != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_project", fProject)); // query parameter
            if (fApprovalWindow != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_approval_window", fApprovalWindow)); // query parameter
            if (fReviewWindow != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_review_window", fReviewWindow)); // query parameter
            if (fNetwork != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_network", fNetwork)); // query parameter
            if (fAutoAssign != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_auto_assign", fAutoAssign)); // query parameter
            if (fSchedule != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_schedule", fSchedule)); // query parameter
            if (fCreated != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_created", fCreated)); // query parameter
            if (fPublished != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_published", fPublished)); // query parameter
            if (fRouted != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_routed", fRouted)); // query parameter
            if (fPublishedRouted != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_published_routed", fPublishedRouted)); // query parameter
            if (fCompleted != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_completed", fCompleted)); // query parameter
            if (fApprovedCancelled != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_approved_cancelled", fApprovedCancelled)); // query parameter
            if (fConfirmed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_confirmed", fConfirmed)); // query parameter
            if (fAssigned != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_assigned", fAssigned)); // query parameter
            if (fSavedLocation != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_saved_location", fSavedLocation)); // query parameter
            if (fSavedLocationGroup != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_saved_location_group", fSavedLocationGroup)); // query parameter
            if (fCity != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_city", fCity)); // query parameter
            if (fState != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_state", fState)); // query parameter
            if (fPostalCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_postal_code", fPostalCode)); // query parameter
            if (fCountry != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_country", fCountry)); // query parameter
            if (fFlags != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_flags", fFlags)); // query parameter
            if (fAssignment != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_assignment", fAssignment)); // query parameter
            if (fConfirmation != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_confirmation", fConfirmation)); // query parameter
            if (fFinancing != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_financing", fFinancing)); // query parameter
            if (fLocationRadius != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "f_location_radius", fLocationRadius)); // query parameter
            if (fRemoteWork != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_remote_work", fRemoteWork)); // query parameter
            if (fSearch != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_search", fSearch)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrders)));
        }

        /// <summary>
        /// Get Work Orders Returns a list of work orders.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Saved group which sandboxes filters, sorts and column preferences in addition to pre-applied settings (e.g.: tabs or saved searches) (optional)</param>
        /// <param name="columns">Specify the columns and their order to return data for (optional)</param>
        /// <param name="page">Specify the page number (optional)</param>
        /// <param name="perPage">Specify the results per page (optional)</param>
        /// <param name="view">Caters the response data to how you&#39;re going to display it. For most uses, you&#39;ll want &#39;list&#39;; other options might include map, schedule, tiles, etc. (optional)</param>
        /// <param name="sticky">Persists filters, columns, and sorts (all but pagination) to re-apply on future requests where omitted. Persists to the &#39;list&#39; specified for the authenticated user (optional, default to false)</param>
        /// <param name="sort">Sorts results by a specified column id (optional)</param>
        /// <param name="order">Whether the sort should be ascending or descending (optional)</param>
        /// <param name="f_">Clears all filters (optional)</param>
        /// <param name="fMaxApprovalTime">(Provider) Filters work to where company has specified their maximum approval day target is less than or equal to provided number of days (optional)</param>
        /// <param name="fRating">(Provider) Filters work by buyer&#39;s star rating (Buyer) Filters work by assigned provider&#39;s star rating - - value can be a single number (e.g.: 3.5) where that value must be met or exceededor a specific inclusive range (e.g.: 3.5,5.0) (optional)</param>
        /// <param name="fFlightboardTomorrow">(Provider) Used by the confirm tomorrow work screen (optional)</param>
        /// <param name="fRequests">(Buyer) Filters work with requests (e.g.: true) or with no requests (e.g.: false) (optional)</param>
        /// <param name="fCounterOffers">(Buyer) Filters work with counter-offer requests of any type (schedule, expense or pay change) when true (e.g.: true) or with no counter offers (e.g.: false) (optional)</param>
        /// <param name="fWorkOrderId">(Buyer/Provider) Filters work by specific work order ids (optional)</param>
        /// <param name="fHourly">(Buyer/Provider) Filters work by that of a minimum hourly rate (includes only hourly or blended pay struture) - - may be given a single value which must be met or exceeded (e.g.: 50) or an inclusive range (e.g.: 35,75) (optional)</param>
        /// <param name="fFixed">(Buyer/Provider) Filters work by that of a minimum fixed rate (includes only fixed or blended pay structure) - - may by given a single value which must be met or exceeded (e.g.: 250) or an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fDevice">(Buyer/Provider) Filters work by that of a minimum per-device rate (includes only device pay structure) - - may by given a single value which must be met or exceeded (e.g.: 250) or an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fPay">(Buyer/Provider) Filters work by that whose minimum or maximum payout meets or exceeds a single value (e.g.: 250) or whose minimum or maximum payout falls between an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fTemplates">(Buyer) Filters work orders created using a given template, provided either by name or it&#39;s unique id. May be given as a single value or as a list of comma-separated values. If the template name itself has a comma, you should use its unique identifier instead (optional)</param>
        /// <param name="fTypeOfWork">(Buyer/Provider) Filters work by that of a given type (e.g.: Networking). May be given a single or comma separated list of values of the full descriptions (Networking) or their unique identifiers (40) - - if the descriptions include commas you should use their unique identifiers (optional)</param>
        /// <param name="fTimeZone">(Buyer/Provider) Filters work by that of a given time zone (e.g.: America/New_York), list of time zones (e.g.: America/New_York,America/Chicago), its offset (e.g.: -5) or a range of offsets (e.g.: -4,-6) (optional)</param>
        /// <param name="fMode">(Buyer/Provider) Filters work by that of a given mode which must be one of the following values: &#39;managed&#39;, &#39;marketplace&#39;, or &#39;any&#39; (optional)</param>
        /// <param name="fCompany">(Buyer/Provider) Filters work by buyer, can be given text which would free-form search all buyers by name (e.g.: &#39;acme&#39;), or a company&#39;s unique identifier (e.g.: &#39;50&#39;). You can also include a list of unique identifiers (e.g.: 50,51,52) to search for multiple buyers (optional)</param>
        /// <param name="fWorkedWith">(Provider) Filters work orders to include only those by company&#39;s I or my vendor/service company has previously worked with (optional)</param>
        /// <param name="fManager">(Buyer) Filters work to that assigned to a given company user, either by name (case insensitive), email or their unique id or a list of comma separated values of any of these (optional)</param>
        /// <param name="fClient">(Buyer) Filters work to that assigned to a given client company, either by name (case insensitive), or their unique id or a list of comma separated values of either of these (optional)</param>
        /// <param name="fProject">(Buyer) Filters work to that assigned to a given project, either by name (case insensitive), or their unique id or a list of comma separated values of either of these (optional)</param>
        /// <param name="fApprovalWindow">(Provider) Filters work to include only companies who set their target approval days equal or less than provided value (e.g.: 2) or within a given range (e.g.: 1,3) (optional)</param>
        /// <param name="fReviewWindow">(Buyer) Filters work to include only work orders that exceed the days given, or the company&#39;s target approval days when given no value (optional)</param>
        /// <param name="fNetwork">(Buyer) Filters work by one or more of your company&#39;s networks. You must have the Field Nation Complete feature to enable new networks. Networks may be provided as a comma separated list of their names (e.g.: Field Nation) or unique ids (optional)</param>
        /// <param name="fAutoAssign">(Buyer) Filters work to that which was auto-assigned/dispatched (when true) or to that which was not (when false) (optional)</param>
        /// <param name="fSchedule">(Buyer/Provider) Filters work by a given service date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fCreated">(Buyer) Filters work created on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fPublished">(Buyer/Provider) Filters work published on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fRouted">(Buyer/Provider) Filters work routed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fPublishedRouted">(Buyer/Provider) Filters work published or routed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fCompleted">(Buyer/Provider) Filters work marked complete on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fApprovedCancelled">(Buyer/Provider) Filters work approved or cancelled on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fConfirmed">(Buyer/Provider) Filters work confirmed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fAssigned">(Buyer/Provider) Filters work assigned on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fSavedLocation">(Buyer) Filters work to that assigned to a saved location by name (e.g.: Acme store #1) or its unique identifier. Can also be given a list of comma separated values of either type. If the name includes a comma, you should use a list of the unique identifiers (optional)</param>
        /// <param name="fSavedLocationGroup">(Buyer) Filters work to that assigned to a saved location group by name (e.g.: Acme stores) or its unique identifier. Can also be given a list of comma separated values of either type. If the name includes a comma, you should use a list of the unique identifiers (optional)</param>
        /// <param name="fCity">(Buyer/Provider) Filters work to include only that of a given city name (case insensitive) or a list of cities when given a comma separated list of values (optional)</param>
        /// <param name="fState">(Buyer/Provider) Filters work to include only that of a given state (case insensitive) or a list of states when given a comma separated list of values (optional)</param>
        /// <param name="fPostalCode">(Buyer/Provider) Filters work to include only that of a given postal code (case insensitive) or a list of postal codes when given a comma separated list of values (optional)</param>
        /// <param name="fCountry">(Buyer/Provider) Filters work to include only that of a given country (case insensitive) or a list of countries when given a comma separated list of values (optional)</param>
        /// <param name="fFlags">(Buyer) Filters work to include that with a given label by name (e.g.: Late) or unique id or a list of either. If empty, includes only work with no flags. (optional)</param>
        /// <param name="fAssignment">(Buyer/Provider) Filters work to assigned providers of the given assignment type, must be one of: &#39;vendor&#39;, &#39;service_company&#39;, &#39;provider&#39;, &#39;any&#39; or a single unique id of a provider or list of ids (CSV) (optional)</param>
        /// <param name="fConfirmation">(Buyer/Provider) Filters to include work which may be given one or some (comma separated) of the following values: &#39;unconfirmed&#39;, &#39;confirmed&#39;, &#39;readytogo&#39;, &#39;onmyway&#39;, &#39;checked-in&#39;, &#39;checked-out&#39;, &#39;in-progress&#39; (optional)</param>
        /// <param name="fFinancing">(Buyer) Filters work to that of a specific financing account or list of financing accounts, either specified by their name or their unique identifier (optional)</param>
        /// <param name="fLocationRadius">(Provider) Filters work orders to a geofence, it may be given two array values the first being a search &#39;string&#39; and the second as integer radius in miles.  You can also optionally leave the first search string value blank to default to the Provider&#39;s home address or set a lattitude and longitude with the pattern &#39;&lt;lat&gt;,&lt;lng&gt;&#39;.  If a radius (in miles) is not include the default value of 60 will be set. (optional)</param>
        /// <param name="fRemoteWork">(Provider) Filters out all work orders with an onsite location when set to &#39;true&#39;. (optional)</param>
        /// <param name="fSearch">Keyword search, case insensitive, searches title, description, location, type of work, buyer, assigned provider and other criteria free-form (optional)</param>
        /// <returns>Task of WorkOrders</returns>
        public async System.Threading.Tasks.Task<WorkOrders> GetWorkOrdersAsync (string list = null, string columns = null, int? page = null, int? perPage = null, string view = null, bool? sticky = null, string sort = null, string order = null, string f_ = null, int? fMaxApprovalTime = null, string fRating = null, bool? fFlightboardTomorrow = null, bool? fRequests = null, bool? fCounterOffers = null, string fWorkOrderId = null, string fHourly = null, string fFixed = null, string fDevice = null, string fPay = null, string fTemplates = null, string fTypeOfWork = null, string fTimeZone = null, string fMode = null, string fCompany = null, string fWorkedWith = null, string fManager = null, string fClient = null, string fProject = null, string fApprovalWindow = null, string fReviewWindow = null, string fNetwork = null, string fAutoAssign = null, string fSchedule = null, string fCreated = null, string fPublished = null, string fRouted = null, string fPublishedRouted = null, string fCompleted = null, string fApprovedCancelled = null, string fConfirmed = null, string fAssigned = null, string fSavedLocation = null, string fSavedLocationGroup = null, string fCity = null, string fState = null, string fPostalCode = null, string fCountry = null, string fFlags = null, string fAssignment = null, string fConfirmation = null, string fFinancing = null, List<string> fLocationRadius = null, bool? fRemoteWork = null, string fSearch = null)
        {
             ApiResponse<WorkOrders> localVarResponse = await GetWorkOrdersAsyncWithHttpInfo(list, columns, page, perPage, view, sticky, sort, order, f_, fMaxApprovalTime, fRating, fFlightboardTomorrow, fRequests, fCounterOffers, fWorkOrderId, fHourly, fFixed, fDevice, fPay, fTemplates, fTypeOfWork, fTimeZone, fMode, fCompany, fWorkedWith, fManager, fClient, fProject, fApprovalWindow, fReviewWindow, fNetwork, fAutoAssign, fSchedule, fCreated, fPublished, fRouted, fPublishedRouted, fCompleted, fApprovedCancelled, fConfirmed, fAssigned, fSavedLocation, fSavedLocationGroup, fCity, fState, fPostalCode, fCountry, fFlags, fAssignment, fConfirmation, fFinancing, fLocationRadius, fRemoteWork, fSearch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Work Orders Returns a list of work orders.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Saved group which sandboxes filters, sorts and column preferences in addition to pre-applied settings (e.g.: tabs or saved searches) (optional)</param>
        /// <param name="columns">Specify the columns and their order to return data for (optional)</param>
        /// <param name="page">Specify the page number (optional)</param>
        /// <param name="perPage">Specify the results per page (optional)</param>
        /// <param name="view">Caters the response data to how you&#39;re going to display it. For most uses, you&#39;ll want &#39;list&#39;; other options might include map, schedule, tiles, etc. (optional)</param>
        /// <param name="sticky">Persists filters, columns, and sorts (all but pagination) to re-apply on future requests where omitted. Persists to the &#39;list&#39; specified for the authenticated user (optional, default to false)</param>
        /// <param name="sort">Sorts results by a specified column id (optional)</param>
        /// <param name="order">Whether the sort should be ascending or descending (optional)</param>
        /// <param name="f_">Clears all filters (optional)</param>
        /// <param name="fMaxApprovalTime">(Provider) Filters work to where company has specified their maximum approval day target is less than or equal to provided number of days (optional)</param>
        /// <param name="fRating">(Provider) Filters work by buyer&#39;s star rating (Buyer) Filters work by assigned provider&#39;s star rating - - value can be a single number (e.g.: 3.5) where that value must be met or exceededor a specific inclusive range (e.g.: 3.5,5.0) (optional)</param>
        /// <param name="fFlightboardTomorrow">(Provider) Used by the confirm tomorrow work screen (optional)</param>
        /// <param name="fRequests">(Buyer) Filters work with requests (e.g.: true) or with no requests (e.g.: false) (optional)</param>
        /// <param name="fCounterOffers">(Buyer) Filters work with counter-offer requests of any type (schedule, expense or pay change) when true (e.g.: true) or with no counter offers (e.g.: false) (optional)</param>
        /// <param name="fWorkOrderId">(Buyer/Provider) Filters work by specific work order ids (optional)</param>
        /// <param name="fHourly">(Buyer/Provider) Filters work by that of a minimum hourly rate (includes only hourly or blended pay struture) - - may be given a single value which must be met or exceeded (e.g.: 50) or an inclusive range (e.g.: 35,75) (optional)</param>
        /// <param name="fFixed">(Buyer/Provider) Filters work by that of a minimum fixed rate (includes only fixed or blended pay structure) - - may by given a single value which must be met or exceeded (e.g.: 250) or an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fDevice">(Buyer/Provider) Filters work by that of a minimum per-device rate (includes only device pay structure) - - may by given a single value which must be met or exceeded (e.g.: 250) or an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fPay">(Buyer/Provider) Filters work by that whose minimum or maximum payout meets or exceeds a single value (e.g.: 250) or whose minimum or maximum payout falls between an inclusive range (e.g.: 250,500) (optional)</param>
        /// <param name="fTemplates">(Buyer) Filters work orders created using a given template, provided either by name or it&#39;s unique id. May be given as a single value or as a list of comma-separated values. If the template name itself has a comma, you should use its unique identifier instead (optional)</param>
        /// <param name="fTypeOfWork">(Buyer/Provider) Filters work by that of a given type (e.g.: Networking). May be given a single or comma separated list of values of the full descriptions (Networking) or their unique identifiers (40) - - if the descriptions include commas you should use their unique identifiers (optional)</param>
        /// <param name="fTimeZone">(Buyer/Provider) Filters work by that of a given time zone (e.g.: America/New_York), list of time zones (e.g.: America/New_York,America/Chicago), its offset (e.g.: -5) or a range of offsets (e.g.: -4,-6) (optional)</param>
        /// <param name="fMode">(Buyer/Provider) Filters work by that of a given mode which must be one of the following values: &#39;managed&#39;, &#39;marketplace&#39;, or &#39;any&#39; (optional)</param>
        /// <param name="fCompany">(Buyer/Provider) Filters work by buyer, can be given text which would free-form search all buyers by name (e.g.: &#39;acme&#39;), or a company&#39;s unique identifier (e.g.: &#39;50&#39;). You can also include a list of unique identifiers (e.g.: 50,51,52) to search for multiple buyers (optional)</param>
        /// <param name="fWorkedWith">(Provider) Filters work orders to include only those by company&#39;s I or my vendor/service company has previously worked with (optional)</param>
        /// <param name="fManager">(Buyer) Filters work to that assigned to a given company user, either by name (case insensitive), email or their unique id or a list of comma separated values of any of these (optional)</param>
        /// <param name="fClient">(Buyer) Filters work to that assigned to a given client company, either by name (case insensitive), or their unique id or a list of comma separated values of either of these (optional)</param>
        /// <param name="fProject">(Buyer) Filters work to that assigned to a given project, either by name (case insensitive), or their unique id or a list of comma separated values of either of these (optional)</param>
        /// <param name="fApprovalWindow">(Provider) Filters work to include only companies who set their target approval days equal or less than provided value (e.g.: 2) or within a given range (e.g.: 1,3) (optional)</param>
        /// <param name="fReviewWindow">(Buyer) Filters work to include only work orders that exceed the days given, or the company&#39;s target approval days when given no value (optional)</param>
        /// <param name="fNetwork">(Buyer) Filters work by one or more of your company&#39;s networks. You must have the Field Nation Complete feature to enable new networks. Networks may be provided as a comma separated list of their names (e.g.: Field Nation) or unique ids (optional)</param>
        /// <param name="fAutoAssign">(Buyer) Filters work to that which was auto-assigned/dispatched (when true) or to that which was not (when false) (optional)</param>
        /// <param name="fSchedule">(Buyer/Provider) Filters work by a given service date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fCreated">(Buyer) Filters work created on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fPublished">(Buyer/Provider) Filters work published on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fRouted">(Buyer/Provider) Filters work routed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fPublishedRouted">(Buyer/Provider) Filters work published or routed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fCompleted">(Buyer/Provider) Filters work marked complete on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fApprovedCancelled">(Buyer/Provider) Filters work approved or cancelled on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fConfirmed">(Buyer/Provider) Filters work confirmed on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fAssigned">(Buyer/Provider) Filters work assigned on a date, including the whole day when provided a single date (e.g.: 2016-01-01), or between two dates (inclusive) when given a range (e.g.: 2016-01-01,2016-01-31). Incoming value is assumed to be UTC and will be converted to the work order&#39;s local time when comparing (optional)</param>
        /// <param name="fSavedLocation">(Buyer) Filters work to that assigned to a saved location by name (e.g.: Acme store #1) or its unique identifier. Can also be given a list of comma separated values of either type. If the name includes a comma, you should use a list of the unique identifiers (optional)</param>
        /// <param name="fSavedLocationGroup">(Buyer) Filters work to that assigned to a saved location group by name (e.g.: Acme stores) or its unique identifier. Can also be given a list of comma separated values of either type. If the name includes a comma, you should use a list of the unique identifiers (optional)</param>
        /// <param name="fCity">(Buyer/Provider) Filters work to include only that of a given city name (case insensitive) or a list of cities when given a comma separated list of values (optional)</param>
        /// <param name="fState">(Buyer/Provider) Filters work to include only that of a given state (case insensitive) or a list of states when given a comma separated list of values (optional)</param>
        /// <param name="fPostalCode">(Buyer/Provider) Filters work to include only that of a given postal code (case insensitive) or a list of postal codes when given a comma separated list of values (optional)</param>
        /// <param name="fCountry">(Buyer/Provider) Filters work to include only that of a given country (case insensitive) or a list of countries when given a comma separated list of values (optional)</param>
        /// <param name="fFlags">(Buyer) Filters work to include that with a given label by name (e.g.: Late) or unique id or a list of either. If empty, includes only work with no flags. (optional)</param>
        /// <param name="fAssignment">(Buyer/Provider) Filters work to assigned providers of the given assignment type, must be one of: &#39;vendor&#39;, &#39;service_company&#39;, &#39;provider&#39;, &#39;any&#39; or a single unique id of a provider or list of ids (CSV) (optional)</param>
        /// <param name="fConfirmation">(Buyer/Provider) Filters to include work which may be given one or some (comma separated) of the following values: &#39;unconfirmed&#39;, &#39;confirmed&#39;, &#39;readytogo&#39;, &#39;onmyway&#39;, &#39;checked-in&#39;, &#39;checked-out&#39;, &#39;in-progress&#39; (optional)</param>
        /// <param name="fFinancing">(Buyer) Filters work to that of a specific financing account or list of financing accounts, either specified by their name or their unique identifier (optional)</param>
        /// <param name="fLocationRadius">(Provider) Filters work orders to a geofence, it may be given two array values the first being a search &#39;string&#39; and the second as integer radius in miles.  You can also optionally leave the first search string value blank to default to the Provider&#39;s home address or set a lattitude and longitude with the pattern &#39;&lt;lat&gt;,&lt;lng&gt;&#39;.  If a radius (in miles) is not include the default value of 60 will be set. (optional)</param>
        /// <param name="fRemoteWork">(Provider) Filters out all work orders with an onsite location when set to &#39;true&#39;. (optional)</param>
        /// <param name="fSearch">Keyword search, case insensitive, searches title, description, location, type of work, buyer, assigned provider and other criteria free-form (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrders>> GetWorkOrdersAsyncWithHttpInfo (string list = null, string columns = null, int? page = null, int? perPage = null, string view = null, bool? sticky = null, string sort = null, string order = null, string f_ = null, int? fMaxApprovalTime = null, string fRating = null, bool? fFlightboardTomorrow = null, bool? fRequests = null, bool? fCounterOffers = null, string fWorkOrderId = null, string fHourly = null, string fFixed = null, string fDevice = null, string fPay = null, string fTemplates = null, string fTypeOfWork = null, string fTimeZone = null, string fMode = null, string fCompany = null, string fWorkedWith = null, string fManager = null, string fClient = null, string fProject = null, string fApprovalWindow = null, string fReviewWindow = null, string fNetwork = null, string fAutoAssign = null, string fSchedule = null, string fCreated = null, string fPublished = null, string fRouted = null, string fPublishedRouted = null, string fCompleted = null, string fApprovedCancelled = null, string fConfirmed = null, string fAssigned = null, string fSavedLocation = null, string fSavedLocationGroup = null, string fCity = null, string fState = null, string fPostalCode = null, string fCountry = null, string fFlags = null, string fAssignment = null, string fConfirmation = null, string fFinancing = null, List<string> fLocationRadius = null, bool? fRemoteWork = null, string fSearch = null)
        {

            var localVarPath = "/workorders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (list != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "list", list)); // query parameter
            if (columns != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "columns", columns)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (view != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (sticky != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sticky", sticky)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (f_ != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_", f_)); // query parameter
            if (fMaxApprovalTime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_max_approval_time", fMaxApprovalTime)); // query parameter
            if (fRating != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_rating", fRating)); // query parameter
            if (fFlightboardTomorrow != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_flightboard_tomorrow", fFlightboardTomorrow)); // query parameter
            if (fRequests != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_requests", fRequests)); // query parameter
            if (fCounterOffers != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_counter_offers", fCounterOffers)); // query parameter
            if (fWorkOrderId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_work_order_id", fWorkOrderId)); // query parameter
            if (fHourly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_hourly", fHourly)); // query parameter
            if (fFixed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_fixed", fFixed)); // query parameter
            if (fDevice != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_device", fDevice)); // query parameter
            if (fPay != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_pay", fPay)); // query parameter
            if (fTemplates != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_templates", fTemplates)); // query parameter
            if (fTypeOfWork != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_type_of_work", fTypeOfWork)); // query parameter
            if (fTimeZone != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_time_zone", fTimeZone)); // query parameter
            if (fMode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_mode", fMode)); // query parameter
            if (fCompany != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_company", fCompany)); // query parameter
            if (fWorkedWith != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_worked_with", fWorkedWith)); // query parameter
            if (fManager != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_manager", fManager)); // query parameter
            if (fClient != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_client", fClient)); // query parameter
            if (fProject != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_project", fProject)); // query parameter
            if (fApprovalWindow != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_approval_window", fApprovalWindow)); // query parameter
            if (fReviewWindow != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_review_window", fReviewWindow)); // query parameter
            if (fNetwork != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_network", fNetwork)); // query parameter
            if (fAutoAssign != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_auto_assign", fAutoAssign)); // query parameter
            if (fSchedule != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_schedule", fSchedule)); // query parameter
            if (fCreated != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_created", fCreated)); // query parameter
            if (fPublished != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_published", fPublished)); // query parameter
            if (fRouted != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_routed", fRouted)); // query parameter
            if (fPublishedRouted != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_published_routed", fPublishedRouted)); // query parameter
            if (fCompleted != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_completed", fCompleted)); // query parameter
            if (fApprovedCancelled != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_approved_cancelled", fApprovedCancelled)); // query parameter
            if (fConfirmed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_confirmed", fConfirmed)); // query parameter
            if (fAssigned != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_assigned", fAssigned)); // query parameter
            if (fSavedLocation != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_saved_location", fSavedLocation)); // query parameter
            if (fSavedLocationGroup != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_saved_location_group", fSavedLocationGroup)); // query parameter
            if (fCity != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_city", fCity)); // query parameter
            if (fState != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_state", fState)); // query parameter
            if (fPostalCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_postal_code", fPostalCode)); // query parameter
            if (fCountry != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_country", fCountry)); // query parameter
            if (fFlags != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_flags", fFlags)); // query parameter
            if (fAssignment != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_assignment", fAssignment)); // query parameter
            if (fConfirmation != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_confirmation", fConfirmation)); // query parameter
            if (fFinancing != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_financing", fFinancing)); // query parameter
            if (fLocationRadius != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "f_location_radius", fLocationRadius)); // query parameter
            if (fRemoteWork != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_remote_work", fRemoteWork)); // query parameter
            if (fSearch != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "f_search", fSearch)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrders)));
        }

        /// <summary>
        /// Group Task by Work Order and Task Regroups a task associated with a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="group">New group</param>
        /// <param name="destination">beginning or end (position in new group)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder GroupTaskByWorkOrderAndTask (int? workOrderId, int? taskId, string group, string destination)
        {
             ApiResponse<WorkOrder> localVarResponse = GroupTaskByWorkOrderAndTaskWithHttpInfo(workOrderId, taskId, group, destination);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Group Task by Work Order and Task Regroups a task associated with a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="group">New group</param>
        /// <param name="destination">beginning or end (position in new group)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > GroupTaskByWorkOrderAndTaskWithHttpInfo (int? workOrderId, int? taskId, string group, string destination)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GroupTaskByWorkOrderAndTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling WorkorderApi->GroupTaskByWorkOrderAndTask");
            // verify the required parameter 'group' is set
            if (group == null)
                throw new ApiException(400, "Missing required parameter 'group' when calling WorkorderApi->GroupTaskByWorkOrderAndTask");
            // verify the required parameter 'destination' is set
            if (destination == null)
                throw new ApiException(400, "Missing required parameter 'destination' when calling WorkorderApi->GroupTaskByWorkOrderAndTask");

            var localVarPath = "/workorders/{work_order_id}/tasks/{task_id}/group/{group}/{destination}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (group != null) localVarPathParams.Add("group", Configuration.ApiClient.ParameterToString(group)); // path parameter
            if (destination != null) localVarPathParams.Add("destination", Configuration.ApiClient.ParameterToString(destination)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupTaskByWorkOrderAndTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Group Task by Work Order and Task Regroups a task associated with a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="group">New group</param>
        /// <param name="destination">beginning or end (position in new group)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> GroupTaskByWorkOrderAndTaskAsync (int? workOrderId, int? taskId, string group, string destination)
        {
             ApiResponse<WorkOrder> localVarResponse = await GroupTaskByWorkOrderAndTaskAsyncWithHttpInfo(workOrderId, taskId, group, destination);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Group Task by Work Order and Task Regroups a task associated with a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="group">New group</param>
        /// <param name="destination">beginning or end (position in new group)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> GroupTaskByWorkOrderAndTaskAsyncWithHttpInfo (int? workOrderId, int? taskId, string group, string destination)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->GroupTaskByWorkOrderAndTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling WorkorderApi->GroupTaskByWorkOrderAndTask");
            // verify the required parameter 'group' is set
            if (group == null)
                throw new ApiException(400, "Missing required parameter 'group' when calling WorkorderApi->GroupTaskByWorkOrderAndTask");
            // verify the required parameter 'destination' is set
            if (destination == null)
                throw new ApiException(400, "Missing required parameter 'destination' when calling WorkorderApi->GroupTaskByWorkOrderAndTask");

            var localVarPath = "/workorders/{work_order_id}/tasks/{task_id}/group/{group}/{destination}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (group != null) localVarPathParams.Add("group", Configuration.ApiClient.ParameterToString(group)); // path parameter
            if (destination != null) localVarPathParams.Add("destination", Configuration.ApiClient.ParameterToString(destination)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupTaskByWorkOrderAndTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Incomplete Work Order By Work Order Marks a work order incomplete and moves it to work done status
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="reason">Reason (optional)</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder IncompleteWorkOrderByWorkOrder (int? workOrderId, string reason = null, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = IncompleteWorkOrderByWorkOrderWithHttpInfo(workOrderId, reason, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Incomplete Work Order By Work Order Marks a work order incomplete and moves it to work done status
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="reason">Reason (optional)</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > IncompleteWorkOrderByWorkOrderWithHttpInfo (int? workOrderId, string reason = null, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->IncompleteWorkOrderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (reason != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "reason", reason)); // query parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncompleteWorkOrderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Incomplete Work Order By Work Order Marks a work order incomplete and moves it to work done status
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="reason">Reason (optional)</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> IncompleteWorkOrderByWorkOrderAsync (int? workOrderId, string reason = null, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await IncompleteWorkOrderByWorkOrderAsyncWithHttpInfo(workOrderId, reason, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Incomplete Work Order By Work Order Marks a work order incomplete and moves it to work done status
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="reason">Reason (optional)</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> IncompleteWorkOrderByWorkOrderAsyncWithHttpInfo (int? workOrderId, string reason = null, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->IncompleteWorkOrderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (reason != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "reason", reason)); // query parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncompleteWorkOrderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Mass Accept Work Order by Work Order Mass Accept with ETA
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eta">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns></returns>
        public void MassAcceptWorkOrderByWorkOrder (EtaMassAccept eta, bool? async = null)
        {
             MassAcceptWorkOrderByWorkOrderWithHttpInfo(eta, async);
        }

        /// <summary>
        /// Mass Accept Work Order by Work Order Mass Accept with ETA
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eta">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MassAcceptWorkOrderByWorkOrderWithHttpInfo (EtaMassAccept eta, bool? async = null)
        {
            // verify the required parameter 'eta' is set
            if (eta == null)
                throw new ApiException(400, "Missing required parameter 'eta' when calling WorkorderApi->MassAcceptWorkOrderByWorkOrder");

            var localVarPath = "/workorders/mass-accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (eta != null && eta.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eta); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eta; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MassAcceptWorkOrderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mass Accept Work Order by Work Order Mass Accept with ETA
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eta">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MassAcceptWorkOrderByWorkOrderAsync (EtaMassAccept eta, bool? async = null)
        {
             await MassAcceptWorkOrderByWorkOrderAsyncWithHttpInfo(eta, async);

        }

        /// <summary>
        /// Mass Accept Work Order by Work Order Mass Accept with ETA
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eta">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MassAcceptWorkOrderByWorkOrderAsyncWithHttpInfo (EtaMassAccept eta, bool? async = null)
        {
            // verify the required parameter 'eta' is set
            if (eta == null)
                throw new ApiException(400, "Missing required parameter 'eta' when calling WorkorderApi->MassAcceptWorkOrderByWorkOrder");

            var localVarPath = "/workorders/mass-accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (eta != null && eta.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eta); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eta; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MassAcceptWorkOrderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mass Requests Work order mass requests
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requests">JSON Payload</param>
        /// <returns></returns>
        public void MassRequests (Requests requests)
        {
             MassRequestsWithHttpInfo(requests);
        }

        /// <summary>
        /// Mass Requests Work order mass requests
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requests">JSON Payload</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MassRequestsWithHttpInfo (Requests requests)
        {
            // verify the required parameter 'requests' is set
            if (requests == null)
                throw new ApiException(400, "Missing required parameter 'requests' when calling WorkorderApi->MassRequests");

            var localVarPath = "/workorders/mass-requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requests != null && requests.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requests); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requests; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MassRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mass Requests Work order mass requests
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requests">JSON Payload</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MassRequestsAsync (Requests requests)
        {
             await MassRequestsAsyncWithHttpInfo(requests);

        }

        /// <summary>
        /// Mass Requests Work order mass requests
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requests">JSON Payload</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MassRequestsAsyncWithHttpInfo (Requests requests)
        {
            // verify the required parameter 'requests' is set
            if (requests == null)
                throw new ApiException(400, "Missing required parameter 'requests' when calling WorkorderApi->MassRequests");

            var localVarPath = "/workorders/mass-requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requests != null && requests.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requests); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requests; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MassRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Publish by Work Order Publishes a work order to the marketplace where it can garner requests. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder PublishByWorkOrder (int? workOrderId, bool? async = null, Publish body = null)
        {
             ApiResponse<WorkOrder> localVarResponse = PublishByWorkOrderWithHttpInfo(workOrderId, async, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Publish by Work Order Publishes a work order to the marketplace where it can garner requests. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > PublishByWorkOrderWithHttpInfo (int? workOrderId, bool? async = null, Publish body = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->PublishByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Publish by Work Order Publishes a work order to the marketplace where it can garner requests. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> PublishByWorkOrderAsync (int? workOrderId, bool? async = null, Publish body = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await PublishByWorkOrderAsyncWithHttpInfo(workOrderId, async, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Publish by Work Order Publishes a work order to the marketplace where it can garner requests. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> PublishByWorkOrderAsyncWithHttpInfo (int? workOrderId, bool? async = null, Publish body = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->PublishByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Remove provider by work order Unassigns and removes a provider for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns></returns>
        public void RemoveProviderByWorkOrder (int? workOrderId)
        {
             RemoveProviderByWorkOrderWithHttpInfo(workOrderId);
        }

        /// <summary>
        /// Remove provider by work order Unassigns and removes a provider for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveProviderByWorkOrderWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->RemoveProviderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/provider/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveProviderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove provider by work order Unassigns and removes a provider for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveProviderByWorkOrderAsync (int? workOrderId)
        {
             await RemoveProviderByWorkOrderAsyncWithHttpInfo(workOrderId);

        }

        /// <summary>
        /// Remove provider by work order Unassigns and removes a provider for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveProviderByWorkOrderAsyncWithHttpInfo (int? workOrderId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->RemoveProviderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/provider/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveProviderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove Qualification by Work Order Remove qualification work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualificationId">ID of qualification</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder RemoveQualificationByWorkOrder (int? workOrderId, int? qualificationId)
        {
             ApiResponse<WorkOrder> localVarResponse = RemoveQualificationByWorkOrderWithHttpInfo(workOrderId, qualificationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Qualification by Work Order Remove qualification work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualificationId">ID of qualification</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > RemoveQualificationByWorkOrderWithHttpInfo (int? workOrderId, int? qualificationId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->RemoveQualificationByWorkOrder");
            // verify the required parameter 'qualificationId' is set
            if (qualificationId == null)
                throw new ApiException(400, "Missing required parameter 'qualificationId' when calling WorkorderApi->RemoveQualificationByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/qualifications/{qualification_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (qualificationId != null) localVarPathParams.Add("qualification_id", Configuration.ApiClient.ParameterToString(qualificationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveQualificationByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Remove Qualification by Work Order Remove qualification work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualificationId">ID of qualification</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> RemoveQualificationByWorkOrderAsync (int? workOrderId, int? qualificationId)
        {
             ApiResponse<WorkOrder> localVarResponse = await RemoveQualificationByWorkOrderAsyncWithHttpInfo(workOrderId, qualificationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Qualification by Work Order Remove qualification work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualificationId">ID of qualification</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> RemoveQualificationByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? qualificationId)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->RemoveQualificationByWorkOrder");
            // verify the required parameter 'qualificationId' is set
            if (qualificationId == null)
                throw new ApiException(400, "Missing required parameter 'qualificationId' when calling WorkorderApi->RemoveQualificationByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/qualifications/{qualification_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (qualificationId != null) localVarPathParams.Add("qualification_id", Configuration.ApiClient.ParameterToString(qualificationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveQualificationByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Reply Message by Work Order Reply a message on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <param name="json">JSON payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Messages</returns>
        public Messages ReplyMessageByWorkOrder (int? workOrderId, int? messageId, Message json, bool? async = null)
        {
             ApiResponse<Messages> localVarResponse = ReplyMessageByWorkOrderWithHttpInfo(workOrderId, messageId, json, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reply Message by Work Order Reply a message on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <param name="json">JSON payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of Messages</returns>
        public ApiResponse< Messages > ReplyMessageByWorkOrderWithHttpInfo (int? workOrderId, int? messageId, Message json, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->ReplyMessageByWorkOrder");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling WorkorderApi->ReplyMessageByWorkOrder");
            // verify the required parameter 'json' is set
            if (json == null)
                throw new ApiException(400, "Missing required parameter 'json' when calling WorkorderApi->ReplyMessageByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (json != null && json.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(json); // http body (model) parameter
            }
            else
            {
                localVarPostBody = json; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplyMessageByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Messages>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Messages) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Messages)));
        }

        /// <summary>
        /// Reply Message by Work Order Reply a message on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <param name="json">JSON payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of Messages</returns>
        public async System.Threading.Tasks.Task<Messages> ReplyMessageByWorkOrderAsync (int? workOrderId, int? messageId, Message json, bool? async = null)
        {
             ApiResponse<Messages> localVarResponse = await ReplyMessageByWorkOrderAsyncWithHttpInfo(workOrderId, messageId, json, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reply Message by Work Order Reply a message on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <param name="json">JSON payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (Messages)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Messages>> ReplyMessageByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? messageId, Message json, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->ReplyMessageByWorkOrder");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling WorkorderApi->ReplyMessageByWorkOrder");
            // verify the required parameter 'json' is set
            if (json == null)
                throw new ApiException(400, "Missing required parameter 'json' when calling WorkorderApi->ReplyMessageByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (json != null && json.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(json); // http body (model) parameter
            }
            else
            {
                localVarPostBody = json; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplyMessageByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Messages>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Messages) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Messages)));
        }

        /// <summary>
        /// Request by Work Order Request or un-hide a request for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="request">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder RequestByWorkOrder (int? workOrderId, Request request, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = RequestByWorkOrderWithHttpInfo(workOrderId, request, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request by Work Order Request or un-hide a request for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="request">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > RequestByWorkOrderWithHttpInfo (int? workOrderId, Request request, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->RequestByWorkOrder");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling WorkorderApi->RequestByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Request by Work Order Request or un-hide a request for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="request">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> RequestByWorkOrderAsync (int? workOrderId, Request request, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await RequestByWorkOrderAsyncWithHttpInfo(workOrderId, request, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request by Work Order Request or un-hide a request for a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="request">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> RequestByWorkOrderAsyncWithHttpInfo (int? workOrderId, Request request, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->RequestByWorkOrder");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling WorkorderApi->RequestByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Revert Work Order To Draft by Work Order Reverts a work order to draft status 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder RevertWorkOrderToDraftByWorkOrder (int? workOrderId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = RevertWorkOrderToDraftByWorkOrderWithHttpInfo(workOrderId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Revert Work Order To Draft by Work Order Reverts a work order to draft status 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > RevertWorkOrderToDraftByWorkOrderWithHttpInfo (int? workOrderId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->RevertWorkOrderToDraftByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/draft";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevertWorkOrderToDraftByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Revert Work Order To Draft by Work Order Reverts a work order to draft status 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> RevertWorkOrderToDraftByWorkOrderAsync (int? workOrderId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await RevertWorkOrderToDraftByWorkOrderAsyncWithHttpInfo(workOrderId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Revert Work Order To Draft by Work Order Reverts a work order to draft status 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> RevertWorkOrderToDraftByWorkOrderAsyncWithHttpInfo (int? workOrderId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->RevertWorkOrderToDraftByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/draft";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevertWorkOrderToDraftByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Route User by Work Order Route a user to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="route">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>User</returns>
        public User RouteUserByWorkOrder (int? workOrderId, Route route, bool? async = null)
        {
             ApiResponse<User> localVarResponse = RouteUserByWorkOrderWithHttpInfo(workOrderId, route, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Route User by Work Order Route a user to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="route">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > RouteUserByWorkOrderWithHttpInfo (int? workOrderId, Route route, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->RouteUserByWorkOrder");
            // verify the required parameter 'route' is set
            if (route == null)
                throw new ApiException(400, "Missing required parameter 'route' when calling WorkorderApi->RouteUserByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/route";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (route != null && route.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(route); // http body (model) parameter
            }
            else
            {
                localVarPostBody = route; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RouteUserByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Route User by Work Order Route a user to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="route">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> RouteUserByWorkOrderAsync (int? workOrderId, Route route, bool? async = null)
        {
             ApiResponse<User> localVarResponse = await RouteUserByWorkOrderAsyncWithHttpInfo(workOrderId, route, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Route User by Work Order Route a user to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="route">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> RouteUserByWorkOrderAsyncWithHttpInfo (int? workOrderId, Route route, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->RouteUserByWorkOrder");
            // verify the required parameter 'route' is set
            if (route == null)
                throw new ApiException(400, "Missing required parameter 'route' when calling WorkorderApi->RouteUserByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/route";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (route != null && route.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(route); // http body (model) parameter
            }
            else
            {
                localVarPostBody = route; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RouteUserByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Unroute User by Work Order Unroute a user from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="route">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>User</returns>
        public User UnRouteUserByWorkOrder (int? workOrderId, Route route, bool? async = null)
        {
             ApiResponse<User> localVarResponse = UnRouteUserByWorkOrderWithHttpInfo(workOrderId, route, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unroute User by Work Order Unroute a user from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="route">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > UnRouteUserByWorkOrderWithHttpInfo (int? workOrderId, Route route, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UnRouteUserByWorkOrder");
            // verify the required parameter 'route' is set
            if (route == null)
                throw new ApiException(400, "Missing required parameter 'route' when calling WorkorderApi->UnRouteUserByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/route";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (route != null && route.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(route); // http body (model) parameter
            }
            else
            {
                localVarPostBody = route; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnRouteUserByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Unroute User by Work Order Unroute a user from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="route">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UnRouteUserByWorkOrderAsync (int? workOrderId, Route route, bool? async = null)
        {
             ApiResponse<User> localVarResponse = await UnRouteUserByWorkOrderAsyncWithHttpInfo(workOrderId, route, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unroute User by Work Order Unroute a user from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="route">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UnRouteUserByWorkOrderAsyncWithHttpInfo (int? workOrderId, Route route, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UnRouteUserByWorkOrder");
            // verify the required parameter 'route' is set
            if (route == null)
                throw new ApiException(400, "Missing required parameter 'route' when calling WorkorderApi->UnRouteUserByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/route";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (route != null && route.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(route); // http body (model) parameter
            }
            else
            {
                localVarPostBody = route; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnRouteUserByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Unapprove Work Order By Work Order Unapproves a completed work order and moves it to work done status
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UnapproveWorkOrderByWorkOrder (int? workOrderId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UnapproveWorkOrderByWorkOrderWithHttpInfo(workOrderId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unapprove Work Order By Work Order Unapproves a completed work order and moves it to work done status
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UnapproveWorkOrderByWorkOrderWithHttpInfo (int? workOrderId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UnapproveWorkOrderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/approve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnapproveWorkOrderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Unapprove Work Order By Work Order Unapproves a completed work order and moves it to work done status
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UnapproveWorkOrderByWorkOrderAsync (int? workOrderId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UnapproveWorkOrderByWorkOrderAsyncWithHttpInfo(workOrderId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unapprove Work Order By Work Order Unapproves a completed work order and moves it to work done status
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UnapproveWorkOrderByWorkOrderAsyncWithHttpInfo (int? workOrderId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UnapproveWorkOrderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/approve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnapproveWorkOrderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Unassign User by Work Order and User Unassign user from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="assignee">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>User</returns>
        public User UnassignUserByWorkOrderAndUser (int? workOrderId, Assignee assignee, bool? async = null)
        {
             ApiResponse<User> localVarResponse = UnassignUserByWorkOrderAndUserWithHttpInfo(workOrderId, assignee, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unassign User by Work Order and User Unassign user from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="assignee">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > UnassignUserByWorkOrderAndUserWithHttpInfo (int? workOrderId, Assignee assignee, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UnassignUserByWorkOrderAndUser");
            // verify the required parameter 'assignee' is set
            if (assignee == null)
                throw new ApiException(400, "Missing required parameter 'assignee' when calling WorkorderApi->UnassignUserByWorkOrderAndUser");

            var localVarPath = "/workorders/{work_order_id}/assignee";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (assignee != null && assignee.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(assignee); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignee; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnassignUserByWorkOrderAndUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Unassign User by Work Order and User Unassign user from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="assignee">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UnassignUserByWorkOrderAndUserAsync (int? workOrderId, Assignee assignee, bool? async = null)
        {
             ApiResponse<User> localVarResponse = await UnassignUserByWorkOrderAndUserAsyncWithHttpInfo(workOrderId, assignee, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unassign User by Work Order and User Unassign user from a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="assignee">JSON Model</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UnassignUserByWorkOrderAndUserAsyncWithHttpInfo (int? workOrderId, Assignee assignee, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UnassignUserByWorkOrderAndUser");
            // verify the required parameter 'assignee' is set
            if (assignee == null)
                throw new ApiException(400, "Missing required parameter 'assignee' when calling WorkorderApi->UnassignUserByWorkOrderAndUser");

            var localVarPath = "/workorders/{work_order_id}/assignee";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (assignee != null && assignee.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(assignee); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignee; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnassignUserByWorkOrderAndUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Unpublish by Work Order Unpublishes a work order from the marketplace so that no requests or counter-offers can be made. Moves to draft unless it was also routed. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UnpublishByWorkOrder (int? workOrderId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UnpublishByWorkOrderWithHttpInfo(workOrderId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unpublish by Work Order Unpublishes a work order from the marketplace so that no requests or counter-offers can be made. Moves to draft unless it was also routed. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UnpublishByWorkOrderWithHttpInfo (int? workOrderId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UnpublishByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnpublishByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Unpublish by Work Order Unpublishes a work order from the marketplace so that no requests or counter-offers can be made. Moves to draft unless it was also routed. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UnpublishByWorkOrderAsync (int? workOrderId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UnpublishByWorkOrderAsyncWithHttpInfo(workOrderId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unpublish by Work Order Unpublishes a work order from the marketplace so that no requests or counter-offers can be made. Moves to draft unless it was also routed. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UnpublishByWorkOrderAsyncWithHttpInfo (int? workOrderId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UnpublishByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnpublishByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update All Time Logs by Work Order Update all time logs for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="timeLog">Check in information</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateAllTimeLogsByWorkOrder (int? workOrderId, TimeLog timeLog, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateAllTimeLogsByWorkOrderWithHttpInfo(workOrderId, timeLog, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update All Time Logs by Work Order Update all time logs for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="timeLog">Check in information</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateAllTimeLogsByWorkOrderWithHttpInfo (int? workOrderId, TimeLog timeLog, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateAllTimeLogsByWorkOrder");
            // verify the required parameter 'timeLog' is set
            if (timeLog == null)
                throw new ApiException(400, "Missing required parameter 'timeLog' when calling WorkorderApi->UpdateAllTimeLogsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/time_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (timeLog != null && timeLog.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(timeLog); // http body (model) parameter
            }
            else
            {
                localVarPostBody = timeLog; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAllTimeLogsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update All Time Logs by Work Order Update all time logs for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="timeLog">Check in information</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateAllTimeLogsByWorkOrderAsync (int? workOrderId, TimeLog timeLog, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateAllTimeLogsByWorkOrderAsyncWithHttpInfo(workOrderId, timeLog, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update All Time Logs by Work Order Update all time logs for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="timeLog">Check in information</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateAllTimeLogsByWorkOrderAsyncWithHttpInfo (int? workOrderId, TimeLog timeLog, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateAllTimeLogsByWorkOrder");
            // verify the required parameter 'timeLog' is set
            if (timeLog == null)
                throw new ApiException(400, "Missing required parameter 'timeLog' when calling WorkorderApi->UpdateAllTimeLogsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/time_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (timeLog != null && timeLog.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(timeLog); // http body (model) parameter
            }
            else
            {
                localVarPostBody = timeLog; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAllTimeLogsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Attachment by Work Order and Folder and Attachment Updates an attachment folder and its contents
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <param name="attachment">Attachment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateAttachmentByWorkOrderAndFolderAndAttachment (int? workOrderId, int? folderId, int? attachmentId, Attachment attachment, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateAttachmentByWorkOrderAndFolderAndAttachmentWithHttpInfo(workOrderId, folderId, attachmentId, attachment, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Attachment by Work Order and Folder and Attachment Updates an attachment folder and its contents
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <param name="attachment">Attachment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateAttachmentByWorkOrderAndFolderAndAttachmentWithHttpInfo (int? workOrderId, int? folderId, int? attachmentId, Attachment attachment, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateAttachmentByWorkOrderAndFolderAndAttachment");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkorderApi->UpdateAttachmentByWorkOrderAndFolderAndAttachment");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling WorkorderApi->UpdateAttachmentByWorkOrderAndFolderAndAttachment");
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling WorkorderApi->UpdateAttachmentByWorkOrderAndFolderAndAttachment");

            var localVarPath = "/workorders/{work_order_id}/attachments/{folder_id}/{attachment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folder_id", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachment_id", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (attachment != null && attachment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(attachment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachment; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttachmentByWorkOrderAndFolderAndAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Attachment by Work Order and Folder and Attachment Updates an attachment folder and its contents
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <param name="attachment">Attachment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateAttachmentByWorkOrderAndFolderAndAttachmentAsync (int? workOrderId, int? folderId, int? attachmentId, Attachment attachment, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateAttachmentByWorkOrderAndFolderAndAttachmentAsyncWithHttpInfo(workOrderId, folderId, attachmentId, attachment, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Attachment by Work Order and Folder and Attachment Updates an attachment folder and its contents
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="attachmentId">File id</param>
        /// <param name="attachment">Attachment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateAttachmentByWorkOrderAndFolderAndAttachmentAsyncWithHttpInfo (int? workOrderId, int? folderId, int? attachmentId, Attachment attachment, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateAttachmentByWorkOrderAndFolderAndAttachment");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkorderApi->UpdateAttachmentByWorkOrderAndFolderAndAttachment");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling WorkorderApi->UpdateAttachmentByWorkOrderAndFolderAndAttachment");
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling WorkorderApi->UpdateAttachmentByWorkOrderAndFolderAndAttachment");

            var localVarPath = "/workorders/{work_order_id}/attachments/{folder_id}/{attachment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folder_id", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachment_id", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (attachment != null && attachment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(attachment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachment; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttachmentByWorkOrderAndFolderAndAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Attribute by Location and Attribute Updates an attribute to a stored location
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <param name="attribute">JSON Model</param>
        /// <returns>StoredLocation</returns>
        public StoredLocation UpdateAttributeByLocationAndAttribute (int? locationId, int? attributeName, LocationAttribute attribute)
        {
             ApiResponse<StoredLocation> localVarResponse = UpdateAttributeByLocationAndAttributeWithHttpInfo(locationId, attributeName, attribute);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Attribute by Location and Attribute Updates an attribute to a stored location
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <param name="attribute">JSON Model</param>
        /// <returns>ApiResponse of StoredLocation</returns>
        public ApiResponse< StoredLocation > UpdateAttributeByLocationAndAttributeWithHttpInfo (int? locationId, int? attributeName, LocationAttribute attribute)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling WorkorderApi->UpdateAttributeByLocationAndAttribute");
            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new ApiException(400, "Missing required parameter 'attributeName' when calling WorkorderApi->UpdateAttributeByLocationAndAttribute");
            // verify the required parameter 'attribute' is set
            if (attribute == null)
                throw new ApiException(400, "Missing required parameter 'attribute' when calling WorkorderApi->UpdateAttributeByLocationAndAttribute");

            var localVarPath = "/locations/{location_id}/attributes/{attribute_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (attributeName != null) localVarPathParams.Add("attribute_name", Configuration.ApiClient.ParameterToString(attributeName)); // path parameter
            if (attribute != null && attribute.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(attribute); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attribute; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttributeByLocationAndAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoredLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoredLocation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoredLocation)));
        }

        /// <summary>
        /// Update Attribute by Location and Attribute Updates an attribute to a stored location
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <param name="attribute">JSON Model</param>
        /// <returns>Task of StoredLocation</returns>
        public async System.Threading.Tasks.Task<StoredLocation> UpdateAttributeByLocationAndAttributeAsync (int? locationId, int? attributeName, LocationAttribute attribute)
        {
             ApiResponse<StoredLocation> localVarResponse = await UpdateAttributeByLocationAndAttributeAsyncWithHttpInfo(locationId, attributeName, attribute);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Attribute by Location and Attribute Updates an attribute to a stored location
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Location id</param>
        /// <param name="attributeName">Attribute</param>
        /// <param name="attribute">JSON Model</param>
        /// <returns>Task of ApiResponse (StoredLocation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StoredLocation>> UpdateAttributeByLocationAndAttributeAsyncWithHttpInfo (int? locationId, int? attributeName, LocationAttribute attribute)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling WorkorderApi->UpdateAttributeByLocationAndAttribute");
            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new ApiException(400, "Missing required parameter 'attributeName' when calling WorkorderApi->UpdateAttributeByLocationAndAttribute");
            // verify the required parameter 'attribute' is set
            if (attribute == null)
                throw new ApiException(400, "Missing required parameter 'attribute' when calling WorkorderApi->UpdateAttributeByLocationAndAttribute");

            var localVarPath = "/locations/{location_id}/attributes/{attribute_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (attributeName != null) localVarPathParams.Add("attribute_name", Configuration.ApiClient.ParameterToString(attributeName)); // path parameter
            if (attribute != null && attribute.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(attribute); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attribute; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttributeByLocationAndAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoredLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoredLocation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoredLocation)));
        }

        /// <summary>
        /// Update Bonus by Work Order and Bonus Updates a bonus on a work order which can conditionally increase the amount paid to the provider upon conditions being met
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateBonusByWorkOrderAndBonus (int? workOrderId, int? bonusId, PayModifier bonus)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateBonusByWorkOrderAndBonusWithHttpInfo(workOrderId, bonusId, bonus);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Bonus by Work Order and Bonus Updates a bonus on a work order which can conditionally increase the amount paid to the provider upon conditions being met
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateBonusByWorkOrderAndBonusWithHttpInfo (int? workOrderId, int? bonusId, PayModifier bonus)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateBonusByWorkOrderAndBonus");
            // verify the required parameter 'bonusId' is set
            if (bonusId == null)
                throw new ApiException(400, "Missing required parameter 'bonusId' when calling WorkorderApi->UpdateBonusByWorkOrderAndBonus");
            // verify the required parameter 'bonus' is set
            if (bonus == null)
                throw new ApiException(400, "Missing required parameter 'bonus' when calling WorkorderApi->UpdateBonusByWorkOrderAndBonus");

            var localVarPath = "/workorders/{work_order_id}/bonuses/{bonus_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (bonusId != null) localVarPathParams.Add("bonus_id", Configuration.ApiClient.ParameterToString(bonusId)); // path parameter
            if (bonus != null && bonus.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bonus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bonus; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBonusByWorkOrderAndBonus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Bonus by Work Order and Bonus Updates a bonus on a work order which can conditionally increase the amount paid to the provider upon conditions being met
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateBonusByWorkOrderAndBonusAsync (int? workOrderId, int? bonusId, PayModifier bonus)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateBonusByWorkOrderAndBonusAsyncWithHttpInfo(workOrderId, bonusId, bonus);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Bonus by Work Order and Bonus Updates a bonus on a work order which can conditionally increase the amount paid to the provider upon conditions being met
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="bonusId">Bonus ID</param>
        /// <param name="bonus">Bonus</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateBonusByWorkOrderAndBonusAsyncWithHttpInfo (int? workOrderId, int? bonusId, PayModifier bonus)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateBonusByWorkOrderAndBonus");
            // verify the required parameter 'bonusId' is set
            if (bonusId == null)
                throw new ApiException(400, "Missing required parameter 'bonusId' when calling WorkorderApi->UpdateBonusByWorkOrderAndBonus");
            // verify the required parameter 'bonus' is set
            if (bonus == null)
                throw new ApiException(400, "Missing required parameter 'bonus' when calling WorkorderApi->UpdateBonusByWorkOrderAndBonus");

            var localVarPath = "/workorders/{work_order_id}/bonuses/{bonus_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (bonusId != null) localVarPathParams.Add("bonus_id", Configuration.ApiClient.ParameterToString(bonusId)); // path parameter
            if (bonus != null && bonus.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bonus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bonus; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBonusByWorkOrderAndBonus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Contact by Work Order and Contact Update contact of a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contactId">Contact id</param>
        /// <param name="contact">JSON Model</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateContactByWorkOrderAndContact (int? workOrderId, int? contactId, Contact contact)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateContactByWorkOrderAndContactWithHttpInfo(workOrderId, contactId, contact);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Contact by Work Order and Contact Update contact of a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contactId">Contact id</param>
        /// <param name="contact">JSON Model</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateContactByWorkOrderAndContactWithHttpInfo (int? workOrderId, int? contactId, Contact contact)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateContactByWorkOrderAndContact");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling WorkorderApi->UpdateContactByWorkOrderAndContact");
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling WorkorderApi->UpdateContactByWorkOrderAndContact");

            var localVarPath = "/workorders/{work_order_id}/contacts/{contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contact_id", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContactByWorkOrderAndContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Contact by Work Order and Contact Update contact of a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contactId">Contact id</param>
        /// <param name="contact">JSON Model</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateContactByWorkOrderAndContactAsync (int? workOrderId, int? contactId, Contact contact)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateContactByWorkOrderAndContactAsyncWithHttpInfo(workOrderId, contactId, contact);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Contact by Work Order and Contact Update contact of a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="contactId">Contact id</param>
        /// <param name="contact">JSON Model</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateContactByWorkOrderAndContactAsyncWithHttpInfo (int? workOrderId, int? contactId, Contact contact)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateContactByWorkOrderAndContact");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling WorkorderApi->UpdateContactByWorkOrderAndContact");
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling WorkorderApi->UpdateContactByWorkOrderAndContact");

            var localVarPath = "/workorders/{work_order_id}/contacts/{contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contact_id", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContactByWorkOrderAndContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Custom Field by Work Order and Custom Field Update a custom field value on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="customFieldId">Custom field ID</param>
        /// <param name="customField">Custom field</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateCustomFieldByWorkOrderAndCustomField (int? workOrderId, int? customFieldId, CustomField customField, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateCustomFieldByWorkOrderAndCustomFieldWithHttpInfo(workOrderId, customFieldId, customField, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Custom Field by Work Order and Custom Field Update a custom field value on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="customFieldId">Custom field ID</param>
        /// <param name="customField">Custom field</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateCustomFieldByWorkOrderAndCustomFieldWithHttpInfo (int? workOrderId, int? customFieldId, CustomField customField, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateCustomFieldByWorkOrderAndCustomField");
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling WorkorderApi->UpdateCustomFieldByWorkOrderAndCustomField");
            // verify the required parameter 'customField' is set
            if (customField == null)
                throw new ApiException(400, "Missing required parameter 'customField' when calling WorkorderApi->UpdateCustomFieldByWorkOrderAndCustomField");

            var localVarPath = "/workorders/{work_order_id}/custom_fields/{custom_field_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (customFieldId != null) localVarPathParams.Add("custom_field_id", Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (customField != null && customField.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customField); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customField; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomFieldByWorkOrderAndCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Custom Field by Work Order and Custom Field Update a custom field value on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="customFieldId">Custom field ID</param>
        /// <param name="customField">Custom field</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateCustomFieldByWorkOrderAndCustomFieldAsync (int? workOrderId, int? customFieldId, CustomField customField, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateCustomFieldByWorkOrderAndCustomFieldAsyncWithHttpInfo(workOrderId, customFieldId, customField, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Custom Field by Work Order and Custom Field Update a custom field value on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="customFieldId">Custom field ID</param>
        /// <param name="customField">Custom field</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateCustomFieldByWorkOrderAndCustomFieldAsyncWithHttpInfo (int? workOrderId, int? customFieldId, CustomField customField, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateCustomFieldByWorkOrderAndCustomField");
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling WorkorderApi->UpdateCustomFieldByWorkOrderAndCustomField");
            // verify the required parameter 'customField' is set
            if (customField == null)
                throw new ApiException(400, "Missing required parameter 'customField' when calling WorkorderApi->UpdateCustomFieldByWorkOrderAndCustomField");

            var localVarPath = "/workorders/{work_order_id}/custom_fields/{custom_field_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (customFieldId != null) localVarPathParams.Add("custom_field_id", Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (customField != null && customField.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customField); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customField; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomFieldByWorkOrderAndCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Discount by Work Order Updates the amount or description of a discount applied to the work order. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="discountId">ID of the discount</param>
        /// <param name="json">Payload of the discount</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateDiscountByWorkOrder (int? workOrderId, int? discountId, PayModifier json)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateDiscountByWorkOrderWithHttpInfo(workOrderId, discountId, json);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Discount by Work Order Updates the amount or description of a discount applied to the work order. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="discountId">ID of the discount</param>
        /// <param name="json">Payload of the discount</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateDiscountByWorkOrderWithHttpInfo (int? workOrderId, int? discountId, PayModifier json)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateDiscountByWorkOrder");
            // verify the required parameter 'discountId' is set
            if (discountId == null)
                throw new ApiException(400, "Missing required parameter 'discountId' when calling WorkorderApi->UpdateDiscountByWorkOrder");
            // verify the required parameter 'json' is set
            if (json == null)
                throw new ApiException(400, "Missing required parameter 'json' when calling WorkorderApi->UpdateDiscountByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/discounts/{discount_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (discountId != null) localVarPathParams.Add("discount_id", Configuration.ApiClient.ParameterToString(discountId)); // path parameter
            if (json != null && json.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(json); // http body (model) parameter
            }
            else
            {
                localVarPostBody = json; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDiscountByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Discount by Work Order Updates the amount or description of a discount applied to the work order. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="discountId">ID of the discount</param>
        /// <param name="json">Payload of the discount</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateDiscountByWorkOrderAsync (int? workOrderId, int? discountId, PayModifier json)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateDiscountByWorkOrderAsyncWithHttpInfo(workOrderId, discountId, json);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Discount by Work Order Updates the amount or description of a discount applied to the work order. 
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="discountId">ID of the discount</param>
        /// <param name="json">Payload of the discount</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateDiscountByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? discountId, PayModifier json)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateDiscountByWorkOrder");
            // verify the required parameter 'discountId' is set
            if (discountId == null)
                throw new ApiException(400, "Missing required parameter 'discountId' when calling WorkorderApi->UpdateDiscountByWorkOrder");
            // verify the required parameter 'json' is set
            if (json == null)
                throw new ApiException(400, "Missing required parameter 'json' when calling WorkorderApi->UpdateDiscountByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/discounts/{discount_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (discountId != null) localVarPathParams.Add("discount_id", Configuration.ApiClient.ParameterToString(discountId)); // path parameter
            if (json != null && json.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(json); // http body (model) parameter
            }
            else
            {
                localVarPostBody = json; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDiscountByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update ETA by Work Order Updates the eta of a work order (depending on your role)
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="eta">JSON Payload</param>
        /// <param name="confirm">Confirm (optional)</param>
        /// <param name="updateFromIvr">update from IVR (optional)</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateETAByWorkOrder (int? workOrderId, ETA eta, bool? confirm = null, bool? updateFromIvr = null, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateETAByWorkOrderWithHttpInfo(workOrderId, eta, confirm, updateFromIvr, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update ETA by Work Order Updates the eta of a work order (depending on your role)
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="eta">JSON Payload</param>
        /// <param name="confirm">Confirm (optional)</param>
        /// <param name="updateFromIvr">update from IVR (optional)</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateETAByWorkOrderWithHttpInfo (int? workOrderId, ETA eta, bool? confirm = null, bool? updateFromIvr = null, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateETAByWorkOrder");
            // verify the required parameter 'eta' is set
            if (eta == null)
                throw new ApiException(400, "Missing required parameter 'eta' when calling WorkorderApi->UpdateETAByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/eta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (confirm != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "confirm", confirm)); // query parameter
            if (updateFromIvr != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "update_from_ivr", updateFromIvr)); // query parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (eta != null && eta.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eta); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eta; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateETAByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update ETA by Work Order Updates the eta of a work order (depending on your role)
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="eta">JSON Payload</param>
        /// <param name="confirm">Confirm (optional)</param>
        /// <param name="updateFromIvr">update from IVR (optional)</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateETAByWorkOrderAsync (int? workOrderId, ETA eta, bool? confirm = null, bool? updateFromIvr = null, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateETAByWorkOrderAsyncWithHttpInfo(workOrderId, eta, confirm, updateFromIvr, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update ETA by Work Order Updates the eta of a work order (depending on your role)
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="eta">JSON Payload</param>
        /// <param name="confirm">Confirm (optional)</param>
        /// <param name="updateFromIvr">update from IVR (optional)</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateETAByWorkOrderAsyncWithHttpInfo (int? workOrderId, ETA eta, bool? confirm = null, bool? updateFromIvr = null, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateETAByWorkOrder");
            // verify the required parameter 'eta' is set
            if (eta == null)
                throw new ApiException(400, "Missing required parameter 'eta' when calling WorkorderApi->UpdateETAByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/eta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (confirm != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "confirm", confirm)); // query parameter
            if (updateFromIvr != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "update_from_ivr", updateFromIvr)); // query parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (eta != null && eta.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eta); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eta; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateETAByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Expense by Work order and Expense Update an Expense of a Work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expenseId">ID of expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <param name="expense">Expense (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateExpenseByWorkOrderAndExpense (int? workOrderId, int? expenseId, bool? async = null, Expense expense = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateExpenseByWorkOrderAndExpenseWithHttpInfo(workOrderId, expenseId, async, expense);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Expense by Work order and Expense Update an Expense of a Work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expenseId">ID of expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <param name="expense">Expense (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateExpenseByWorkOrderAndExpenseWithHttpInfo (int? workOrderId, int? expenseId, bool? async = null, Expense expense = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateExpenseByWorkOrderAndExpense");
            // verify the required parameter 'expenseId' is set
            if (expenseId == null)
                throw new ApiException(400, "Missing required parameter 'expenseId' when calling WorkorderApi->UpdateExpenseByWorkOrderAndExpense");

            var localVarPath = "/workorders/{work_order_id}/expenses/{expense_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (expenseId != null) localVarPathParams.Add("expense_id", Configuration.ApiClient.ParameterToString(expenseId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (expense != null && expense.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(expense); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expense; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExpenseByWorkOrderAndExpense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Expense by Work order and Expense Update an Expense of a Work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expenseId">ID of expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <param name="expense">Expense (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateExpenseByWorkOrderAndExpenseAsync (int? workOrderId, int? expenseId, bool? async = null, Expense expense = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateExpenseByWorkOrderAndExpenseAsyncWithHttpInfo(workOrderId, expenseId, async, expense);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Expense by Work order and Expense Update an Expense of a Work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="expenseId">ID of expense</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <param name="expense">Expense (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateExpenseByWorkOrderAndExpenseAsyncWithHttpInfo (int? workOrderId, int? expenseId, bool? async = null, Expense expense = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateExpenseByWorkOrderAndExpense");
            // verify the required parameter 'expenseId' is set
            if (expenseId == null)
                throw new ApiException(400, "Missing required parameter 'expenseId' when calling WorkorderApi->UpdateExpenseByWorkOrderAndExpense");

            var localVarPath = "/workorders/{work_order_id}/expenses/{expense_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (expenseId != null) localVarPathParams.Add("expense_id", Configuration.ApiClient.ParameterToString(expenseId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (expense != null && expense.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(expense); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expense; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExpenseByWorkOrderAndExpense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Expenses by Work Order Updates all the expneses in a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="expenses">JSON Model</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateExpensesByWorkOrder (int? workOrderId, Expenses expenses)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateExpensesByWorkOrderWithHttpInfo(workOrderId, expenses);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Expenses by Work Order Updates all the expneses in a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="expenses">JSON Model</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateExpensesByWorkOrderWithHttpInfo (int? workOrderId, Expenses expenses)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateExpensesByWorkOrder");
            // verify the required parameter 'expenses' is set
            if (expenses == null)
                throw new ApiException(400, "Missing required parameter 'expenses' when calling WorkorderApi->UpdateExpensesByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (expenses != null && expenses.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(expenses); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expenses; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExpensesByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Expenses by Work Order Updates all the expneses in a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="expenses">JSON Model</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateExpensesByWorkOrderAsync (int? workOrderId, Expenses expenses)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateExpensesByWorkOrderAsyncWithHttpInfo(workOrderId, expenses);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Expenses by Work Order Updates all the expneses in a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="expenses">JSON Model</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateExpensesByWorkOrderAsyncWithHttpInfo (int? workOrderId, Expenses expenses)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateExpensesByWorkOrder");
            // verify the required parameter 'expenses' is set
            if (expenses == null)
                throw new ApiException(400, "Missing required parameter 'expenses' when calling WorkorderApi->UpdateExpensesByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (expenses != null && expenses.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(expenses); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expenses; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExpensesByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Folder by Work Order and Folder Updates an attachment folder
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="folder">Folder</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateFolderByWorkOrderAndFolder (int? workOrderId, int? folderId, AttachmentFolder folder, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateFolderByWorkOrderAndFolderWithHttpInfo(workOrderId, folderId, folder, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Folder by Work Order and Folder Updates an attachment folder
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="folder">Folder</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateFolderByWorkOrderAndFolderWithHttpInfo (int? workOrderId, int? folderId, AttachmentFolder folder, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateFolderByWorkOrderAndFolder");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkorderApi->UpdateFolderByWorkOrderAndFolder");
            // verify the required parameter 'folder' is set
            if (folder == null)
                throw new ApiException(400, "Missing required parameter 'folder' when calling WorkorderApi->UpdateFolderByWorkOrderAndFolder");

            var localVarPath = "/workorders/{work_order_id}/attachments/{folder_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folder_id", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (folder != null && folder.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(folder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = folder; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFolderByWorkOrderAndFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Folder by Work Order and Folder Updates an attachment folder
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="folder">Folder</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateFolderByWorkOrderAndFolderAsync (int? workOrderId, int? folderId, AttachmentFolder folder, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateFolderByWorkOrderAndFolderAsyncWithHttpInfo(workOrderId, folderId, folder, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Folder by Work Order and Folder Updates an attachment folder
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="folderId">Folder id</param>
        /// <param name="folder">Folder</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateFolderByWorkOrderAndFolderAsyncWithHttpInfo (int? workOrderId, int? folderId, AttachmentFolder folder, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateFolderByWorkOrderAndFolder");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkorderApi->UpdateFolderByWorkOrderAndFolder");
            // verify the required parameter 'folder' is set
            if (folder == null)
                throw new ApiException(400, "Missing required parameter 'folder' when calling WorkorderApi->UpdateFolderByWorkOrderAndFolder");

            var localVarPath = "/workorders/{work_order_id}/attachments/{folder_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folder_id", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (folder != null && folder.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(folder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = folder; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFolderByWorkOrderAndFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Hold by Work Order and Hold Updates a hold on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="hold">Hold object with updates</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateHoldByWorkOrderAndHold (int? workOrderId, int? holdId, Hold hold, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateHoldByWorkOrderAndHoldWithHttpInfo(workOrderId, holdId, hold, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Hold by Work Order and Hold Updates a hold on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="hold">Hold object with updates</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateHoldByWorkOrderAndHoldWithHttpInfo (int? workOrderId, int? holdId, Hold hold, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateHoldByWorkOrderAndHold");
            // verify the required parameter 'holdId' is set
            if (holdId == null)
                throw new ApiException(400, "Missing required parameter 'holdId' when calling WorkorderApi->UpdateHoldByWorkOrderAndHold");
            // verify the required parameter 'hold' is set
            if (hold == null)
                throw new ApiException(400, "Missing required parameter 'hold' when calling WorkorderApi->UpdateHoldByWorkOrderAndHold");

            var localVarPath = "/workorders/{work_order_id}/holds/{hold_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (holdId != null) localVarPathParams.Add("hold_id", Configuration.ApiClient.ParameterToString(holdId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (hold != null && hold.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(hold); // http body (model) parameter
            }
            else
            {
                localVarPostBody = hold; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateHoldByWorkOrderAndHold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Hold by Work Order and Hold Updates a hold on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="hold">Hold object with updates</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateHoldByWorkOrderAndHoldAsync (int? workOrderId, int? holdId, Hold hold, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateHoldByWorkOrderAndHoldAsyncWithHttpInfo(workOrderId, holdId, hold, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Hold by Work Order and Hold Updates a hold on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="holdId">ID of hold to update</param>
        /// <param name="hold">Hold object with updates</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateHoldByWorkOrderAndHoldAsyncWithHttpInfo (int? workOrderId, int? holdId, Hold hold, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateHoldByWorkOrderAndHold");
            // verify the required parameter 'holdId' is set
            if (holdId == null)
                throw new ApiException(400, "Missing required parameter 'holdId' when calling WorkorderApi->UpdateHoldByWorkOrderAndHold");
            // verify the required parameter 'hold' is set
            if (hold == null)
                throw new ApiException(400, "Missing required parameter 'hold' when calling WorkorderApi->UpdateHoldByWorkOrderAndHold");

            var localVarPath = "/workorders/{work_order_id}/holds/{hold_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (holdId != null) localVarPathParams.Add("hold_id", Configuration.ApiClient.ParameterToString(holdId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (hold != null && hold.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(hold); // http body (model) parameter
            }
            else
            {
                localVarPostBody = hold; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateHoldByWorkOrderAndHold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Increase by Work Order Update pay increase for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="increase">Increase structure for update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateIncreaseByWorkOrderAndIncrease (int? workOrderId, int? increaseId, PayIncrease increase, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateIncreaseByWorkOrderAndIncreaseWithHttpInfo(workOrderId, increaseId, increase, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Increase by Work Order Update pay increase for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="increase">Increase structure for update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateIncreaseByWorkOrderAndIncreaseWithHttpInfo (int? workOrderId, int? increaseId, PayIncrease increase, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateIncreaseByWorkOrderAndIncrease");
            // verify the required parameter 'increaseId' is set
            if (increaseId == null)
                throw new ApiException(400, "Missing required parameter 'increaseId' when calling WorkorderApi->UpdateIncreaseByWorkOrderAndIncrease");
            // verify the required parameter 'increase' is set
            if (increase == null)
                throw new ApiException(400, "Missing required parameter 'increase' when calling WorkorderApi->UpdateIncreaseByWorkOrderAndIncrease");

            var localVarPath = "/workorders/{work_order_id}/increases/{increase_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (increaseId != null) localVarPathParams.Add("increase_id", Configuration.ApiClient.ParameterToString(increaseId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (increase != null && increase.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(increase); // http body (model) parameter
            }
            else
            {
                localVarPostBody = increase; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIncreaseByWorkOrderAndIncrease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Increase by Work Order Update pay increase for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="increase">Increase structure for update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateIncreaseByWorkOrderAndIncreaseAsync (int? workOrderId, int? increaseId, PayIncrease increase, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateIncreaseByWorkOrderAndIncreaseAsyncWithHttpInfo(workOrderId, increaseId, increase, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Increase by Work Order Update pay increase for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="increaseId">ID of work order increase</param>
        /// <param name="increase">Increase structure for update</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateIncreaseByWorkOrderAndIncreaseAsyncWithHttpInfo (int? workOrderId, int? increaseId, PayIncrease increase, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateIncreaseByWorkOrderAndIncrease");
            // verify the required parameter 'increaseId' is set
            if (increaseId == null)
                throw new ApiException(400, "Missing required parameter 'increaseId' when calling WorkorderApi->UpdateIncreaseByWorkOrderAndIncrease");
            // verify the required parameter 'increase' is set
            if (increase == null)
                throw new ApiException(400, "Missing required parameter 'increase' when calling WorkorderApi->UpdateIncreaseByWorkOrderAndIncrease");

            var localVarPath = "/workorders/{work_order_id}/increases/{increase_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (increaseId != null) localVarPathParams.Add("increase_id", Configuration.ApiClient.ParameterToString(increaseId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (increase != null && increase.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(increase); // http body (model) parameter
            }
            else
            {
                localVarPostBody = increase; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIncreaseByWorkOrderAndIncrease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Location by Work Order Updates the location of a work order (depending on your role)
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="location">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateLocationByWorkOrder (int? workOrderId, Location location, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateLocationByWorkOrderWithHttpInfo(workOrderId, location, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Location by Work Order Updates the location of a work order (depending on your role)
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="location">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateLocationByWorkOrderWithHttpInfo (int? workOrderId, Location location, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateLocationByWorkOrder");
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling WorkorderApi->UpdateLocationByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (location != null && location.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(location); // http body (model) parameter
            }
            else
            {
                localVarPostBody = location; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLocationByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Location by Work Order Updates the location of a work order (depending on your role)
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="location">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateLocationByWorkOrderAsync (int? workOrderId, Location location, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateLocationByWorkOrderAsyncWithHttpInfo(workOrderId, location, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Location by Work Order Updates the location of a work order (depending on your role)
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="location">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateLocationByWorkOrderAsyncWithHttpInfo (int? workOrderId, Location location, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateLocationByWorkOrder");
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling WorkorderApi->UpdateLocationByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (location != null && location.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(location); // http body (model) parameter
            }
            else
            {
                localVarPostBody = location; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLocationByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Message by Work Order Updates a message on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <param name="json">JSON payload</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateMessageByWorkOrder (int? workOrderId, int? messageId, Message json)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateMessageByWorkOrderWithHttpInfo(workOrderId, messageId, json);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Message by Work Order Updates a message on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <param name="json">JSON payload</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateMessageByWorkOrderWithHttpInfo (int? workOrderId, int? messageId, Message json)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateMessageByWorkOrder");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling WorkorderApi->UpdateMessageByWorkOrder");
            // verify the required parameter 'json' is set
            if (json == null)
                throw new ApiException(400, "Missing required parameter 'json' when calling WorkorderApi->UpdateMessageByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (json != null && json.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(json); // http body (model) parameter
            }
            else
            {
                localVarPostBody = json; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMessageByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Message by Work Order Updates a message on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <param name="json">JSON payload</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateMessageByWorkOrderAsync (int? workOrderId, int? messageId, Message json)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateMessageByWorkOrderAsyncWithHttpInfo(workOrderId, messageId, json);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Message by Work Order Updates a message on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="messageId">ID of work order message</param>
        /// <param name="json">JSON payload</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateMessageByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? messageId, Message json)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateMessageByWorkOrder");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling WorkorderApi->UpdateMessageByWorkOrder");
            // verify the required parameter 'json' is set
            if (json == null)
                throw new ApiException(400, "Missing required parameter 'json' when calling WorkorderApi->UpdateMessageByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (json != null && json.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(json); // http body (model) parameter
            }
            else
            {
                localVarPostBody = json; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMessageByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Pay by Work Order Updates the pay of a work order, or requests an adjustment
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="pay">Pay</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdatePayByWorkOrder (int? workOrderId, Pay pay, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdatePayByWorkOrderWithHttpInfo(workOrderId, pay, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Pay by Work Order Updates the pay of a work order, or requests an adjustment
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="pay">Pay</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdatePayByWorkOrderWithHttpInfo (int? workOrderId, Pay pay, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdatePayByWorkOrder");
            // verify the required parameter 'pay' is set
            if (pay == null)
                throw new ApiException(400, "Missing required parameter 'pay' when calling WorkorderApi->UpdatePayByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/pay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (pay != null && pay.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pay); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pay; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePayByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Pay by Work Order Updates the pay of a work order, or requests an adjustment
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="pay">Pay</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdatePayByWorkOrderAsync (int? workOrderId, Pay pay, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdatePayByWorkOrderAsyncWithHttpInfo(workOrderId, pay, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Pay by Work Order Updates the pay of a work order, or requests an adjustment
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="pay">Pay</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdatePayByWorkOrderAsyncWithHttpInfo (int? workOrderId, Pay pay, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdatePayByWorkOrder");
            // verify the required parameter 'pay' is set
            if (pay == null)
                throw new ApiException(400, "Missing required parameter 'pay' when calling WorkorderApi->UpdatePayByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/pay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (pay != null && pay.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pay); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pay; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePayByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Penalty by Work Order and Penalty Updates a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <param name="penalty">Penalty (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdatePenaltyByWorkOrderAndPenalty (int? workOrderId, int? penaltyId, PayModifier penalty = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdatePenaltyByWorkOrderAndPenaltyWithHttpInfo(workOrderId, penaltyId, penalty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Penalty by Work Order and Penalty Updates a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <param name="penalty">Penalty (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdatePenaltyByWorkOrderAndPenaltyWithHttpInfo (int? workOrderId, int? penaltyId, PayModifier penalty = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdatePenaltyByWorkOrderAndPenalty");
            // verify the required parameter 'penaltyId' is set
            if (penaltyId == null)
                throw new ApiException(400, "Missing required parameter 'penaltyId' when calling WorkorderApi->UpdatePenaltyByWorkOrderAndPenalty");

            var localVarPath = "/workorders/{work_order_id}/penalties/{penalty_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (penaltyId != null) localVarPathParams.Add("penalty_id", Configuration.ApiClient.ParameterToString(penaltyId)); // path parameter
            if (penalty != null && penalty.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(penalty); // http body (model) parameter
            }
            else
            {
                localVarPostBody = penalty; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePenaltyByWorkOrderAndPenalty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Penalty by Work Order and Penalty Updates a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <param name="penalty">Penalty (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdatePenaltyByWorkOrderAndPenaltyAsync (int? workOrderId, int? penaltyId, PayModifier penalty = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdatePenaltyByWorkOrderAndPenaltyAsyncWithHttpInfo(workOrderId, penaltyId, penalty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Penalty by Work Order and Penalty Updates a penalty option which would allow the raising of the amount paid to the provider if a condition being met.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work Order ID</param>
        /// <param name="penaltyId">Penalty ID</param>
        /// <param name="penalty">Penalty (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdatePenaltyByWorkOrderAndPenaltyAsyncWithHttpInfo (int? workOrderId, int? penaltyId, PayModifier penalty = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdatePenaltyByWorkOrderAndPenalty");
            // verify the required parameter 'penaltyId' is set
            if (penaltyId == null)
                throw new ApiException(400, "Missing required parameter 'penaltyId' when calling WorkorderApi->UpdatePenaltyByWorkOrderAndPenalty");

            var localVarPath = "/workorders/{work_order_id}/penalties/{penalty_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (penaltyId != null) localVarPathParams.Add("penalty_id", Configuration.ApiClient.ParameterToString(penaltyId)); // path parameter
            if (penalty != null && penalty.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(penalty); // http body (model) parameter
            }
            else
            {
                localVarPostBody = penalty; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePenaltyByWorkOrderAndPenalty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update problem by work order Updates a problem on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of work order</param>
        /// <param name="problem">Problem</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateProblemByWorkOrderAndProblem (int? workOrderId, int? problemId, Problem problem, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateProblemByWorkOrderAndProblemWithHttpInfo(workOrderId, problemId, problem, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update problem by work order Updates a problem on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of work order</param>
        /// <param name="problem">Problem</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateProblemByWorkOrderAndProblemWithHttpInfo (int? workOrderId, int? problemId, Problem problem, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateProblemByWorkOrderAndProblem");
            // verify the required parameter 'problemId' is set
            if (problemId == null)
                throw new ApiException(400, "Missing required parameter 'problemId' when calling WorkorderApi->UpdateProblemByWorkOrderAndProblem");
            // verify the required parameter 'problem' is set
            if (problem == null)
                throw new ApiException(400, "Missing required parameter 'problem' when calling WorkorderApi->UpdateProblemByWorkOrderAndProblem");

            var localVarPath = "/workorders/{work_order_id}/problems/{problem_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (problemId != null) localVarPathParams.Add("problem_id", Configuration.ApiClient.ParameterToString(problemId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (problem != null && problem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(problem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = problem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProblemByWorkOrderAndProblem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update problem by work order Updates a problem on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of work order</param>
        /// <param name="problem">Problem</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateProblemByWorkOrderAndProblemAsync (int? workOrderId, int? problemId, Problem problem, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateProblemByWorkOrderAndProblemAsyncWithHttpInfo(workOrderId, problemId, problem, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update problem by work order Updates a problem on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="problemId">ID of work order</param>
        /// <param name="problem">Problem</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateProblemByWorkOrderAndProblemAsyncWithHttpInfo (int? workOrderId, int? problemId, Problem problem, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateProblemByWorkOrderAndProblem");
            // verify the required parameter 'problemId' is set
            if (problemId == null)
                throw new ApiException(400, "Missing required parameter 'problemId' when calling WorkorderApi->UpdateProblemByWorkOrderAndProblem");
            // verify the required parameter 'problem' is set
            if (problem == null)
                throw new ApiException(400, "Missing required parameter 'problem' when calling WorkorderApi->UpdateProblemByWorkOrderAndProblem");

            var localVarPath = "/workorders/{work_order_id}/problems/{problem_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (problemId != null) localVarPathParams.Add("problem_id", Configuration.ApiClient.ParameterToString(problemId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (problem != null && problem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(problem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = problem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProblemByWorkOrderAndProblem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Qualification by Work Order Update qualification for work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualifications">Qualification information</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateQualificationByWorkOrder (int? workOrderId, Qualifications qualifications)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateQualificationByWorkOrderWithHttpInfo(workOrderId, qualifications);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Qualification by Work Order Update qualification for work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualifications">Qualification information</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateQualificationByWorkOrderWithHttpInfo (int? workOrderId, Qualifications qualifications)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateQualificationByWorkOrder");
            // verify the required parameter 'qualifications' is set
            if (qualifications == null)
                throw new ApiException(400, "Missing required parameter 'qualifications' when calling WorkorderApi->UpdateQualificationByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/qualifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (qualifications != null && qualifications.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(qualifications); // http body (model) parameter
            }
            else
            {
                localVarPostBody = qualifications; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateQualificationByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Qualification by Work Order Update qualification for work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualifications">Qualification information</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateQualificationByWorkOrderAsync (int? workOrderId, Qualifications qualifications)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateQualificationByWorkOrderAsyncWithHttpInfo(workOrderId, qualifications);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Qualification by Work Order Update qualification for work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="qualifications">Qualification information</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateQualificationByWorkOrderAsyncWithHttpInfo (int? workOrderId, Qualifications qualifications)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateQualificationByWorkOrder");
            // verify the required parameter 'qualifications' is set
            if (qualifications == null)
                throw new ApiException(400, "Missing required parameter 'qualifications' when calling WorkorderApi->UpdateQualificationByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/qualifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (qualifications != null && qualifications.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(qualifications); // http body (model) parameter
            }
            else
            {
                localVarPostBody = qualifications; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateQualificationByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update rating by Work Order Updates ratings or blocks by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="ratings">rating_json</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateRatingsByWorkOrder (int? workOrderId, WorkOrderRatings ratings, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateRatingsByWorkOrderWithHttpInfo(workOrderId, ratings, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update rating by Work Order Updates ratings or blocks by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="ratings">rating_json</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateRatingsByWorkOrderWithHttpInfo (int? workOrderId, WorkOrderRatings ratings, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateRatingsByWorkOrder");
            // verify the required parameter 'ratings' is set
            if (ratings == null)
                throw new ApiException(400, "Missing required parameter 'ratings' when calling WorkorderApi->UpdateRatingsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/ratings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (ratings != null && ratings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ratings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ratings; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRatingsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update rating by Work Order Updates ratings or blocks by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="ratings">rating_json</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateRatingsByWorkOrderAsync (int? workOrderId, WorkOrderRatings ratings, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateRatingsByWorkOrderAsyncWithHttpInfo(workOrderId, ratings, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update rating by Work Order Updates ratings or blocks by work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="ratings">rating_json</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateRatingsByWorkOrderAsyncWithHttpInfo (int? workOrderId, WorkOrderRatings ratings, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateRatingsByWorkOrder");
            // verify the required parameter 'ratings' is set
            if (ratings == null)
                throw new ApiException(400, "Missing required parameter 'ratings' when calling WorkorderApi->UpdateRatingsByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/ratings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (ratings != null && ratings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ratings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ratings; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRatingsByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Schedule by Work Order Updates the service schedule or eta of a work order (depending on your role)
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="schedule">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateScheduleByWorkOrder (int? workOrderId, Schedule schedule, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateScheduleByWorkOrderWithHttpInfo(workOrderId, schedule, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Schedule by Work Order Updates the service schedule or eta of a work order (depending on your role)
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="schedule">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateScheduleByWorkOrderWithHttpInfo (int? workOrderId, Schedule schedule, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateScheduleByWorkOrder");
            // verify the required parameter 'schedule' is set
            if (schedule == null)
                throw new ApiException(400, "Missing required parameter 'schedule' when calling WorkorderApi->UpdateScheduleByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (schedule != null && schedule.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(schedule); // http body (model) parameter
            }
            else
            {
                localVarPostBody = schedule; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateScheduleByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Schedule by Work Order Updates the service schedule or eta of a work order (depending on your role)
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="schedule">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateScheduleByWorkOrderAsync (int? workOrderId, Schedule schedule, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateScheduleByWorkOrderAsyncWithHttpInfo(workOrderId, schedule, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Schedule by Work Order Updates the service schedule or eta of a work order (depending on your role)
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="schedule">JSON Payload</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateScheduleByWorkOrderAsyncWithHttpInfo (int? workOrderId, Schedule schedule, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateScheduleByWorkOrder");
            // verify the required parameter 'schedule' is set
            if (schedule == null)
                throw new ApiException(400, "Missing required parameter 'schedule' when calling WorkorderApi->UpdateScheduleByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (schedule != null && schedule.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(schedule); // http body (model) parameter
            }
            else
            {
                localVarPostBody = schedule; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateScheduleByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Shipment by Work Order and Shipment Updates a shipment attached to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipmentId">Shipment id</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateShipmentByWorkOrderAndShipment (int? workOrderId, int? shipmentId, Shipment shipment, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateShipmentByWorkOrderAndShipmentWithHttpInfo(workOrderId, shipmentId, shipment, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Shipment by Work Order and Shipment Updates a shipment attached to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipmentId">Shipment id</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateShipmentByWorkOrderAndShipmentWithHttpInfo (int? workOrderId, int? shipmentId, Shipment shipment, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateShipmentByWorkOrderAndShipment");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling WorkorderApi->UpdateShipmentByWorkOrderAndShipment");
            // verify the required parameter 'shipment' is set
            if (shipment == null)
                throw new ApiException(400, "Missing required parameter 'shipment' when calling WorkorderApi->UpdateShipmentByWorkOrderAndShipment");

            var localVarPath = "/workorders/{work_order_id}/shipments/{shipment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (shipment != null && shipment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(shipment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shipment; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateShipmentByWorkOrderAndShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Shipment by Work Order and Shipment Updates a shipment attached to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipmentId">Shipment id</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateShipmentByWorkOrderAndShipmentAsync (int? workOrderId, int? shipmentId, Shipment shipment, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateShipmentByWorkOrderAndShipmentAsyncWithHttpInfo(workOrderId, shipmentId, shipment, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Shipment by Work Order and Shipment Updates a shipment attached to a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="shipmentId">Shipment id</param>
        /// <param name="shipment">Shipment</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateShipmentByWorkOrderAndShipmentAsyncWithHttpInfo (int? workOrderId, int? shipmentId, Shipment shipment, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateShipmentByWorkOrderAndShipment");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling WorkorderApi->UpdateShipmentByWorkOrderAndShipment");
            // verify the required parameter 'shipment' is set
            if (shipment == null)
                throw new ApiException(400, "Missing required parameter 'shipment' when calling WorkorderApi->UpdateShipmentByWorkOrderAndShipment");

            var localVarPath = "/workorders/{work_order_id}/shipments/{shipment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (shipmentId != null) localVarPathParams.Add("shipment_id", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (shipment != null && shipment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(shipment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shipment; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateShipmentByWorkOrderAndShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Swap by Work order and Problem Updates a swap request by id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapId">ID of swap</param>
        /// <param name="swap">Swap</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateSwapByWorkOrderAndSwap (int? workOrderId, int? swapId, Swap swap)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateSwapByWorkOrderAndSwapWithHttpInfo(workOrderId, swapId, swap);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Swap by Work order and Problem Updates a swap request by id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapId">ID of swap</param>
        /// <param name="swap">Swap</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateSwapByWorkOrderAndSwapWithHttpInfo (int? workOrderId, int? swapId, Swap swap)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateSwapByWorkOrderAndSwap");
            // verify the required parameter 'swapId' is set
            if (swapId == null)
                throw new ApiException(400, "Missing required parameter 'swapId' when calling WorkorderApi->UpdateSwapByWorkOrderAndSwap");
            // verify the required parameter 'swap' is set
            if (swap == null)
                throw new ApiException(400, "Missing required parameter 'swap' when calling WorkorderApi->UpdateSwapByWorkOrderAndSwap");

            var localVarPath = "/workorders/{work_order_id}/swaps/{swap_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (swapId != null) localVarPathParams.Add("swap_id", Configuration.ApiClient.ParameterToString(swapId)); // path parameter
            if (swap != null && swap.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(swap); // http body (model) parameter
            }
            else
            {
                localVarPostBody = swap; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSwapByWorkOrderAndSwap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Swap by Work order and Problem Updates a swap request by id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapId">ID of swap</param>
        /// <param name="swap">Swap</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateSwapByWorkOrderAndSwapAsync (int? workOrderId, int? swapId, Swap swap)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateSwapByWorkOrderAndSwapAsyncWithHttpInfo(workOrderId, swapId, swap);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Swap by Work order and Problem Updates a swap request by id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="swapId">ID of swap</param>
        /// <param name="swap">Swap</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateSwapByWorkOrderAndSwapAsyncWithHttpInfo (int? workOrderId, int? swapId, Swap swap)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateSwapByWorkOrderAndSwap");
            // verify the required parameter 'swapId' is set
            if (swapId == null)
                throw new ApiException(400, "Missing required parameter 'swapId' when calling WorkorderApi->UpdateSwapByWorkOrderAndSwap");
            // verify the required parameter 'swap' is set
            if (swap == null)
                throw new ApiException(400, "Missing required parameter 'swap' when calling WorkorderApi->UpdateSwapByWorkOrderAndSwap");

            var localVarPath = "/workorders/{work_order_id}/swaps/{swap_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (swapId != null) localVarPathParams.Add("swap_id", Configuration.ApiClient.ParameterToString(swapId)); // path parameter
            if (swap != null && swap.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(swap); // http body (model) parameter
            }
            else
            {
                localVarPostBody = swap; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSwapByWorkOrderAndSwap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update tag by work order Updates a tag on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of work order</param>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateTagByWorkOrderAndProblem (int? workOrderId, int? tagId, Tag tag, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateTagByWorkOrderAndProblemWithHttpInfo(workOrderId, tagId, tag, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update tag by work order Updates a tag on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of work order</param>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateTagByWorkOrderAndProblemWithHttpInfo (int? workOrderId, int? tagId, Tag tag, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateTagByWorkOrderAndProblem");
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling WorkorderApi->UpdateTagByWorkOrderAndProblem");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling WorkorderApi->UpdateTagByWorkOrderAndProblem");

            var localVarPath = "/workorders/{work_order_id}/tags/{tag_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (tagId != null) localVarPathParams.Add("tag_id", Configuration.ApiClient.ParameterToString(tagId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (tag != null && tag.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tag); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tag; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTagByWorkOrderAndProblem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update tag by work order Updates a tag on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of work order</param>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateTagByWorkOrderAndProblemAsync (int? workOrderId, int? tagId, Tag tag, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateTagByWorkOrderAndProblemAsyncWithHttpInfo(workOrderId, tagId, tag, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update tag by work order Updates a tag on a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="tagId">ID of work order</param>
        /// <param name="tag">Tag</param>
        /// <param name="async">Async (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateTagByWorkOrderAndProblemAsyncWithHttpInfo (int? workOrderId, int? tagId, Tag tag, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateTagByWorkOrderAndProblem");
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling WorkorderApi->UpdateTagByWorkOrderAndProblem");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling WorkorderApi->UpdateTagByWorkOrderAndProblem");

            var localVarPath = "/workorders/{work_order_id}/tags/{tag_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (tagId != null) localVarPathParams.Add("tag_id", Configuration.ApiClient.ParameterToString(tagId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (tag != null && tag.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tag); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tag; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTagByWorkOrderAndProblem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Task by Work Order Updates a work order&#39;s task
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="task">JSON Model</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateTaskByWorkOrder (int? workOrderId, int? taskId, Task task)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateTaskByWorkOrderWithHttpInfo(workOrderId, taskId, task);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Task by Work Order Updates a work order&#39;s task
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="task">JSON Model</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateTaskByWorkOrderWithHttpInfo (int? workOrderId, int? taskId, Task task)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateTaskByWorkOrder");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling WorkorderApi->UpdateTaskByWorkOrder");
            // verify the required parameter 'task' is set
            if (task == null)
                throw new ApiException(400, "Missing required parameter 'task' when calling WorkorderApi->UpdateTaskByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/tasks/{task_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (task != null && task.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(task); // http body (model) parameter
            }
            else
            {
                localVarPostBody = task; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaskByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Task by Work Order Updates a work order&#39;s task
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="task">JSON Model</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateTaskByWorkOrderAsync (int? workOrderId, int? taskId, Task task)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateTaskByWorkOrderAsyncWithHttpInfo(workOrderId, taskId, task);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Task by Work Order Updates a work order&#39;s task
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="taskId">Task id</param>
        /// <param name="task">JSON Model</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateTaskByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? taskId, Task task)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateTaskByWorkOrder");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling WorkorderApi->UpdateTaskByWorkOrder");
            // verify the required parameter 'task' is set
            if (task == null)
                throw new ApiException(400, "Missing required parameter 'task' when calling WorkorderApi->UpdateTaskByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/tasks/{task_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (task != null && task.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(task); // http body (model) parameter
            }
            else
            {
                localVarPostBody = task; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaskByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Tasks by Work Order Updates all the tasks in a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="tasks">JSON Model</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateTasksByWorkOrder (int? workOrderId, Tasks tasks)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateTasksByWorkOrderWithHttpInfo(workOrderId, tasks);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Tasks by Work Order Updates all the tasks in a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="tasks">JSON Model</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateTasksByWorkOrderWithHttpInfo (int? workOrderId, Tasks tasks)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateTasksByWorkOrder");
            // verify the required parameter 'tasks' is set
            if (tasks == null)
                throw new ApiException(400, "Missing required parameter 'tasks' when calling WorkorderApi->UpdateTasksByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (tasks != null && tasks.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tasks); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tasks; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTasksByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Tasks by Work Order Updates all the tasks in a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="tasks">JSON Model</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateTasksByWorkOrderAsync (int? workOrderId, Tasks tasks)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateTasksByWorkOrderAsyncWithHttpInfo(workOrderId, tasks);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Tasks by Work Order Updates all the tasks in a work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">Work order id</param>
        /// <param name="tasks">JSON Model</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateTasksByWorkOrderAsyncWithHttpInfo (int? workOrderId, Tasks tasks)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateTasksByWorkOrder");
            // verify the required parameter 'tasks' is set
            if (tasks == null)
                throw new ApiException(400, "Missing required parameter 'tasks' when calling WorkorderApi->UpdateTasksByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (tasks != null && tasks.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tasks); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tasks; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTasksByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Time Log by Work Order Update time log for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="timeLog">Check in information</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateTimeLogByWorkOrder (int? workOrderId, int? workorderHoursId, TimeLog timeLog, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateTimeLogByWorkOrderWithHttpInfo(workOrderId, workorderHoursId, timeLog, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Time Log by Work Order Update time log for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="timeLog">Check in information</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateTimeLogByWorkOrderWithHttpInfo (int? workOrderId, int? workorderHoursId, TimeLog timeLog, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateTimeLogByWorkOrder");
            // verify the required parameter 'workorderHoursId' is set
            if (workorderHoursId == null)
                throw new ApiException(400, "Missing required parameter 'workorderHoursId' when calling WorkorderApi->UpdateTimeLogByWorkOrder");
            // verify the required parameter 'timeLog' is set
            if (timeLog == null)
                throw new ApiException(400, "Missing required parameter 'timeLog' when calling WorkorderApi->UpdateTimeLogByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/time_logs/{workorder_hours_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (workorderHoursId != null) localVarPathParams.Add("workorder_hours_id", Configuration.ApiClient.ParameterToString(workorderHoursId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (timeLog != null && timeLog.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(timeLog); // http body (model) parameter
            }
            else
            {
                localVarPostBody = timeLog; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTimeLogByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Time Log by Work Order Update time log for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="timeLog">Check in information</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateTimeLogByWorkOrderAsync (int? workOrderId, int? workorderHoursId, TimeLog timeLog, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateTimeLogByWorkOrderAsyncWithHttpInfo(workOrderId, workorderHoursId, timeLog, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Time Log by Work Order Update time log for assigned work order.
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="timeLog">Check in information</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateTimeLogByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? workorderHoursId, TimeLog timeLog, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateTimeLogByWorkOrder");
            // verify the required parameter 'workorderHoursId' is set
            if (workorderHoursId == null)
                throw new ApiException(400, "Missing required parameter 'workorderHoursId' when calling WorkorderApi->UpdateTimeLogByWorkOrder");
            // verify the required parameter 'timeLog' is set
            if (timeLog == null)
                throw new ApiException(400, "Missing required parameter 'timeLog' when calling WorkorderApi->UpdateTimeLogByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/time_logs/{workorder_hours_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (workorderHoursId != null) localVarPathParams.Add("workorder_hours_id", Configuration.ApiClient.ParameterToString(workorderHoursId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (timeLog != null && timeLog.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(timeLog); // http body (model) parameter
            }
            else
            {
                localVarPostBody = timeLog; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTimeLogByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Work Order by Work Order Updates a work order by its id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workOrder">Work order model</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder UpdateWorkOrderByWorkOrder (int? workOrderId, WorkOrder workOrder, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = UpdateWorkOrderByWorkOrderWithHttpInfo(workOrderId, workOrder, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Work Order by Work Order Updates a work order by its id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workOrder">Work order model</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > UpdateWorkOrderByWorkOrderWithHttpInfo (int? workOrderId, WorkOrder workOrder, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateWorkOrderByWorkOrder");
            // verify the required parameter 'workOrder' is set
            if (workOrder == null)
                throw new ApiException(400, "Missing required parameter 'workOrder' when calling WorkorderApi->UpdateWorkOrderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (workOrder != null && workOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(workOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workOrder; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWorkOrderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Update Work Order by Work Order Updates a work order by its id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workOrder">Work order model</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> UpdateWorkOrderByWorkOrderAsync (int? workOrderId, WorkOrder workOrder, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await UpdateWorkOrderByWorkOrderAsyncWithHttpInfo(workOrderId, workOrder, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Work Order by Work Order Updates a work order by its id
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workOrder">Work order model</param>
        /// <param name="async">Asynchronous (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> UpdateWorkOrderByWorkOrderAsyncWithHttpInfo (int? workOrderId, WorkOrder workOrder, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->UpdateWorkOrderByWorkOrder");
            // verify the required parameter 'workOrder' is set
            if (workOrder == null)
                throw new ApiException(400, "Missing required parameter 'workOrder' when calling WorkorderApi->UpdateWorkOrderByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (workOrder != null && workOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(workOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workOrder; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWorkOrderByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Verify Time Log by Work Order Verify time log for assigned work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>WorkOrder</returns>
        public WorkOrder VerifyTimeLogByWorkOrder (int? workOrderId, int? workorderHoursId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = VerifyTimeLogByWorkOrderWithHttpInfo(workOrderId, workorderHoursId, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify Time Log by Work Order Verify time log for assigned work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>ApiResponse of WorkOrder</returns>
        public ApiResponse< WorkOrder > VerifyTimeLogByWorkOrderWithHttpInfo (int? workOrderId, int? workorderHoursId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->VerifyTimeLogByWorkOrder");
            // verify the required parameter 'workorderHoursId' is set
            if (workorderHoursId == null)
                throw new ApiException(400, "Missing required parameter 'workorderHoursId' when calling WorkorderApi->VerifyTimeLogByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/time_logs/{workorder_hours_id}/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (workorderHoursId != null) localVarPathParams.Add("workorder_hours_id", Configuration.ApiClient.ParameterToString(workorderHoursId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyTimeLogByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

        /// <summary>
        /// Verify Time Log by Work Order Verify time log for assigned work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>Task of WorkOrder</returns>
        public async System.Threading.Tasks.Task<WorkOrder> VerifyTimeLogByWorkOrderAsync (int? workOrderId, int? workorderHoursId, bool? async = null)
        {
             ApiResponse<WorkOrder> localVarResponse = await VerifyTimeLogByWorkOrderAsyncWithHttpInfo(workOrderId, workorderHoursId, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify Time Log by Work Order Verify time log for assigned work order
        /// </summary>
        /// <exception cref="FieldNation.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workOrderId">ID of work order</param>
        /// <param name="workorderHoursId">ID of work order hour</param>
        /// <param name="async">Return the model in the response (slower) (optional)</param>
        /// <returns>Task of ApiResponse (WorkOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkOrder>> VerifyTimeLogByWorkOrderAsyncWithHttpInfo (int? workOrderId, int? workorderHoursId, bool? async = null)
        {
            // verify the required parameter 'workOrderId' is set
            if (workOrderId == null)
                throw new ApiException(400, "Missing required parameter 'workOrderId' when calling WorkorderApi->VerifyTimeLogByWorkOrder");
            // verify the required parameter 'workorderHoursId' is set
            if (workorderHoursId == null)
                throw new ApiException(400, "Missing required parameter 'workorderHoursId' when calling WorkorderApi->VerifyTimeLogByWorkOrder");

            var localVarPath = "/workorders/{work_order_id}/time_logs/{workorder_hours_id}/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workOrderId != null) localVarPathParams.Add("work_order_id", Configuration.ApiClient.ParameterToString(workOrderId)); // path parameter
            if (workorderHoursId != null) localVarPathParams.Add("workorder_hours_id", Configuration.ApiClient.ParameterToString(workorderHoursId)); // path parameter
            if (async != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyTimeLogByWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkOrder)));
        }

    }
}
